
uart_leds_control_OK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ce4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  08008f7c  08008f7c  00009f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009210  08009210  0000a210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009218  08009218  0000a218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800921c  0800921c  0000a21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08009220  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002fc  2400006c  0800928c  0000b06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000368  0800928c  0000b368  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012052  00000000  00000000  0000b09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002651  00000000  00000000  0001d0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000bf8  00000000  00000000  0001f740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000091f  00000000  00000000  00020338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037b3b  00000000  00000000  00020c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012dbd  00000000  00000000  00058792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ba55  00000000  00000000  0006b54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c6fa4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003608  00000000  00000000  001c6fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000078  00000000  00000000  001ca5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400006c 	.word	0x2400006c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008f64 	.word	0x08008f64

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000070 	.word	0x24000070
 80002d4:	08008f64 	.word	0x08008f64

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800060a:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <MX_DMA_Init+0x4c>)
 800060c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000610:	4a0f      	ldr	r2, [pc, #60]	@ (8000650 <MX_DMA_Init+0x4c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800061a:	4b0d      	ldr	r3, [pc, #52]	@ (8000650 <MX_DMA_Init+0x4c>)
 800061c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000620:	f003 0301 	and.w	r3, r3, #1
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000628:	2200      	movs	r2, #0
 800062a:	2100      	movs	r1, #0
 800062c:	200b      	movs	r0, #11
 800062e:	f000 fe68 	bl	8001302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000632:	200b      	movs	r0, #11
 8000634:	f000 fe7f 	bl	8001336 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000638:	2200      	movs	r2, #0
 800063a:	2100      	movs	r1, #0
 800063c:	200c      	movs	r0, #12
 800063e:	f000 fe60 	bl	8001302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000642:	200c      	movs	r0, #12
 8000644:	f000 fe77 	bl	8001336 <HAL_NVIC_EnableIRQ>

}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	58024400 	.word	0x58024400

08000654 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066a:	4b2c      	ldr	r3, [pc, #176]	@ (800071c <MX_GPIO_Init+0xc8>)
 800066c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000670:	4a2a      	ldr	r2, [pc, #168]	@ (800071c <MX_GPIO_Init+0xc8>)
 8000672:	f043 0302 	orr.w	r3, r3, #2
 8000676:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800067a:	4b28      	ldr	r3, [pc, #160]	@ (800071c <MX_GPIO_Init+0xc8>)
 800067c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000680:	f003 0302 	and.w	r3, r3, #2
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000688:	4b24      	ldr	r3, [pc, #144]	@ (800071c <MX_GPIO_Init+0xc8>)
 800068a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800068e:	4a23      	ldr	r2, [pc, #140]	@ (800071c <MX_GPIO_Init+0xc8>)
 8000690:	f043 0308 	orr.w	r3, r3, #8
 8000694:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000698:	4b20      	ldr	r3, [pc, #128]	@ (800071c <MX_GPIO_Init+0xc8>)
 800069a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800069e:	f003 0308 	and.w	r3, r3, #8
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006a6:	4b1d      	ldr	r3, [pc, #116]	@ (800071c <MX_GPIO_Init+0xc8>)
 80006a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ac:	4a1b      	ldr	r2, [pc, #108]	@ (800071c <MX_GPIO_Init+0xc8>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006b6:	4b19      	ldr	r3, [pc, #100]	@ (800071c <MX_GPIO_Init+0xc8>)
 80006b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006bc:	f003 0310 	and.w	r3, r3, #16
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ld1_Pin|ld2_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f244 0101 	movw	r1, #16385	@ 0x4001
 80006ca:	4815      	ldr	r0, [pc, #84]	@ (8000720 <MX_GPIO_Init+0xcc>)
 80006cc:	f003 fa9c 	bl	8003c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ld3_GPIO_Port, ld3_Pin, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2102      	movs	r1, #2
 80006d4:	4813      	ldr	r0, [pc, #76]	@ (8000724 <MX_GPIO_Init+0xd0>)
 80006d6:	f003 fa97 	bl	8003c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ld1_Pin ld2_Pin */
  GPIO_InitStruct.Pin = ld1_Pin|ld2_Pin;
 80006da:	f244 0301 	movw	r3, #16385	@ 0x4001
 80006de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	4619      	mov	r1, r3
 80006f2:	480b      	ldr	r0, [pc, #44]	@ (8000720 <MX_GPIO_Init+0xcc>)
 80006f4:	f003 f8d8 	bl	80038a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ld3_Pin */
  GPIO_InitStruct.Pin = ld3_Pin;
 80006f8:	2302      	movs	r3, #2
 80006fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ld3_GPIO_Port, &GPIO_InitStruct);
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	4619      	mov	r1, r3
 800070e:	4805      	ldr	r0, [pc, #20]	@ (8000724 <MX_GPIO_Init+0xd0>)
 8000710:	f003 f8ca 	bl	80038a8 <HAL_GPIO_Init>

}
 8000714:	bf00      	nop
 8000716:	3720      	adds	r7, #32
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	58024400 	.word	0x58024400
 8000720:	58020400 	.word	0x58020400
 8000724:	58021000 	.word	0x58021000

08000728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800072c:	f000 f932 	bl	8000994 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000730:	f000 fc6e 	bl	8001010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000734:	f000 f8c4 	bl	80008c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000738:	f7ff ff8c 	bl	8000654 <MX_GPIO_Init>
  MX_DMA_Init();
 800073c:	f7ff ff62 	bl	8000604 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000740:	f000 fb02 	bl	8000d48 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // Opcional: Acenda ou apague o LED no início para indicar estado inicial
  HAL_GPIO_WritePin(ld2_GPIO_Port, ld2_Pin, GPIO_PIN_RESET); // LED começa apagado
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800074a:	484f      	ldr	r0, [pc, #316]	@ (8000888 <main+0x160>)
 800074c:	f003 fa5c 	bl	8003c08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ld3_GPIO_Port, ld3_Pin, GPIO_PIN_RESET); // LED começa apagado
 8000750:	2200      	movs	r2, #0
 8000752:	2102      	movs	r1, #2
 8000754:	484d      	ldr	r0, [pc, #308]	@ (800088c <main+0x164>)
 8000756:	f003 fa57 	bl	8003c08 <HAL_GPIO_WritePin>

    /* USER CODE BEGIN 3 */
	    //Display_Menu(); // Exibe o menu a cada iteração do loop principal

	    // Tenta receber entrada do usuário sem bloquear (timeout 100ms)
	    if (HAL_UART_Receive(&huart3, &rx_data, 1, 100) == HAL_OK)
 800075a:	2364      	movs	r3, #100	@ 0x64
 800075c:	2201      	movs	r2, #1
 800075e:	494c      	ldr	r1, [pc, #304]	@ (8000890 <main+0x168>)
 8000760:	484c      	ldr	r0, [pc, #304]	@ (8000894 <main+0x16c>)
 8000762:	f006 f9af 	bl	8006ac4 <HAL_UART_Receive>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d172      	bne.n	8000852 <main+0x12a>
	    {
	      switch (rx_data)
 800076c:	4b48      	ldr	r3, [pc, #288]	@ (8000890 <main+0x168>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	3b31      	subs	r3, #49	@ 0x31
 8000772:	2b05      	cmp	r3, #5
 8000774:	d858      	bhi.n	8000828 <main+0x100>
 8000776:	a201      	add	r2, pc, #4	@ (adr r2, 800077c <main+0x54>)
 8000778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077c:	08000795 	.word	0x08000795
 8000780:	080007af 	.word	0x080007af
 8000784:	080007c9 	.word	0x080007c9
 8000788:	080007e1 	.word	0x080007e1
 800078c:	080007f9 	.word	0x080007f9
 8000790:	08000811 	.word	0x08000811
	      {
	        case '1':
	          printf(">> Opcao 1: LED VERMELHO ACESO!\r\n");
 8000794:	4840      	ldr	r0, [pc, #256]	@ (8000898 <main+0x170>)
 8000796:	f008 f851 	bl	800883c <puts>
	          HAL_GPIO_WritePin(ld2_GPIO_Port, ld2_Pin, GPIO_PIN_SET); // Acende o LED
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007a0:	4839      	ldr	r0, [pc, #228]	@ (8000888 <main+0x160>)
 80007a2:	f003 fa31 	bl	8003c08 <HAL_GPIO_WritePin>
	          led_mode = 1; // Define o modo LED ON
 80007a6:	4b3d      	ldr	r3, [pc, #244]	@ (800089c <main+0x174>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
	          break;
 80007ac:	e051      	b.n	8000852 <main+0x12a>

	        case '2':
	          printf(">> Opcao 2: LED VRMELHO APAGADO!\r\n");
 80007ae:	483c      	ldr	r0, [pc, #240]	@ (80008a0 <main+0x178>)
 80007b0:	f008 f844 	bl	800883c <puts>
	          HAL_GPIO_WritePin(ld2_GPIO_Port, ld2_Pin, GPIO_PIN_RESET); // Apaga o LED
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007ba:	4833      	ldr	r0, [pc, #204]	@ (8000888 <main+0x160>)
 80007bc:	f003 fa24 	bl	8003c08 <HAL_GPIO_WritePin>
	          led_mode = 0; // Define o modo LED OFF
 80007c0:	4b36      	ldr	r3, [pc, #216]	@ (800089c <main+0x174>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
	          break;
 80007c6:	e044      	b.n	8000852 <main+0x12a>

	        case '3':
	          printf(">> Opcao 3: LED VERDE PISCANDO CONTINUAMENTE! Pressione outra tecla para parar.\r\n");
 80007c8:	4836      	ldr	r0, [pc, #216]	@ (80008a4 <main+0x17c>)
 80007ca:	f008 f837 	bl	800883c <puts>
	          led_mode = 2; // Define o modo LED PISCANDO
 80007ce:	4b33      	ldr	r3, [pc, #204]	@ (800089c <main+0x174>)
 80007d0:	2202      	movs	r2, #2
 80007d2:	701a      	strb	r2, [r3, #0]
	          last_blink_time = HAL_GetTick(); // Reseta o timer do pisca-pisca
 80007d4:	f000 fca2 	bl	800111c <HAL_GetTick>
 80007d8:	4603      	mov	r3, r0
 80007da:	4a33      	ldr	r2, [pc, #204]	@ (80008a8 <main+0x180>)
 80007dc:	6013      	str	r3, [r2, #0]
	          break;
 80007de:	e038      	b.n	8000852 <main+0x12a>

	        case '4':
	        	          printf(">> Opcao 1: LED LARANJA ACESO!\r\n");
 80007e0:	4832      	ldr	r0, [pc, #200]	@ (80008ac <main+0x184>)
 80007e2:	f008 f82b 	bl	800883c <puts>
	        	          HAL_GPIO_WritePin(ld3_GPIO_Port, ld3_Pin, GPIO_PIN_SET); // Acende o LED
 80007e6:	2201      	movs	r2, #1
 80007e8:	2102      	movs	r1, #2
 80007ea:	4828      	ldr	r0, [pc, #160]	@ (800088c <main+0x164>)
 80007ec:	f003 fa0c 	bl	8003c08 <HAL_GPIO_WritePin>
	        	          led_mode = 1; // Define o modo LED ON
 80007f0:	4b2a      	ldr	r3, [pc, #168]	@ (800089c <main+0x174>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	701a      	strb	r2, [r3, #0]
	        	          break;
 80007f6:	e02c      	b.n	8000852 <main+0x12a>

	        	  case '5':
	        	          printf(">> Opcao 2: LED LARANJA APAGADO!\r\n");
 80007f8:	482d      	ldr	r0, [pc, #180]	@ (80008b0 <main+0x188>)
 80007fa:	f008 f81f 	bl	800883c <puts>
	        	          HAL_GPIO_WritePin(ld3_GPIO_Port, ld3_Pin, GPIO_PIN_RESET); // Apaga o LED
 80007fe:	2200      	movs	r2, #0
 8000800:	2102      	movs	r1, #2
 8000802:	4822      	ldr	r0, [pc, #136]	@ (800088c <main+0x164>)
 8000804:	f003 fa00 	bl	8003c08 <HAL_GPIO_WritePin>
	        	          led_mode = 0; // Define o modo LED OFF
 8000808:	4b24      	ldr	r3, [pc, #144]	@ (800089c <main+0x174>)
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
	        	          break;
 800080e:	e020      	b.n	8000852 <main+0x12a>

	        	  case '6':
	        	              printf(">> Opcao 6: LED VERDE APAGADO E PISCA-PISCA INTERROMPIDO!\r\n");
 8000810:	4828      	ldr	r0, [pc, #160]	@ (80008b4 <main+0x18c>)
 8000812:	f008 f813 	bl	800883c <puts>
	        	              HAL_GPIO_WritePin(ld1_GPIO_Port, ld1_Pin, GPIO_PIN_RESET); // Garante que o LED verde está apagado
 8000816:	2200      	movs	r2, #0
 8000818:	2101      	movs	r1, #1
 800081a:	481b      	ldr	r0, [pc, #108]	@ (8000888 <main+0x160>)
 800081c:	f003 f9f4 	bl	8003c08 <HAL_GPIO_WritePin>
	        	              led_mode = 0; // Sai do modo pisca-pisca (define para um valor que não é 2)
 8000820:	4b1e      	ldr	r3, [pc, #120]	@ (800089c <main+0x174>)
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
	        	              break;
 8000826:	e014      	b.n	8000852 <main+0x12a>

	        default:
	          printf(">> Opcao invalida. Tente novamente.\r\n");
 8000828:	4823      	ldr	r0, [pc, #140]	@ (80008b8 <main+0x190>)
 800082a:	f008 f807 	bl	800883c <puts>
	          // Se uma opção inválida for digitada, certifique-se de que o LED não fique preso em um estado de piscar
	          if (led_mode == 2) {
 800082e:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <main+0x174>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2b02      	cmp	r3, #2
 8000836:	d10b      	bne.n	8000850 <main+0x128>
	             HAL_GPIO_WritePin(ld2_GPIO_Port, ld2_Pin, GPIO_PIN_RESET); // Apaga o LED
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800083e:	4812      	ldr	r0, [pc, #72]	@ (8000888 <main+0x160>)
 8000840:	f003 f9e2 	bl	8003c08 <HAL_GPIO_WritePin>
	             led_mode = 0; // Sai do modo pisca-pisca
 8000844:	4b15      	ldr	r3, [pc, #84]	@ (800089c <main+0x174>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
	             printf(">> Modo pisca-pisca interrompido por opcao invalida.\r\n");
 800084a:	481c      	ldr	r0, [pc, #112]	@ (80008bc <main+0x194>)
 800084c:	f007 fff6 	bl	800883c <puts>
	          }
	          break;
 8000850:	bf00      	nop
	      }
	    }

        // Lógica para piscar o LED se o modo for 2
        if (led_mode == 2) {
 8000852:	4b12      	ldr	r3, [pc, #72]	@ (800089c <main+0x174>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b02      	cmp	r3, #2
 800085a:	f47f af7e 	bne.w	800075a <main+0x32>
            if (HAL_GetTick() - last_blink_time >= BLINK_DELAY_MS) {
 800085e:	f000 fc5d 	bl	800111c <HAL_GetTick>
 8000862:	4602      	mov	r2, r0
 8000864:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <main+0x180>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800086e:	f4ff af74 	bcc.w	800075a <main+0x32>
                HAL_GPIO_TogglePin(ld1_GPIO_Port, ld1_Pin);// Inverte o estado do LED
 8000872:	2101      	movs	r1, #1
 8000874:	4804      	ldr	r0, [pc, #16]	@ (8000888 <main+0x160>)
 8000876:	f003 f9e0 	bl	8003c3a <HAL_GPIO_TogglePin>
                last_blink_time = HAL_GetTick();            // Atualiza o tempo da última piscada
 800087a:	f000 fc4f 	bl	800111c <HAL_GetTick>
 800087e:	4603      	mov	r3, r0
 8000880:	4a09      	ldr	r2, [pc, #36]	@ (80008a8 <main+0x180>)
 8000882:	6013      	str	r3, [r2, #0]
	    if (HAL_UART_Receive(&huart3, &rx_data, 1, 100) == HAL_OK)
 8000884:	e769      	b.n	800075a <main+0x32>
 8000886:	bf00      	nop
 8000888:	58020400 	.word	0x58020400
 800088c:	58021000 	.word	0x58021000
 8000890:	24000088 	.word	0x24000088
 8000894:	24000094 	.word	0x24000094
 8000898:	08008f7c 	.word	0x08008f7c
 800089c:	24000089 	.word	0x24000089
 80008a0:	08008fa0 	.word	0x08008fa0
 80008a4:	08008fc4 	.word	0x08008fc4
 80008a8:	2400008c 	.word	0x2400008c
 80008ac:	08009018 	.word	0x08009018
 80008b0:	08009038 	.word	0x08009038
 80008b4:	0800905c 	.word	0x0800905c
 80008b8:	08009098 	.word	0x08009098
 80008bc:	080090c0 	.word	0x080090c0

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b09c      	sub	sp, #112	@ 0x70
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ca:	224c      	movs	r2, #76	@ 0x4c
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f008 f894 	bl	80089fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2220      	movs	r2, #32
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f008 f88e 	bl	80089fc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008e0:	2002      	movs	r0, #2
 80008e2:	f003 f9c5 	bl	8003c70 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	4b28      	ldr	r3, [pc, #160]	@ (800098c <SystemClock_Config+0xcc>)
 80008ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ee:	4a27      	ldr	r2, [pc, #156]	@ (800098c <SystemClock_Config+0xcc>)
 80008f0:	f023 0301 	bic.w	r3, r3, #1
 80008f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008f6:	4b25      	ldr	r3, [pc, #148]	@ (800098c <SystemClock_Config+0xcc>)
 80008f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	4b23      	ldr	r3, [pc, #140]	@ (8000990 <SystemClock_Config+0xd0>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000908:	4a21      	ldr	r2, [pc, #132]	@ (8000990 <SystemClock_Config+0xd0>)
 800090a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800090e:	6193      	str	r3, [r2, #24]
 8000910:	4b1f      	ldr	r3, [pc, #124]	@ (8000990 <SystemClock_Config+0xd0>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800091c:	bf00      	nop
 800091e:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <SystemClock_Config+0xd0>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000926:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800092a:	d1f8      	bne.n	800091e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800092c:	2302      	movs	r3, #2
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000930:	2301      	movs	r3, #1
 8000932:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000934:	2340      	movs	r3, #64	@ 0x40
 8000936:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000938:	2300      	movs	r3, #0
 800093a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000940:	4618      	mov	r0, r3
 8000942:	f003 f9cf 	bl	8003ce4 <HAL_RCC_OscConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800094c:	f000 f84e 	bl	80009ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000950:	233f      	movs	r3, #63	@ 0x3f
 8000952:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000964:	2340      	movs	r3, #64	@ 0x40
 8000966:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2101      	movs	r1, #1
 8000974:	4618      	mov	r0, r3
 8000976:	f003 fe0f 	bl	8004598 <HAL_RCC_ClockConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000980:	f000 f834 	bl	80009ec <Error_Handler>
  }
}
 8000984:	bf00      	nop
 8000986:	3770      	adds	r7, #112	@ 0x70
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	58000400 	.word	0x58000400
 8000990:	58024800 	.word	0x58024800

08000994 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800099a:	463b      	mov	r3, r7
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80009a6:	f000 fce1 	bl	800136c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009aa:	2301      	movs	r3, #1
 80009ac:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80009b6:	231f      	movs	r3, #31
 80009b8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80009ba:	2387      	movs	r3, #135	@ 0x87
 80009bc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80009be:	2300      	movs	r3, #0
 80009c0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80009c2:	2300      	movs	r3, #0
 80009c4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80009c6:	2301      	movs	r3, #1
 80009c8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80009ca:	2301      	movs	r3, #1
 80009cc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009d6:	463b      	mov	r3, r7
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 fcff 	bl	80013dc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009de:	2004      	movs	r0, #4
 80009e0:	f000 fcdc 	bl	800139c <HAL_MPU_Enable>

}
 80009e4:	bf00      	nop
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f0:	b672      	cpsid	i
}
 80009f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <Error_Handler+0x8>

080009f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <HAL_MspInit+0x30>)
 8000a00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a04:	4a08      	ldr	r2, [pc, #32]	@ (8000a28 <HAL_MspInit+0x30>)
 8000a06:	f043 0302 	orr.w	r3, r3, #2
 8000a0a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <HAL_MspInit+0x30>)
 8000a10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a14:	f003 0302 	and.w	r3, r3, #2
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	58024400 	.word	0x58024400

08000a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <NMI_Handler+0x4>

08000a34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <HardFault_Handler+0x4>

08000a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <MemManage_Handler+0x4>

08000a44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <BusFault_Handler+0x4>

08000a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <UsageFault_Handler+0x4>

08000a54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a82:	f000 fb37 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000a90:	4802      	ldr	r0, [pc, #8]	@ (8000a9c <DMA1_Stream0_IRQHandler+0x10>)
 8000a92:	f001 fda3 	bl	80025dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	24000128 	.word	0x24000128

08000aa0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000aa4:	4802      	ldr	r0, [pc, #8]	@ (8000ab0 <DMA1_Stream1_IRQHandler+0x10>)
 8000aa6:	f001 fd99 	bl	80025dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	240001a0 	.word	0x240001a0

08000ab4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ab8:	4802      	ldr	r0, [pc, #8]	@ (8000ac4 <USART3_IRQHandler+0x10>)
 8000aba:	f006 f8cb 	bl	8006c54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	24000094 	.word	0x24000094

08000ac8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	e00a      	b.n	8000af0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ada:	f3af 8000 	nop.w
 8000ade:	4601      	mov	r1, r0
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	60ba      	str	r2, [r7, #8]
 8000ae6:	b2ca      	uxtb	r2, r1
 8000ae8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	3301      	adds	r3, #1
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	dbf0      	blt.n	8000ada <_read+0x12>
  }

  return len;
 8000af8:	687b      	ldr	r3, [r7, #4]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b083      	sub	sp, #12
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
 8000b22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b2a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <_isatty>:

int _isatty(int file)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b42:	2301      	movs	r3, #1
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
	...

08000b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b74:	4a14      	ldr	r2, [pc, #80]	@ (8000bc8 <_sbrk+0x5c>)
 8000b76:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <_sbrk+0x60>)
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b80:	4b13      	ldr	r3, [pc, #76]	@ (8000bd0 <_sbrk+0x64>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d102      	bne.n	8000b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b88:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <_sbrk+0x64>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	@ (8000bd4 <_sbrk+0x68>)
 8000b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b8e:	4b10      	ldr	r3, [pc, #64]	@ (8000bd0 <_sbrk+0x64>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d207      	bcs.n	8000bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b9c:	f007 ff7c 	bl	8008a98 <__errno>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	e009      	b.n	8000bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bac:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	4a05      	ldr	r2, [pc, #20]	@ (8000bd0 <_sbrk+0x64>)
 8000bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	24080000 	.word	0x24080000
 8000bcc:	00000400 	.word	0x00000400
 8000bd0:	24000090 	.word	0x24000090
 8000bd4:	24000368 	.word	0x24000368

08000bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bdc:	4b43      	ldr	r3, [pc, #268]	@ (8000cec <SystemInit+0x114>)
 8000bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000be2:	4a42      	ldr	r2, [pc, #264]	@ (8000cec <SystemInit+0x114>)
 8000be4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000be8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bec:	4b40      	ldr	r3, [pc, #256]	@ (8000cf0 <SystemInit+0x118>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f003 030f 	and.w	r3, r3, #15
 8000bf4:	2b06      	cmp	r3, #6
 8000bf6:	d807      	bhi.n	8000c08 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bf8:	4b3d      	ldr	r3, [pc, #244]	@ (8000cf0 <SystemInit+0x118>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f023 030f 	bic.w	r3, r3, #15
 8000c00:	4a3b      	ldr	r2, [pc, #236]	@ (8000cf0 <SystemInit+0x118>)
 8000c02:	f043 0307 	orr.w	r3, r3, #7
 8000c06:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c08:	4b3a      	ldr	r3, [pc, #232]	@ (8000cf4 <SystemInit+0x11c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a39      	ldr	r2, [pc, #228]	@ (8000cf4 <SystemInit+0x11c>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c14:	4b37      	ldr	r3, [pc, #220]	@ (8000cf4 <SystemInit+0x11c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c1a:	4b36      	ldr	r3, [pc, #216]	@ (8000cf4 <SystemInit+0x11c>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	4935      	ldr	r1, [pc, #212]	@ (8000cf4 <SystemInit+0x11c>)
 8000c20:	4b35      	ldr	r3, [pc, #212]	@ (8000cf8 <SystemInit+0x120>)
 8000c22:	4013      	ands	r3, r2
 8000c24:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c26:	4b32      	ldr	r3, [pc, #200]	@ (8000cf0 <SystemInit+0x118>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f003 0308 	and.w	r3, r3, #8
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d007      	beq.n	8000c42 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c32:	4b2f      	ldr	r3, [pc, #188]	@ (8000cf0 <SystemInit+0x118>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f023 030f 	bic.w	r3, r3, #15
 8000c3a:	4a2d      	ldr	r2, [pc, #180]	@ (8000cf0 <SystemInit+0x118>)
 8000c3c:	f043 0307 	orr.w	r3, r3, #7
 8000c40:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c42:	4b2c      	ldr	r3, [pc, #176]	@ (8000cf4 <SystemInit+0x11c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c48:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf4 <SystemInit+0x11c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c4e:	4b29      	ldr	r3, [pc, #164]	@ (8000cf4 <SystemInit+0x11c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c54:	4b27      	ldr	r3, [pc, #156]	@ (8000cf4 <SystemInit+0x11c>)
 8000c56:	4a29      	ldr	r2, [pc, #164]	@ (8000cfc <SystemInit+0x124>)
 8000c58:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c5a:	4b26      	ldr	r3, [pc, #152]	@ (8000cf4 <SystemInit+0x11c>)
 8000c5c:	4a28      	ldr	r2, [pc, #160]	@ (8000d00 <SystemInit+0x128>)
 8000c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c60:	4b24      	ldr	r3, [pc, #144]	@ (8000cf4 <SystemInit+0x11c>)
 8000c62:	4a28      	ldr	r2, [pc, #160]	@ (8000d04 <SystemInit+0x12c>)
 8000c64:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c66:	4b23      	ldr	r3, [pc, #140]	@ (8000cf4 <SystemInit+0x11c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c6c:	4b21      	ldr	r3, [pc, #132]	@ (8000cf4 <SystemInit+0x11c>)
 8000c6e:	4a25      	ldr	r2, [pc, #148]	@ (8000d04 <SystemInit+0x12c>)
 8000c70:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c72:	4b20      	ldr	r3, [pc, #128]	@ (8000cf4 <SystemInit+0x11c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c78:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf4 <SystemInit+0x11c>)
 8000c7a:	4a22      	ldr	r2, [pc, #136]	@ (8000d04 <SystemInit+0x12c>)
 8000c7c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf4 <SystemInit+0x11c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c84:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf4 <SystemInit+0x11c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a1a      	ldr	r2, [pc, #104]	@ (8000cf4 <SystemInit+0x11c>)
 8000c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c90:	4b18      	ldr	r3, [pc, #96]	@ (8000cf4 <SystemInit+0x11c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c96:	4b1c      	ldr	r3, [pc, #112]	@ (8000d08 <SystemInit+0x130>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d0c <SystemInit+0x134>)
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000ca2:	d202      	bcs.n	8000caa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d10 <SystemInit+0x138>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000caa:	4b12      	ldr	r3, [pc, #72]	@ (8000cf4 <SystemInit+0x11c>)
 8000cac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000cb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d113      	bne.n	8000ce0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <SystemInit+0x11c>)
 8000cba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf4 <SystemInit+0x11c>)
 8000cc0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cc4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cc8:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <SystemInit+0x13c>)
 8000cca:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000cce:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000cd0:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <SystemInit+0x11c>)
 8000cd2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000cd6:	4a07      	ldr	r2, [pc, #28]	@ (8000cf4 <SystemInit+0x11c>)
 8000cd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000cdc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00
 8000cf0:	52002000 	.word	0x52002000
 8000cf4:	58024400 	.word	0x58024400
 8000cf8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cfc:	02020200 	.word	0x02020200
 8000d00:	01ff0000 	.word	0x01ff0000
 8000d04:	01010280 	.word	0x01010280
 8000d08:	5c001000 	.word	0x5c001000
 8000d0c:	ffff0000 	.word	0xffff0000
 8000d10:	51008108 	.word	0x51008108
 8000d14:	52004000 	.word	0x52004000

08000d18 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	@ (8000d44 <ExitRun0Mode+0x2c>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	4a08      	ldr	r2, [pc, #32]	@ (8000d44 <ExitRun0Mode+0x2c>)
 8000d22:	f043 0302 	orr.w	r3, r3, #2
 8000d26:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000d28:	bf00      	nop
 8000d2a:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <ExitRun0Mode+0x2c>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d0f9      	beq.n	8000d2a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000d36:	bf00      	nop
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	58024800 	.word	0x58024800

08000d48 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d4c:	4b22      	ldr	r3, [pc, #136]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d4e:	4a23      	ldr	r2, [pc, #140]	@ (8000ddc <MX_USART3_UART_Init+0x94>)
 8000d50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d52:	4b21      	ldr	r3, [pc, #132]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d60:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d78:	4b17      	ldr	r3, [pc, #92]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7e:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d84:	4b14      	ldr	r3, [pc, #80]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d90:	4811      	ldr	r0, [pc, #68]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d92:	f005 fdb9 	bl	8006908 <HAL_UART_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d9c:	f7ff fe26 	bl	80009ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000da0:	2100      	movs	r1, #0
 8000da2:	480d      	ldr	r0, [pc, #52]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000da4:	f007 fb68 	bl	8008478 <HAL_UARTEx_SetTxFifoThreshold>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000dae:	f7ff fe1d 	bl	80009ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db2:	2100      	movs	r1, #0
 8000db4:	4808      	ldr	r0, [pc, #32]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000db6:	f007 fb9d 	bl	80084f4 <HAL_UARTEx_SetRxFifoThreshold>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000dc0:	f7ff fe14 	bl	80009ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dc4:	4804      	ldr	r0, [pc, #16]	@ (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000dc6:	f007 fb1e 	bl	8008406 <HAL_UARTEx_DisableFifoMode>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000dd0:	f7ff fe0c 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	24000094 	.word	0x24000094
 8000ddc:	40004800 	.word	0x40004800

08000de0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b0ba      	sub	sp, #232	@ 0xe8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df8:	f107 0310 	add.w	r3, r7, #16
 8000dfc:	22c0      	movs	r2, #192	@ 0xc0
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f007 fdfb 	bl	80089fc <memset>
  if(uartHandle->Instance==USART3)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a59      	ldr	r2, [pc, #356]	@ (8000f70 <HAL_UART_MspInit+0x190>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	f040 80aa 	bne.w	8000f66 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e12:	f04f 0202 	mov.w	r2, #2
 8000e16:	f04f 0300 	mov.w	r3, #0
 8000e1a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f003 ff41 	bl	8004cb0 <HAL_RCCEx_PeriphCLKConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8000e34:	f7ff fdda 	bl	80009ec <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e38:	4b4e      	ldr	r3, [pc, #312]	@ (8000f74 <HAL_UART_MspInit+0x194>)
 8000e3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e3e:	4a4d      	ldr	r2, [pc, #308]	@ (8000f74 <HAL_UART_MspInit+0x194>)
 8000e40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e44:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e48:	4b4a      	ldr	r3, [pc, #296]	@ (8000f74 <HAL_UART_MspInit+0x194>)
 8000e4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e56:	4b47      	ldr	r3, [pc, #284]	@ (8000f74 <HAL_UART_MspInit+0x194>)
 8000e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5c:	4a45      	ldr	r2, [pc, #276]	@ (8000f74 <HAL_UART_MspInit+0x194>)
 8000e5e:	f043 0308 	orr.w	r3, r3, #8
 8000e62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e66:	4b43      	ldr	r3, [pc, #268]	@ (8000f74 <HAL_UART_MspInit+0x194>)
 8000e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6c:	f003 0308 	and.w	r3, r3, #8
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e74:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e8e:	2307      	movs	r3, #7
 8000e90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e94:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4837      	ldr	r0, [pc, #220]	@ (8000f78 <HAL_UART_MspInit+0x198>)
 8000e9c:	f002 fd04 	bl	80038a8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8000ea0:	4b36      	ldr	r3, [pc, #216]	@ (8000f7c <HAL_UART_MspInit+0x19c>)
 8000ea2:	4a37      	ldr	r2, [pc, #220]	@ (8000f80 <HAL_UART_MspInit+0x1a0>)
 8000ea4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000ea6:	4b35      	ldr	r3, [pc, #212]	@ (8000f7c <HAL_UART_MspInit+0x19c>)
 8000ea8:	222d      	movs	r2, #45	@ 0x2d
 8000eaa:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eac:	4b33      	ldr	r3, [pc, #204]	@ (8000f7c <HAL_UART_MspInit+0x19c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb2:	4b32      	ldr	r3, [pc, #200]	@ (8000f7c <HAL_UART_MspInit+0x19c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eb8:	4b30      	ldr	r3, [pc, #192]	@ (8000f7c <HAL_UART_MspInit+0x19c>)
 8000eba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ebe:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f7c <HAL_UART_MspInit+0x19c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ec6:	4b2d      	ldr	r3, [pc, #180]	@ (8000f7c <HAL_UART_MspInit+0x19c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8000f7c <HAL_UART_MspInit+0x19c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f7c <HAL_UART_MspInit+0x19c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ed8:	4b28      	ldr	r3, [pc, #160]	@ (8000f7c <HAL_UART_MspInit+0x19c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000ede:	4827      	ldr	r0, [pc, #156]	@ (8000f7c <HAL_UART_MspInit+0x19c>)
 8000ee0:	f000 fabc 	bl	800145c <HAL_DMA_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000eea:	f7ff fd7f 	bl	80009ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a22      	ldr	r2, [pc, #136]	@ (8000f7c <HAL_UART_MspInit+0x19c>)
 8000ef2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000ef6:	4a21      	ldr	r2, [pc, #132]	@ (8000f7c <HAL_UART_MspInit+0x19c>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8000efc:	4b21      	ldr	r3, [pc, #132]	@ (8000f84 <HAL_UART_MspInit+0x1a4>)
 8000efe:	4a22      	ldr	r2, [pc, #136]	@ (8000f88 <HAL_UART_MspInit+0x1a8>)
 8000f00:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000f02:	4b20      	ldr	r3, [pc, #128]	@ (8000f84 <HAL_UART_MspInit+0x1a4>)
 8000f04:	222e      	movs	r2, #46	@ 0x2e
 8000f06:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f08:	4b1e      	ldr	r3, [pc, #120]	@ (8000f84 <HAL_UART_MspInit+0x1a4>)
 8000f0a:	2240      	movs	r2, #64	@ 0x40
 8000f0c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f84 <HAL_UART_MspInit+0x1a4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f14:	4b1b      	ldr	r3, [pc, #108]	@ (8000f84 <HAL_UART_MspInit+0x1a4>)
 8000f16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f1a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f1c:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <HAL_UART_MspInit+0x1a4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f22:	4b18      	ldr	r3, [pc, #96]	@ (8000f84 <HAL_UART_MspInit+0x1a4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000f28:	4b16      	ldr	r3, [pc, #88]	@ (8000f84 <HAL_UART_MspInit+0x1a4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f2e:	4b15      	ldr	r3, [pc, #84]	@ (8000f84 <HAL_UART_MspInit+0x1a4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f34:	4b13      	ldr	r3, [pc, #76]	@ (8000f84 <HAL_UART_MspInit+0x1a4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000f3a:	4812      	ldr	r0, [pc, #72]	@ (8000f84 <HAL_UART_MspInit+0x1a4>)
 8000f3c:	f000 fa8e 	bl	800145c <HAL_DMA_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8000f46:	f7ff fd51 	bl	80009ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f84 <HAL_UART_MspInit+0x1a4>)
 8000f4e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000f50:	4a0c      	ldr	r2, [pc, #48]	@ (8000f84 <HAL_UART_MspInit+0x1a4>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2027      	movs	r0, #39	@ 0x27
 8000f5c:	f000 f9d1 	bl	8001302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f60:	2027      	movs	r0, #39	@ 0x27
 8000f62:	f000 f9e8 	bl	8001336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f66:	bf00      	nop
 8000f68:	37e8      	adds	r7, #232	@ 0xe8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40004800 	.word	0x40004800
 8000f74:	58024400 	.word	0x58024400
 8000f78:	58020c00 	.word	0x58020c00
 8000f7c:	24000128 	.word	0x24000128
 8000f80:	40020010 	.word	0x40020010
 8000f84:	240001a0 	.word	0x240001a0
 8000f88:	40020028 	.word	0x40020028

08000f8c <_write>:
  }
}

/* USER CODE BEGIN 1 */
int _write(int file, char *ptr, int len)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *) ptr, len, 1000);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	4804      	ldr	r0, [pc, #16]	@ (8000fb4 <_write+0x28>)
 8000fa4:	f005 fd00 	bl	80069a8 <HAL_UART_Transmit>
  return len;
 8000fa8:	687b      	ldr	r3, [r7, #4]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	24000094 	.word	0x24000094

08000fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fb8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000ff4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000fbc:	f7ff feac 	bl	8000d18 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fc0:	f7ff fe0a 	bl	8000bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc4:	480c      	ldr	r0, [pc, #48]	@ (8000ff8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fc6:	490d      	ldr	r1, [pc, #52]	@ (8000ffc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001000 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fdc:	4c0a      	ldr	r4, [pc, #40]	@ (8001008 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fea:	f007 fd5b 	bl	8008aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fee:	f7ff fb9b 	bl	8000728 <main>
  bx  lr
 8000ff2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ff4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ff8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ffc:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001000:	08009220 	.word	0x08009220
  ldr r2, =_sbss
 8001004:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8001008:	24000368 	.word	0x24000368

0800100c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC3_IRQHandler>
	...

08001010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001016:	2003      	movs	r0, #3
 8001018:	f000 f968 	bl	80012ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800101c:	f003 fc72 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 8001020:	4602      	mov	r2, r0
 8001022:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <HAL_Init+0x68>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	0a1b      	lsrs	r3, r3, #8
 8001028:	f003 030f 	and.w	r3, r3, #15
 800102c:	4913      	ldr	r1, [pc, #76]	@ (800107c <HAL_Init+0x6c>)
 800102e:	5ccb      	ldrb	r3, [r1, r3]
 8001030:	f003 031f 	and.w	r3, r3, #31
 8001034:	fa22 f303 	lsr.w	r3, r2, r3
 8001038:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800103a:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <HAL_Init+0x68>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	4a0e      	ldr	r2, [pc, #56]	@ (800107c <HAL_Init+0x6c>)
 8001044:	5cd3      	ldrb	r3, [r2, r3]
 8001046:	f003 031f 	and.w	r3, r3, #31
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	fa22 f303 	lsr.w	r3, r2, r3
 8001050:	4a0b      	ldr	r2, [pc, #44]	@ (8001080 <HAL_Init+0x70>)
 8001052:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001054:	4a0b      	ldr	r2, [pc, #44]	@ (8001084 <HAL_Init+0x74>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800105a:	200f      	movs	r0, #15
 800105c:	f000 f814 	bl	8001088 <HAL_InitTick>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e002      	b.n	8001070 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800106a:	f7ff fcc5 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	58024400 	.word	0x58024400
 800107c:	080091d0 	.word	0x080091d0
 8001080:	24000004 	.word	0x24000004
 8001084:	24000000 	.word	0x24000000

08001088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001090:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <HAL_InitTick+0x60>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e021      	b.n	80010e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800109c:	4b13      	ldr	r3, [pc, #76]	@ (80010ec <HAL_InitTick+0x64>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <HAL_InitTick+0x60>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f94d 	bl	8001352 <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00e      	b.n	80010e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d80a      	bhi.n	80010de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f000 f917 	bl	8001302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d4:	4a06      	ldr	r2, [pc, #24]	@ (80010f0 <HAL_InitTick+0x68>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2400000c 	.word	0x2400000c
 80010ec:	24000000 	.word	0x24000000
 80010f0:	24000008 	.word	0x24000008

080010f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f8:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <HAL_IncTick+0x20>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <HAL_IncTick+0x24>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a04      	ldr	r2, [pc, #16]	@ (8001118 <HAL_IncTick+0x24>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	2400000c 	.word	0x2400000c
 8001118:	24000218 	.word	0x24000218

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	@ (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	24000218 	.word	0x24000218

08001134 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001138:	4b03      	ldr	r3, [pc, #12]	@ (8001148 <HAL_GetREVID+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	0c1b      	lsrs	r3, r3, #16
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	5c001000 	.word	0x5c001000

0800114c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800115c:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <__NVIC_SetPriorityGrouping+0x40>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001168:	4013      	ands	r3, r2
 800116a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001174:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	4313      	orrs	r3, r2
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	@ (800118c <__NVIC_SetPriorityGrouping+0x40>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00
 8001190:	05fa0000 	.word	0x05fa0000

08001194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001198:	4b04      	ldr	r3, [pc, #16]	@ (80011ac <__NVIC_GetPriorityGrouping+0x18>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	f003 0307 	and.w	r3, r3, #7
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	db0b      	blt.n	80011da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	f003 021f 	and.w	r2, r3, #31
 80011c8:	4907      	ldr	r1, [pc, #28]	@ (80011e8 <__NVIC_EnableIRQ+0x38>)
 80011ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ce:	095b      	lsrs	r3, r3, #5
 80011d0:	2001      	movs	r0, #1
 80011d2:	fa00 f202 	lsl.w	r2, r0, r2
 80011d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000e100 	.word	0xe000e100

080011ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db0a      	blt.n	8001216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	490c      	ldr	r1, [pc, #48]	@ (8001238 <__NVIC_SetPriority+0x4c>)
 8001206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	440b      	add	r3, r1
 8001210:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001214:	e00a      	b.n	800122c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4908      	ldr	r1, [pc, #32]	@ (800123c <__NVIC_SetPriority+0x50>)
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	3b04      	subs	r3, #4
 8001224:	0112      	lsls	r2, r2, #4
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	440b      	add	r3, r1
 800122a:	761a      	strb	r2, [r3, #24]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	@ 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f1c3 0307 	rsb	r3, r3, #7
 800125a:	2b04      	cmp	r3, #4
 800125c:	bf28      	it	cs
 800125e:	2304      	movcs	r3, #4
 8001260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3304      	adds	r3, #4
 8001266:	2b06      	cmp	r3, #6
 8001268:	d902      	bls.n	8001270 <NVIC_EncodePriority+0x30>
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3b03      	subs	r3, #3
 800126e:	e000      	b.n	8001272 <NVIC_EncodePriority+0x32>
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001288:	f04f 31ff 	mov.w	r1, #4294967295
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43d9      	mvns	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	4313      	orrs	r3, r2
         );
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	@ 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b8:	d301      	bcc.n	80012be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00f      	b.n	80012de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012be:	4a0a      	ldr	r2, [pc, #40]	@ (80012e8 <SysTick_Config+0x40>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c6:	210f      	movs	r1, #15
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f7ff ff8e 	bl	80011ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d0:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <SysTick_Config+0x40>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d6:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <SysTick_Config+0x40>)
 80012d8:	2207      	movs	r2, #7
 80012da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	e000e010 	.word	0xe000e010

080012ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff29 	bl	800114c <__NVIC_SetPriorityGrouping>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001310:	f7ff ff40 	bl	8001194 <__NVIC_GetPriorityGrouping>
 8001314:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	6978      	ldr	r0, [r7, #20]
 800131c:	f7ff ff90 	bl	8001240 <NVIC_EncodePriority>
 8001320:	4602      	mov	r2, r0
 8001322:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff5f 	bl	80011ec <__NVIC_SetPriority>
}
 800132e:	bf00      	nop
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001340:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff33 	bl	80011b0 <__NVIC_EnableIRQ>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ffa4 	bl	80012a8 <SysTick_Config>
 8001360:	4603      	mov	r3, r0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001370:	f3bf 8f5f 	dmb	sy
}
 8001374:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001376:	4b07      	ldr	r3, [pc, #28]	@ (8001394 <HAL_MPU_Disable+0x28>)
 8001378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137a:	4a06      	ldr	r2, [pc, #24]	@ (8001394 <HAL_MPU_Disable+0x28>)
 800137c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001380:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001382:	4b05      	ldr	r3, [pc, #20]	@ (8001398 <HAL_MPU_Disable+0x2c>)
 8001384:	2200      	movs	r2, #0
 8001386:	605a      	str	r2, [r3, #4]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000ed00 	.word	0xe000ed00
 8001398:	e000ed90 	.word	0xe000ed90

0800139c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80013a4:	4a0b      	ldr	r2, [pc, #44]	@ (80013d4 <HAL_MPU_Enable+0x38>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80013ae:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <HAL_MPU_Enable+0x3c>)
 80013b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b2:	4a09      	ldr	r2, [pc, #36]	@ (80013d8 <HAL_MPU_Enable+0x3c>)
 80013b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013b8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80013ba:	f3bf 8f4f 	dsb	sy
}
 80013be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013c0:	f3bf 8f6f 	isb	sy
}
 80013c4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed90 	.word	0xe000ed90
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	785a      	ldrb	r2, [r3, #1]
 80013e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001458 <HAL_MPU_ConfigRegion+0x7c>)
 80013ea:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80013ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001458 <HAL_MPU_ConfigRegion+0x7c>)
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	4a19      	ldr	r2, [pc, #100]	@ (8001458 <HAL_MPU_ConfigRegion+0x7c>)
 80013f2:	f023 0301 	bic.w	r3, r3, #1
 80013f6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80013f8:	4a17      	ldr	r2, [pc, #92]	@ (8001458 <HAL_MPU_ConfigRegion+0x7c>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	7b1b      	ldrb	r3, [r3, #12]
 8001404:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	7adb      	ldrb	r3, [r3, #11]
 800140a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800140c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7a9b      	ldrb	r3, [r3, #10]
 8001412:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001414:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7b5b      	ldrb	r3, [r3, #13]
 800141a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800141c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	7b9b      	ldrb	r3, [r3, #14]
 8001422:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001424:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	7bdb      	ldrb	r3, [r3, #15]
 800142a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800142c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7a5b      	ldrb	r3, [r3, #9]
 8001432:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001434:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	7a1b      	ldrb	r3, [r3, #8]
 800143a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800143c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	7812      	ldrb	r2, [r2, #0]
 8001442:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001444:	4a04      	ldr	r2, [pc, #16]	@ (8001458 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001446:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001448:	6113      	str	r3, [r2, #16]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed90 	.word	0xe000ed90

0800145c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001464:	f7ff fe5a 	bl	800111c <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e316      	b.n	8001aa2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a66      	ldr	r2, [pc, #408]	@ (8001614 <HAL_DMA_Init+0x1b8>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d04a      	beq.n	8001514 <HAL_DMA_Init+0xb8>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a65      	ldr	r2, [pc, #404]	@ (8001618 <HAL_DMA_Init+0x1bc>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d045      	beq.n	8001514 <HAL_DMA_Init+0xb8>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a63      	ldr	r2, [pc, #396]	@ (800161c <HAL_DMA_Init+0x1c0>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d040      	beq.n	8001514 <HAL_DMA_Init+0xb8>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a62      	ldr	r2, [pc, #392]	@ (8001620 <HAL_DMA_Init+0x1c4>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d03b      	beq.n	8001514 <HAL_DMA_Init+0xb8>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a60      	ldr	r2, [pc, #384]	@ (8001624 <HAL_DMA_Init+0x1c8>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d036      	beq.n	8001514 <HAL_DMA_Init+0xb8>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a5f      	ldr	r2, [pc, #380]	@ (8001628 <HAL_DMA_Init+0x1cc>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d031      	beq.n	8001514 <HAL_DMA_Init+0xb8>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a5d      	ldr	r2, [pc, #372]	@ (800162c <HAL_DMA_Init+0x1d0>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d02c      	beq.n	8001514 <HAL_DMA_Init+0xb8>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a5c      	ldr	r2, [pc, #368]	@ (8001630 <HAL_DMA_Init+0x1d4>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d027      	beq.n	8001514 <HAL_DMA_Init+0xb8>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a5a      	ldr	r2, [pc, #360]	@ (8001634 <HAL_DMA_Init+0x1d8>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d022      	beq.n	8001514 <HAL_DMA_Init+0xb8>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a59      	ldr	r2, [pc, #356]	@ (8001638 <HAL_DMA_Init+0x1dc>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d01d      	beq.n	8001514 <HAL_DMA_Init+0xb8>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a57      	ldr	r2, [pc, #348]	@ (800163c <HAL_DMA_Init+0x1e0>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d018      	beq.n	8001514 <HAL_DMA_Init+0xb8>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a56      	ldr	r2, [pc, #344]	@ (8001640 <HAL_DMA_Init+0x1e4>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d013      	beq.n	8001514 <HAL_DMA_Init+0xb8>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a54      	ldr	r2, [pc, #336]	@ (8001644 <HAL_DMA_Init+0x1e8>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d00e      	beq.n	8001514 <HAL_DMA_Init+0xb8>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a53      	ldr	r2, [pc, #332]	@ (8001648 <HAL_DMA_Init+0x1ec>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d009      	beq.n	8001514 <HAL_DMA_Init+0xb8>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a51      	ldr	r2, [pc, #324]	@ (800164c <HAL_DMA_Init+0x1f0>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d004      	beq.n	8001514 <HAL_DMA_Init+0xb8>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a50      	ldr	r2, [pc, #320]	@ (8001650 <HAL_DMA_Init+0x1f4>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d101      	bne.n	8001518 <HAL_DMA_Init+0xbc>
 8001514:	2301      	movs	r3, #1
 8001516:	e000      	b.n	800151a <HAL_DMA_Init+0xbe>
 8001518:	2300      	movs	r3, #0
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 813b 	beq.w	8001796 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2202      	movs	r2, #2
 8001524:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a37      	ldr	r2, [pc, #220]	@ (8001614 <HAL_DMA_Init+0x1b8>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d04a      	beq.n	80015d0 <HAL_DMA_Init+0x174>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a36      	ldr	r2, [pc, #216]	@ (8001618 <HAL_DMA_Init+0x1bc>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d045      	beq.n	80015d0 <HAL_DMA_Init+0x174>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a34      	ldr	r2, [pc, #208]	@ (800161c <HAL_DMA_Init+0x1c0>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d040      	beq.n	80015d0 <HAL_DMA_Init+0x174>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a33      	ldr	r2, [pc, #204]	@ (8001620 <HAL_DMA_Init+0x1c4>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d03b      	beq.n	80015d0 <HAL_DMA_Init+0x174>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a31      	ldr	r2, [pc, #196]	@ (8001624 <HAL_DMA_Init+0x1c8>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d036      	beq.n	80015d0 <HAL_DMA_Init+0x174>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a30      	ldr	r2, [pc, #192]	@ (8001628 <HAL_DMA_Init+0x1cc>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d031      	beq.n	80015d0 <HAL_DMA_Init+0x174>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a2e      	ldr	r2, [pc, #184]	@ (800162c <HAL_DMA_Init+0x1d0>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d02c      	beq.n	80015d0 <HAL_DMA_Init+0x174>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a2d      	ldr	r2, [pc, #180]	@ (8001630 <HAL_DMA_Init+0x1d4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d027      	beq.n	80015d0 <HAL_DMA_Init+0x174>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a2b      	ldr	r2, [pc, #172]	@ (8001634 <HAL_DMA_Init+0x1d8>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d022      	beq.n	80015d0 <HAL_DMA_Init+0x174>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a2a      	ldr	r2, [pc, #168]	@ (8001638 <HAL_DMA_Init+0x1dc>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d01d      	beq.n	80015d0 <HAL_DMA_Init+0x174>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a28      	ldr	r2, [pc, #160]	@ (800163c <HAL_DMA_Init+0x1e0>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d018      	beq.n	80015d0 <HAL_DMA_Init+0x174>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a27      	ldr	r2, [pc, #156]	@ (8001640 <HAL_DMA_Init+0x1e4>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d013      	beq.n	80015d0 <HAL_DMA_Init+0x174>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a25      	ldr	r2, [pc, #148]	@ (8001644 <HAL_DMA_Init+0x1e8>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d00e      	beq.n	80015d0 <HAL_DMA_Init+0x174>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a24      	ldr	r2, [pc, #144]	@ (8001648 <HAL_DMA_Init+0x1ec>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d009      	beq.n	80015d0 <HAL_DMA_Init+0x174>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a22      	ldr	r2, [pc, #136]	@ (800164c <HAL_DMA_Init+0x1f0>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d004      	beq.n	80015d0 <HAL_DMA_Init+0x174>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a21      	ldr	r2, [pc, #132]	@ (8001650 <HAL_DMA_Init+0x1f4>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d108      	bne.n	80015e2 <HAL_DMA_Init+0x186>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0201 	bic.w	r2, r2, #1
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	e007      	b.n	80015f2 <HAL_DMA_Init+0x196>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0201 	bic.w	r2, r2, #1
 80015f0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80015f2:	e02f      	b.n	8001654 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015f4:	f7ff fd92 	bl	800111c <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b05      	cmp	r3, #5
 8001600:	d928      	bls.n	8001654 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2220      	movs	r2, #32
 8001606:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2203      	movs	r2, #3
 800160c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e246      	b.n	8001aa2 <HAL_DMA_Init+0x646>
 8001614:	40020010 	.word	0x40020010
 8001618:	40020028 	.word	0x40020028
 800161c:	40020040 	.word	0x40020040
 8001620:	40020058 	.word	0x40020058
 8001624:	40020070 	.word	0x40020070
 8001628:	40020088 	.word	0x40020088
 800162c:	400200a0 	.word	0x400200a0
 8001630:	400200b8 	.word	0x400200b8
 8001634:	40020410 	.word	0x40020410
 8001638:	40020428 	.word	0x40020428
 800163c:	40020440 	.word	0x40020440
 8001640:	40020458 	.word	0x40020458
 8001644:	40020470 	.word	0x40020470
 8001648:	40020488 	.word	0x40020488
 800164c:	400204a0 	.word	0x400204a0
 8001650:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1c8      	bne.n	80015f4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	4b83      	ldr	r3, [pc, #524]	@ (800187c <HAL_DMA_Init+0x420>)
 800166e:	4013      	ands	r3, r2
 8001670:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800167a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001686:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001692:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	4313      	orrs	r3, r2
 800169e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d107      	bne.n	80016b8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b0:	4313      	orrs	r3, r2
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80016b8:	4b71      	ldr	r3, [pc, #452]	@ (8001880 <HAL_DMA_Init+0x424>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b71      	ldr	r3, [pc, #452]	@ (8001884 <HAL_DMA_Init+0x428>)
 80016be:	4013      	ands	r3, r2
 80016c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016c4:	d328      	bcc.n	8001718 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b28      	cmp	r3, #40	@ 0x28
 80016cc:	d903      	bls.n	80016d6 <HAL_DMA_Init+0x27a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80016d4:	d917      	bls.n	8001706 <HAL_DMA_Init+0x2aa>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b3e      	cmp	r3, #62	@ 0x3e
 80016dc:	d903      	bls.n	80016e6 <HAL_DMA_Init+0x28a>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b42      	cmp	r3, #66	@ 0x42
 80016e4:	d90f      	bls.n	8001706 <HAL_DMA_Init+0x2aa>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b46      	cmp	r3, #70	@ 0x46
 80016ec:	d903      	bls.n	80016f6 <HAL_DMA_Init+0x29a>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b48      	cmp	r3, #72	@ 0x48
 80016f4:	d907      	bls.n	8001706 <HAL_DMA_Init+0x2aa>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b4e      	cmp	r3, #78	@ 0x4e
 80016fc:	d905      	bls.n	800170a <HAL_DMA_Init+0x2ae>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b52      	cmp	r3, #82	@ 0x52
 8001704:	d801      	bhi.n	800170a <HAL_DMA_Init+0x2ae>
 8001706:	2301      	movs	r3, #1
 8001708:	e000      	b.n	800170c <HAL_DMA_Init+0x2b0>
 800170a:	2300      	movs	r3, #0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001716:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f023 0307 	bic.w	r3, r3, #7
 800172e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	4313      	orrs	r3, r2
 8001738:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173e:	2b04      	cmp	r3, #4
 8001740:	d117      	bne.n	8001772 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	4313      	orrs	r3, r2
 800174a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00e      	beq.n	8001772 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f001 ff1d 	bl	8003594 <DMA_CheckFifoParam>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d008      	beq.n	8001772 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2240      	movs	r2, #64	@ 0x40
 8001764:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e197      	b.n	8001aa2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f001 fe58 	bl	8003430 <DMA_CalcBaseAndBitshift>
 8001780:	4603      	mov	r3, r0
 8001782:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001788:	f003 031f 	and.w	r3, r3, #31
 800178c:	223f      	movs	r2, #63	@ 0x3f
 800178e:	409a      	lsls	r2, r3
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	e0cd      	b.n	8001932 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a3b      	ldr	r2, [pc, #236]	@ (8001888 <HAL_DMA_Init+0x42c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d022      	beq.n	80017e6 <HAL_DMA_Init+0x38a>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a39      	ldr	r2, [pc, #228]	@ (800188c <HAL_DMA_Init+0x430>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d01d      	beq.n	80017e6 <HAL_DMA_Init+0x38a>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a38      	ldr	r2, [pc, #224]	@ (8001890 <HAL_DMA_Init+0x434>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d018      	beq.n	80017e6 <HAL_DMA_Init+0x38a>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a36      	ldr	r2, [pc, #216]	@ (8001894 <HAL_DMA_Init+0x438>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d013      	beq.n	80017e6 <HAL_DMA_Init+0x38a>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a35      	ldr	r2, [pc, #212]	@ (8001898 <HAL_DMA_Init+0x43c>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d00e      	beq.n	80017e6 <HAL_DMA_Init+0x38a>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a33      	ldr	r2, [pc, #204]	@ (800189c <HAL_DMA_Init+0x440>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d009      	beq.n	80017e6 <HAL_DMA_Init+0x38a>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a32      	ldr	r2, [pc, #200]	@ (80018a0 <HAL_DMA_Init+0x444>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d004      	beq.n	80017e6 <HAL_DMA_Init+0x38a>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a30      	ldr	r2, [pc, #192]	@ (80018a4 <HAL_DMA_Init+0x448>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d101      	bne.n	80017ea <HAL_DMA_Init+0x38e>
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <HAL_DMA_Init+0x390>
 80017ea:	2300      	movs	r3, #0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 8097 	beq.w	8001920 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a24      	ldr	r2, [pc, #144]	@ (8001888 <HAL_DMA_Init+0x42c>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d021      	beq.n	8001840 <HAL_DMA_Init+0x3e4>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a22      	ldr	r2, [pc, #136]	@ (800188c <HAL_DMA_Init+0x430>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d01c      	beq.n	8001840 <HAL_DMA_Init+0x3e4>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a21      	ldr	r2, [pc, #132]	@ (8001890 <HAL_DMA_Init+0x434>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d017      	beq.n	8001840 <HAL_DMA_Init+0x3e4>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a1f      	ldr	r2, [pc, #124]	@ (8001894 <HAL_DMA_Init+0x438>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d012      	beq.n	8001840 <HAL_DMA_Init+0x3e4>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a1e      	ldr	r2, [pc, #120]	@ (8001898 <HAL_DMA_Init+0x43c>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d00d      	beq.n	8001840 <HAL_DMA_Init+0x3e4>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a1c      	ldr	r2, [pc, #112]	@ (800189c <HAL_DMA_Init+0x440>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d008      	beq.n	8001840 <HAL_DMA_Init+0x3e4>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a1b      	ldr	r2, [pc, #108]	@ (80018a0 <HAL_DMA_Init+0x444>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d003      	beq.n	8001840 <HAL_DMA_Init+0x3e4>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a19      	ldr	r2, [pc, #100]	@ (80018a4 <HAL_DMA_Init+0x448>)
 800183e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2202      	movs	r2, #2
 8001844:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	4b13      	ldr	r3, [pc, #76]	@ (80018a8 <HAL_DMA_Init+0x44c>)
 800185c:	4013      	ands	r3, r2
 800185e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b40      	cmp	r3, #64	@ 0x40
 8001866:	d021      	beq.n	80018ac <HAL_DMA_Init+0x450>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b80      	cmp	r3, #128	@ 0x80
 800186e:	d102      	bne.n	8001876 <HAL_DMA_Init+0x41a>
 8001870:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001874:	e01b      	b.n	80018ae <HAL_DMA_Init+0x452>
 8001876:	2300      	movs	r3, #0
 8001878:	e019      	b.n	80018ae <HAL_DMA_Init+0x452>
 800187a:	bf00      	nop
 800187c:	fe10803f 	.word	0xfe10803f
 8001880:	5c001000 	.word	0x5c001000
 8001884:	ffff0000 	.word	0xffff0000
 8001888:	58025408 	.word	0x58025408
 800188c:	5802541c 	.word	0x5802541c
 8001890:	58025430 	.word	0x58025430
 8001894:	58025444 	.word	0x58025444
 8001898:	58025458 	.word	0x58025458
 800189c:	5802546c 	.word	0x5802546c
 80018a0:	58025480 	.word	0x58025480
 80018a4:	58025494 	.word	0x58025494
 80018a8:	fffe000f 	.word	0xfffe000f
 80018ac:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	68d2      	ldr	r2, [r2, #12]
 80018b2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80018b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80018bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80018c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80018cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80018d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80018dc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b6e      	ldr	r3, [pc, #440]	@ (8001aac <HAL_DMA_Init+0x650>)
 80018f4:	4413      	add	r3, r2
 80018f6:	4a6e      	ldr	r2, [pc, #440]	@ (8001ab0 <HAL_DMA_Init+0x654>)
 80018f8:	fba2 2303 	umull	r2, r3, r2, r3
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	009a      	lsls	r2, r3, #2
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f001 fd93 	bl	8003430 <DMA_CalcBaseAndBitshift>
 800190a:	4603      	mov	r3, r0
 800190c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001912:	f003 031f 	and.w	r3, r3, #31
 8001916:	2201      	movs	r2, #1
 8001918:	409a      	lsls	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	e008      	b.n	8001932 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2240      	movs	r2, #64	@ 0x40
 8001924:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2203      	movs	r2, #3
 800192a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e0b7      	b.n	8001aa2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a5f      	ldr	r2, [pc, #380]	@ (8001ab4 <HAL_DMA_Init+0x658>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d072      	beq.n	8001a22 <HAL_DMA_Init+0x5c6>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a5d      	ldr	r2, [pc, #372]	@ (8001ab8 <HAL_DMA_Init+0x65c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d06d      	beq.n	8001a22 <HAL_DMA_Init+0x5c6>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a5c      	ldr	r2, [pc, #368]	@ (8001abc <HAL_DMA_Init+0x660>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d068      	beq.n	8001a22 <HAL_DMA_Init+0x5c6>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a5a      	ldr	r2, [pc, #360]	@ (8001ac0 <HAL_DMA_Init+0x664>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d063      	beq.n	8001a22 <HAL_DMA_Init+0x5c6>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a59      	ldr	r2, [pc, #356]	@ (8001ac4 <HAL_DMA_Init+0x668>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d05e      	beq.n	8001a22 <HAL_DMA_Init+0x5c6>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a57      	ldr	r2, [pc, #348]	@ (8001ac8 <HAL_DMA_Init+0x66c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d059      	beq.n	8001a22 <HAL_DMA_Init+0x5c6>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a56      	ldr	r2, [pc, #344]	@ (8001acc <HAL_DMA_Init+0x670>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d054      	beq.n	8001a22 <HAL_DMA_Init+0x5c6>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a54      	ldr	r2, [pc, #336]	@ (8001ad0 <HAL_DMA_Init+0x674>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d04f      	beq.n	8001a22 <HAL_DMA_Init+0x5c6>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a53      	ldr	r2, [pc, #332]	@ (8001ad4 <HAL_DMA_Init+0x678>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d04a      	beq.n	8001a22 <HAL_DMA_Init+0x5c6>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a51      	ldr	r2, [pc, #324]	@ (8001ad8 <HAL_DMA_Init+0x67c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d045      	beq.n	8001a22 <HAL_DMA_Init+0x5c6>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a50      	ldr	r2, [pc, #320]	@ (8001adc <HAL_DMA_Init+0x680>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d040      	beq.n	8001a22 <HAL_DMA_Init+0x5c6>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a4e      	ldr	r2, [pc, #312]	@ (8001ae0 <HAL_DMA_Init+0x684>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d03b      	beq.n	8001a22 <HAL_DMA_Init+0x5c6>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a4d      	ldr	r2, [pc, #308]	@ (8001ae4 <HAL_DMA_Init+0x688>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d036      	beq.n	8001a22 <HAL_DMA_Init+0x5c6>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a4b      	ldr	r2, [pc, #300]	@ (8001ae8 <HAL_DMA_Init+0x68c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d031      	beq.n	8001a22 <HAL_DMA_Init+0x5c6>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a4a      	ldr	r2, [pc, #296]	@ (8001aec <HAL_DMA_Init+0x690>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d02c      	beq.n	8001a22 <HAL_DMA_Init+0x5c6>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a48      	ldr	r2, [pc, #288]	@ (8001af0 <HAL_DMA_Init+0x694>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d027      	beq.n	8001a22 <HAL_DMA_Init+0x5c6>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a47      	ldr	r2, [pc, #284]	@ (8001af4 <HAL_DMA_Init+0x698>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d022      	beq.n	8001a22 <HAL_DMA_Init+0x5c6>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a45      	ldr	r2, [pc, #276]	@ (8001af8 <HAL_DMA_Init+0x69c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d01d      	beq.n	8001a22 <HAL_DMA_Init+0x5c6>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a44      	ldr	r2, [pc, #272]	@ (8001afc <HAL_DMA_Init+0x6a0>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d018      	beq.n	8001a22 <HAL_DMA_Init+0x5c6>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a42      	ldr	r2, [pc, #264]	@ (8001b00 <HAL_DMA_Init+0x6a4>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d013      	beq.n	8001a22 <HAL_DMA_Init+0x5c6>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a41      	ldr	r2, [pc, #260]	@ (8001b04 <HAL_DMA_Init+0x6a8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d00e      	beq.n	8001a22 <HAL_DMA_Init+0x5c6>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a3f      	ldr	r2, [pc, #252]	@ (8001b08 <HAL_DMA_Init+0x6ac>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d009      	beq.n	8001a22 <HAL_DMA_Init+0x5c6>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a3e      	ldr	r2, [pc, #248]	@ (8001b0c <HAL_DMA_Init+0x6b0>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d004      	beq.n	8001a22 <HAL_DMA_Init+0x5c6>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a3c      	ldr	r2, [pc, #240]	@ (8001b10 <HAL_DMA_Init+0x6b4>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d101      	bne.n	8001a26 <HAL_DMA_Init+0x5ca>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <HAL_DMA_Init+0x5cc>
 8001a26:	2300      	movs	r3, #0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d032      	beq.n	8001a92 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f001 fe2d 	bl	800368c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2b80      	cmp	r3, #128	@ 0x80
 8001a38:	d102      	bne.n	8001a40 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001a54:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d010      	beq.n	8001a80 <HAL_DMA_Init+0x624>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d80c      	bhi.n	8001a80 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f001 feaa 	bl	80037c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	e008      	b.n	8001a92 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	a7fdabf8 	.word	0xa7fdabf8
 8001ab0:	cccccccd 	.word	0xcccccccd
 8001ab4:	40020010 	.word	0x40020010
 8001ab8:	40020028 	.word	0x40020028
 8001abc:	40020040 	.word	0x40020040
 8001ac0:	40020058 	.word	0x40020058
 8001ac4:	40020070 	.word	0x40020070
 8001ac8:	40020088 	.word	0x40020088
 8001acc:	400200a0 	.word	0x400200a0
 8001ad0:	400200b8 	.word	0x400200b8
 8001ad4:	40020410 	.word	0x40020410
 8001ad8:	40020428 	.word	0x40020428
 8001adc:	40020440 	.word	0x40020440
 8001ae0:	40020458 	.word	0x40020458
 8001ae4:	40020470 	.word	0x40020470
 8001ae8:	40020488 	.word	0x40020488
 8001aec:	400204a0 	.word	0x400204a0
 8001af0:	400204b8 	.word	0x400204b8
 8001af4:	58025408 	.word	0x58025408
 8001af8:	5802541c 	.word	0x5802541c
 8001afc:	58025430 	.word	0x58025430
 8001b00:	58025444 	.word	0x58025444
 8001b04:	58025458 	.word	0x58025458
 8001b08:	5802546c 	.word	0x5802546c
 8001b0c:	58025480 	.word	0x58025480
 8001b10:	58025494 	.word	0x58025494

08001b14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001b1c:	f7ff fafe 	bl	800111c <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e2dc      	b.n	80020e6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d008      	beq.n	8001b4a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2280      	movs	r2, #128	@ 0x80
 8001b3c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e2cd      	b.n	80020e6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a76      	ldr	r2, [pc, #472]	@ (8001d28 <HAL_DMA_Abort+0x214>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d04a      	beq.n	8001bea <HAL_DMA_Abort+0xd6>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a74      	ldr	r2, [pc, #464]	@ (8001d2c <HAL_DMA_Abort+0x218>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d045      	beq.n	8001bea <HAL_DMA_Abort+0xd6>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a73      	ldr	r2, [pc, #460]	@ (8001d30 <HAL_DMA_Abort+0x21c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d040      	beq.n	8001bea <HAL_DMA_Abort+0xd6>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a71      	ldr	r2, [pc, #452]	@ (8001d34 <HAL_DMA_Abort+0x220>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d03b      	beq.n	8001bea <HAL_DMA_Abort+0xd6>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a70      	ldr	r2, [pc, #448]	@ (8001d38 <HAL_DMA_Abort+0x224>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d036      	beq.n	8001bea <HAL_DMA_Abort+0xd6>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a6e      	ldr	r2, [pc, #440]	@ (8001d3c <HAL_DMA_Abort+0x228>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d031      	beq.n	8001bea <HAL_DMA_Abort+0xd6>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a6d      	ldr	r2, [pc, #436]	@ (8001d40 <HAL_DMA_Abort+0x22c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d02c      	beq.n	8001bea <HAL_DMA_Abort+0xd6>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a6b      	ldr	r2, [pc, #428]	@ (8001d44 <HAL_DMA_Abort+0x230>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d027      	beq.n	8001bea <HAL_DMA_Abort+0xd6>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a6a      	ldr	r2, [pc, #424]	@ (8001d48 <HAL_DMA_Abort+0x234>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d022      	beq.n	8001bea <HAL_DMA_Abort+0xd6>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a68      	ldr	r2, [pc, #416]	@ (8001d4c <HAL_DMA_Abort+0x238>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d01d      	beq.n	8001bea <HAL_DMA_Abort+0xd6>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a67      	ldr	r2, [pc, #412]	@ (8001d50 <HAL_DMA_Abort+0x23c>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d018      	beq.n	8001bea <HAL_DMA_Abort+0xd6>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a65      	ldr	r2, [pc, #404]	@ (8001d54 <HAL_DMA_Abort+0x240>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d013      	beq.n	8001bea <HAL_DMA_Abort+0xd6>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a64      	ldr	r2, [pc, #400]	@ (8001d58 <HAL_DMA_Abort+0x244>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d00e      	beq.n	8001bea <HAL_DMA_Abort+0xd6>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a62      	ldr	r2, [pc, #392]	@ (8001d5c <HAL_DMA_Abort+0x248>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d009      	beq.n	8001bea <HAL_DMA_Abort+0xd6>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a61      	ldr	r2, [pc, #388]	@ (8001d60 <HAL_DMA_Abort+0x24c>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d004      	beq.n	8001bea <HAL_DMA_Abort+0xd6>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a5f      	ldr	r2, [pc, #380]	@ (8001d64 <HAL_DMA_Abort+0x250>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d101      	bne.n	8001bee <HAL_DMA_Abort+0xda>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <HAL_DMA_Abort+0xdc>
 8001bee:	2300      	movs	r3, #0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d013      	beq.n	8001c1c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 021e 	bic.w	r2, r2, #30
 8001c02:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	695a      	ldr	r2, [r3, #20]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c12:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	e00a      	b.n	8001c32 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 020e 	bic.w	r2, r2, #14
 8001c2a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a3c      	ldr	r2, [pc, #240]	@ (8001d28 <HAL_DMA_Abort+0x214>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d072      	beq.n	8001d22 <HAL_DMA_Abort+0x20e>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a3a      	ldr	r2, [pc, #232]	@ (8001d2c <HAL_DMA_Abort+0x218>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d06d      	beq.n	8001d22 <HAL_DMA_Abort+0x20e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a39      	ldr	r2, [pc, #228]	@ (8001d30 <HAL_DMA_Abort+0x21c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d068      	beq.n	8001d22 <HAL_DMA_Abort+0x20e>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a37      	ldr	r2, [pc, #220]	@ (8001d34 <HAL_DMA_Abort+0x220>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d063      	beq.n	8001d22 <HAL_DMA_Abort+0x20e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a36      	ldr	r2, [pc, #216]	@ (8001d38 <HAL_DMA_Abort+0x224>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d05e      	beq.n	8001d22 <HAL_DMA_Abort+0x20e>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a34      	ldr	r2, [pc, #208]	@ (8001d3c <HAL_DMA_Abort+0x228>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d059      	beq.n	8001d22 <HAL_DMA_Abort+0x20e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a33      	ldr	r2, [pc, #204]	@ (8001d40 <HAL_DMA_Abort+0x22c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d054      	beq.n	8001d22 <HAL_DMA_Abort+0x20e>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a31      	ldr	r2, [pc, #196]	@ (8001d44 <HAL_DMA_Abort+0x230>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d04f      	beq.n	8001d22 <HAL_DMA_Abort+0x20e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a30      	ldr	r2, [pc, #192]	@ (8001d48 <HAL_DMA_Abort+0x234>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d04a      	beq.n	8001d22 <HAL_DMA_Abort+0x20e>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a2e      	ldr	r2, [pc, #184]	@ (8001d4c <HAL_DMA_Abort+0x238>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d045      	beq.n	8001d22 <HAL_DMA_Abort+0x20e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a2d      	ldr	r2, [pc, #180]	@ (8001d50 <HAL_DMA_Abort+0x23c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d040      	beq.n	8001d22 <HAL_DMA_Abort+0x20e>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a2b      	ldr	r2, [pc, #172]	@ (8001d54 <HAL_DMA_Abort+0x240>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d03b      	beq.n	8001d22 <HAL_DMA_Abort+0x20e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a2a      	ldr	r2, [pc, #168]	@ (8001d58 <HAL_DMA_Abort+0x244>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d036      	beq.n	8001d22 <HAL_DMA_Abort+0x20e>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a28      	ldr	r2, [pc, #160]	@ (8001d5c <HAL_DMA_Abort+0x248>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d031      	beq.n	8001d22 <HAL_DMA_Abort+0x20e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a27      	ldr	r2, [pc, #156]	@ (8001d60 <HAL_DMA_Abort+0x24c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d02c      	beq.n	8001d22 <HAL_DMA_Abort+0x20e>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a25      	ldr	r2, [pc, #148]	@ (8001d64 <HAL_DMA_Abort+0x250>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d027      	beq.n	8001d22 <HAL_DMA_Abort+0x20e>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a24      	ldr	r2, [pc, #144]	@ (8001d68 <HAL_DMA_Abort+0x254>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d022      	beq.n	8001d22 <HAL_DMA_Abort+0x20e>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a22      	ldr	r2, [pc, #136]	@ (8001d6c <HAL_DMA_Abort+0x258>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d01d      	beq.n	8001d22 <HAL_DMA_Abort+0x20e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a21      	ldr	r2, [pc, #132]	@ (8001d70 <HAL_DMA_Abort+0x25c>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d018      	beq.n	8001d22 <HAL_DMA_Abort+0x20e>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8001d74 <HAL_DMA_Abort+0x260>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d013      	beq.n	8001d22 <HAL_DMA_Abort+0x20e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8001d78 <HAL_DMA_Abort+0x264>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d00e      	beq.n	8001d22 <HAL_DMA_Abort+0x20e>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1c      	ldr	r2, [pc, #112]	@ (8001d7c <HAL_DMA_Abort+0x268>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d009      	beq.n	8001d22 <HAL_DMA_Abort+0x20e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a1b      	ldr	r2, [pc, #108]	@ (8001d80 <HAL_DMA_Abort+0x26c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d004      	beq.n	8001d22 <HAL_DMA_Abort+0x20e>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a19      	ldr	r2, [pc, #100]	@ (8001d84 <HAL_DMA_Abort+0x270>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d132      	bne.n	8001d88 <HAL_DMA_Abort+0x274>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e031      	b.n	8001d8a <HAL_DMA_Abort+0x276>
 8001d26:	bf00      	nop
 8001d28:	40020010 	.word	0x40020010
 8001d2c:	40020028 	.word	0x40020028
 8001d30:	40020040 	.word	0x40020040
 8001d34:	40020058 	.word	0x40020058
 8001d38:	40020070 	.word	0x40020070
 8001d3c:	40020088 	.word	0x40020088
 8001d40:	400200a0 	.word	0x400200a0
 8001d44:	400200b8 	.word	0x400200b8
 8001d48:	40020410 	.word	0x40020410
 8001d4c:	40020428 	.word	0x40020428
 8001d50:	40020440 	.word	0x40020440
 8001d54:	40020458 	.word	0x40020458
 8001d58:	40020470 	.word	0x40020470
 8001d5c:	40020488 	.word	0x40020488
 8001d60:	400204a0 	.word	0x400204a0
 8001d64:	400204b8 	.word	0x400204b8
 8001d68:	58025408 	.word	0x58025408
 8001d6c:	5802541c 	.word	0x5802541c
 8001d70:	58025430 	.word	0x58025430
 8001d74:	58025444 	.word	0x58025444
 8001d78:	58025458 	.word	0x58025458
 8001d7c:	5802546c 	.word	0x5802546c
 8001d80:	58025480 	.word	0x58025480
 8001d84:	58025494 	.word	0x58025494
 8001d88:	2300      	movs	r3, #0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d007      	beq.n	8001d9e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a6d      	ldr	r2, [pc, #436]	@ (8001f58 <HAL_DMA_Abort+0x444>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d04a      	beq.n	8001e3e <HAL_DMA_Abort+0x32a>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a6b      	ldr	r2, [pc, #428]	@ (8001f5c <HAL_DMA_Abort+0x448>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d045      	beq.n	8001e3e <HAL_DMA_Abort+0x32a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a6a      	ldr	r2, [pc, #424]	@ (8001f60 <HAL_DMA_Abort+0x44c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d040      	beq.n	8001e3e <HAL_DMA_Abort+0x32a>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a68      	ldr	r2, [pc, #416]	@ (8001f64 <HAL_DMA_Abort+0x450>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d03b      	beq.n	8001e3e <HAL_DMA_Abort+0x32a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a67      	ldr	r2, [pc, #412]	@ (8001f68 <HAL_DMA_Abort+0x454>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d036      	beq.n	8001e3e <HAL_DMA_Abort+0x32a>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a65      	ldr	r2, [pc, #404]	@ (8001f6c <HAL_DMA_Abort+0x458>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d031      	beq.n	8001e3e <HAL_DMA_Abort+0x32a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a64      	ldr	r2, [pc, #400]	@ (8001f70 <HAL_DMA_Abort+0x45c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d02c      	beq.n	8001e3e <HAL_DMA_Abort+0x32a>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a62      	ldr	r2, [pc, #392]	@ (8001f74 <HAL_DMA_Abort+0x460>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d027      	beq.n	8001e3e <HAL_DMA_Abort+0x32a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a61      	ldr	r2, [pc, #388]	@ (8001f78 <HAL_DMA_Abort+0x464>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d022      	beq.n	8001e3e <HAL_DMA_Abort+0x32a>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a5f      	ldr	r2, [pc, #380]	@ (8001f7c <HAL_DMA_Abort+0x468>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d01d      	beq.n	8001e3e <HAL_DMA_Abort+0x32a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a5e      	ldr	r2, [pc, #376]	@ (8001f80 <HAL_DMA_Abort+0x46c>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d018      	beq.n	8001e3e <HAL_DMA_Abort+0x32a>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a5c      	ldr	r2, [pc, #368]	@ (8001f84 <HAL_DMA_Abort+0x470>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_DMA_Abort+0x32a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a5b      	ldr	r2, [pc, #364]	@ (8001f88 <HAL_DMA_Abort+0x474>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d00e      	beq.n	8001e3e <HAL_DMA_Abort+0x32a>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a59      	ldr	r2, [pc, #356]	@ (8001f8c <HAL_DMA_Abort+0x478>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d009      	beq.n	8001e3e <HAL_DMA_Abort+0x32a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a58      	ldr	r2, [pc, #352]	@ (8001f90 <HAL_DMA_Abort+0x47c>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d004      	beq.n	8001e3e <HAL_DMA_Abort+0x32a>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a56      	ldr	r2, [pc, #344]	@ (8001f94 <HAL_DMA_Abort+0x480>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d108      	bne.n	8001e50 <HAL_DMA_Abort+0x33c>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0201 	bic.w	r2, r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	e007      	b.n	8001e60 <HAL_DMA_Abort+0x34c>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0201 	bic.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001e60:	e013      	b.n	8001e8a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e62:	f7ff f95b 	bl	800111c <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b05      	cmp	r3, #5
 8001e6e:	d90c      	bls.n	8001e8a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2220      	movs	r2, #32
 8001e74:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2203      	movs	r2, #3
 8001e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e12d      	b.n	80020e6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1e5      	bne.n	8001e62 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a2f      	ldr	r2, [pc, #188]	@ (8001f58 <HAL_DMA_Abort+0x444>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d04a      	beq.n	8001f36 <HAL_DMA_Abort+0x422>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a2d      	ldr	r2, [pc, #180]	@ (8001f5c <HAL_DMA_Abort+0x448>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d045      	beq.n	8001f36 <HAL_DMA_Abort+0x422>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a2c      	ldr	r2, [pc, #176]	@ (8001f60 <HAL_DMA_Abort+0x44c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d040      	beq.n	8001f36 <HAL_DMA_Abort+0x422>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a2a      	ldr	r2, [pc, #168]	@ (8001f64 <HAL_DMA_Abort+0x450>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d03b      	beq.n	8001f36 <HAL_DMA_Abort+0x422>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a29      	ldr	r2, [pc, #164]	@ (8001f68 <HAL_DMA_Abort+0x454>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d036      	beq.n	8001f36 <HAL_DMA_Abort+0x422>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a27      	ldr	r2, [pc, #156]	@ (8001f6c <HAL_DMA_Abort+0x458>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d031      	beq.n	8001f36 <HAL_DMA_Abort+0x422>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a26      	ldr	r2, [pc, #152]	@ (8001f70 <HAL_DMA_Abort+0x45c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d02c      	beq.n	8001f36 <HAL_DMA_Abort+0x422>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a24      	ldr	r2, [pc, #144]	@ (8001f74 <HAL_DMA_Abort+0x460>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d027      	beq.n	8001f36 <HAL_DMA_Abort+0x422>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a23      	ldr	r2, [pc, #140]	@ (8001f78 <HAL_DMA_Abort+0x464>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d022      	beq.n	8001f36 <HAL_DMA_Abort+0x422>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a21      	ldr	r2, [pc, #132]	@ (8001f7c <HAL_DMA_Abort+0x468>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d01d      	beq.n	8001f36 <HAL_DMA_Abort+0x422>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a20      	ldr	r2, [pc, #128]	@ (8001f80 <HAL_DMA_Abort+0x46c>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d018      	beq.n	8001f36 <HAL_DMA_Abort+0x422>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a1e      	ldr	r2, [pc, #120]	@ (8001f84 <HAL_DMA_Abort+0x470>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d013      	beq.n	8001f36 <HAL_DMA_Abort+0x422>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a1d      	ldr	r2, [pc, #116]	@ (8001f88 <HAL_DMA_Abort+0x474>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d00e      	beq.n	8001f36 <HAL_DMA_Abort+0x422>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8001f8c <HAL_DMA_Abort+0x478>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d009      	beq.n	8001f36 <HAL_DMA_Abort+0x422>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a1a      	ldr	r2, [pc, #104]	@ (8001f90 <HAL_DMA_Abort+0x47c>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d004      	beq.n	8001f36 <HAL_DMA_Abort+0x422>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a18      	ldr	r2, [pc, #96]	@ (8001f94 <HAL_DMA_Abort+0x480>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d101      	bne.n	8001f3a <HAL_DMA_Abort+0x426>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <HAL_DMA_Abort+0x428>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d02b      	beq.n	8001f98 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f44:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f4a:	f003 031f 	and.w	r3, r3, #31
 8001f4e:	223f      	movs	r2, #63	@ 0x3f
 8001f50:	409a      	lsls	r2, r3
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	e02a      	b.n	8001fae <HAL_DMA_Abort+0x49a>
 8001f58:	40020010 	.word	0x40020010
 8001f5c:	40020028 	.word	0x40020028
 8001f60:	40020040 	.word	0x40020040
 8001f64:	40020058 	.word	0x40020058
 8001f68:	40020070 	.word	0x40020070
 8001f6c:	40020088 	.word	0x40020088
 8001f70:	400200a0 	.word	0x400200a0
 8001f74:	400200b8 	.word	0x400200b8
 8001f78:	40020410 	.word	0x40020410
 8001f7c:	40020428 	.word	0x40020428
 8001f80:	40020440 	.word	0x40020440
 8001f84:	40020458 	.word	0x40020458
 8001f88:	40020470 	.word	0x40020470
 8001f8c:	40020488 	.word	0x40020488
 8001f90:	400204a0 	.word	0x400204a0
 8001f94:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa2:	f003 031f 	and.w	r3, r3, #31
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a4f      	ldr	r2, [pc, #316]	@ (80020f0 <HAL_DMA_Abort+0x5dc>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d072      	beq.n	800209e <HAL_DMA_Abort+0x58a>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a4d      	ldr	r2, [pc, #308]	@ (80020f4 <HAL_DMA_Abort+0x5e0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d06d      	beq.n	800209e <HAL_DMA_Abort+0x58a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a4c      	ldr	r2, [pc, #304]	@ (80020f8 <HAL_DMA_Abort+0x5e4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d068      	beq.n	800209e <HAL_DMA_Abort+0x58a>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a4a      	ldr	r2, [pc, #296]	@ (80020fc <HAL_DMA_Abort+0x5e8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d063      	beq.n	800209e <HAL_DMA_Abort+0x58a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a49      	ldr	r2, [pc, #292]	@ (8002100 <HAL_DMA_Abort+0x5ec>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d05e      	beq.n	800209e <HAL_DMA_Abort+0x58a>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a47      	ldr	r2, [pc, #284]	@ (8002104 <HAL_DMA_Abort+0x5f0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d059      	beq.n	800209e <HAL_DMA_Abort+0x58a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a46      	ldr	r2, [pc, #280]	@ (8002108 <HAL_DMA_Abort+0x5f4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d054      	beq.n	800209e <HAL_DMA_Abort+0x58a>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a44      	ldr	r2, [pc, #272]	@ (800210c <HAL_DMA_Abort+0x5f8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d04f      	beq.n	800209e <HAL_DMA_Abort+0x58a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a43      	ldr	r2, [pc, #268]	@ (8002110 <HAL_DMA_Abort+0x5fc>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d04a      	beq.n	800209e <HAL_DMA_Abort+0x58a>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a41      	ldr	r2, [pc, #260]	@ (8002114 <HAL_DMA_Abort+0x600>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d045      	beq.n	800209e <HAL_DMA_Abort+0x58a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a40      	ldr	r2, [pc, #256]	@ (8002118 <HAL_DMA_Abort+0x604>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d040      	beq.n	800209e <HAL_DMA_Abort+0x58a>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a3e      	ldr	r2, [pc, #248]	@ (800211c <HAL_DMA_Abort+0x608>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d03b      	beq.n	800209e <HAL_DMA_Abort+0x58a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a3d      	ldr	r2, [pc, #244]	@ (8002120 <HAL_DMA_Abort+0x60c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d036      	beq.n	800209e <HAL_DMA_Abort+0x58a>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a3b      	ldr	r2, [pc, #236]	@ (8002124 <HAL_DMA_Abort+0x610>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d031      	beq.n	800209e <HAL_DMA_Abort+0x58a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a3a      	ldr	r2, [pc, #232]	@ (8002128 <HAL_DMA_Abort+0x614>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d02c      	beq.n	800209e <HAL_DMA_Abort+0x58a>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a38      	ldr	r2, [pc, #224]	@ (800212c <HAL_DMA_Abort+0x618>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d027      	beq.n	800209e <HAL_DMA_Abort+0x58a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a37      	ldr	r2, [pc, #220]	@ (8002130 <HAL_DMA_Abort+0x61c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d022      	beq.n	800209e <HAL_DMA_Abort+0x58a>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a35      	ldr	r2, [pc, #212]	@ (8002134 <HAL_DMA_Abort+0x620>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d01d      	beq.n	800209e <HAL_DMA_Abort+0x58a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a34      	ldr	r2, [pc, #208]	@ (8002138 <HAL_DMA_Abort+0x624>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d018      	beq.n	800209e <HAL_DMA_Abort+0x58a>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a32      	ldr	r2, [pc, #200]	@ (800213c <HAL_DMA_Abort+0x628>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d013      	beq.n	800209e <HAL_DMA_Abort+0x58a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a31      	ldr	r2, [pc, #196]	@ (8002140 <HAL_DMA_Abort+0x62c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d00e      	beq.n	800209e <HAL_DMA_Abort+0x58a>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a2f      	ldr	r2, [pc, #188]	@ (8002144 <HAL_DMA_Abort+0x630>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d009      	beq.n	800209e <HAL_DMA_Abort+0x58a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a2e      	ldr	r2, [pc, #184]	@ (8002148 <HAL_DMA_Abort+0x634>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d004      	beq.n	800209e <HAL_DMA_Abort+0x58a>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a2c      	ldr	r2, [pc, #176]	@ (800214c <HAL_DMA_Abort+0x638>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d101      	bne.n	80020a2 <HAL_DMA_Abort+0x58e>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <HAL_DMA_Abort+0x590>
 80020a2:	2300      	movs	r3, #0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d015      	beq.n	80020d4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80020b0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00c      	beq.n	80020d4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020c8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80020d2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40020010 	.word	0x40020010
 80020f4:	40020028 	.word	0x40020028
 80020f8:	40020040 	.word	0x40020040
 80020fc:	40020058 	.word	0x40020058
 8002100:	40020070 	.word	0x40020070
 8002104:	40020088 	.word	0x40020088
 8002108:	400200a0 	.word	0x400200a0
 800210c:	400200b8 	.word	0x400200b8
 8002110:	40020410 	.word	0x40020410
 8002114:	40020428 	.word	0x40020428
 8002118:	40020440 	.word	0x40020440
 800211c:	40020458 	.word	0x40020458
 8002120:	40020470 	.word	0x40020470
 8002124:	40020488 	.word	0x40020488
 8002128:	400204a0 	.word	0x400204a0
 800212c:	400204b8 	.word	0x400204b8
 8002130:	58025408 	.word	0x58025408
 8002134:	5802541c 	.word	0x5802541c
 8002138:	58025430 	.word	0x58025430
 800213c:	58025444 	.word	0x58025444
 8002140:	58025458 	.word	0x58025458
 8002144:	5802546c 	.word	0x5802546c
 8002148:	58025480 	.word	0x58025480
 800214c:	58025494 	.word	0x58025494

08002150 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e237      	b.n	80025d2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d004      	beq.n	8002178 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2280      	movs	r2, #128	@ 0x80
 8002172:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e22c      	b.n	80025d2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a5c      	ldr	r2, [pc, #368]	@ (80022f0 <HAL_DMA_Abort_IT+0x1a0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d04a      	beq.n	8002218 <HAL_DMA_Abort_IT+0xc8>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a5b      	ldr	r2, [pc, #364]	@ (80022f4 <HAL_DMA_Abort_IT+0x1a4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d045      	beq.n	8002218 <HAL_DMA_Abort_IT+0xc8>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a59      	ldr	r2, [pc, #356]	@ (80022f8 <HAL_DMA_Abort_IT+0x1a8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d040      	beq.n	8002218 <HAL_DMA_Abort_IT+0xc8>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a58      	ldr	r2, [pc, #352]	@ (80022fc <HAL_DMA_Abort_IT+0x1ac>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d03b      	beq.n	8002218 <HAL_DMA_Abort_IT+0xc8>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a56      	ldr	r2, [pc, #344]	@ (8002300 <HAL_DMA_Abort_IT+0x1b0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d036      	beq.n	8002218 <HAL_DMA_Abort_IT+0xc8>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a55      	ldr	r2, [pc, #340]	@ (8002304 <HAL_DMA_Abort_IT+0x1b4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d031      	beq.n	8002218 <HAL_DMA_Abort_IT+0xc8>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a53      	ldr	r2, [pc, #332]	@ (8002308 <HAL_DMA_Abort_IT+0x1b8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d02c      	beq.n	8002218 <HAL_DMA_Abort_IT+0xc8>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a52      	ldr	r2, [pc, #328]	@ (800230c <HAL_DMA_Abort_IT+0x1bc>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d027      	beq.n	8002218 <HAL_DMA_Abort_IT+0xc8>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a50      	ldr	r2, [pc, #320]	@ (8002310 <HAL_DMA_Abort_IT+0x1c0>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d022      	beq.n	8002218 <HAL_DMA_Abort_IT+0xc8>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a4f      	ldr	r2, [pc, #316]	@ (8002314 <HAL_DMA_Abort_IT+0x1c4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d01d      	beq.n	8002218 <HAL_DMA_Abort_IT+0xc8>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a4d      	ldr	r2, [pc, #308]	@ (8002318 <HAL_DMA_Abort_IT+0x1c8>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d018      	beq.n	8002218 <HAL_DMA_Abort_IT+0xc8>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a4c      	ldr	r2, [pc, #304]	@ (800231c <HAL_DMA_Abort_IT+0x1cc>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d013      	beq.n	8002218 <HAL_DMA_Abort_IT+0xc8>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a4a      	ldr	r2, [pc, #296]	@ (8002320 <HAL_DMA_Abort_IT+0x1d0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d00e      	beq.n	8002218 <HAL_DMA_Abort_IT+0xc8>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a49      	ldr	r2, [pc, #292]	@ (8002324 <HAL_DMA_Abort_IT+0x1d4>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d009      	beq.n	8002218 <HAL_DMA_Abort_IT+0xc8>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a47      	ldr	r2, [pc, #284]	@ (8002328 <HAL_DMA_Abort_IT+0x1d8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d004      	beq.n	8002218 <HAL_DMA_Abort_IT+0xc8>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a46      	ldr	r2, [pc, #280]	@ (800232c <HAL_DMA_Abort_IT+0x1dc>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d101      	bne.n	800221c <HAL_DMA_Abort_IT+0xcc>
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <HAL_DMA_Abort_IT+0xce>
 800221c:	2300      	movs	r3, #0
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 8086 	beq.w	8002330 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2204      	movs	r2, #4
 8002228:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a2f      	ldr	r2, [pc, #188]	@ (80022f0 <HAL_DMA_Abort_IT+0x1a0>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d04a      	beq.n	80022cc <HAL_DMA_Abort_IT+0x17c>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a2e      	ldr	r2, [pc, #184]	@ (80022f4 <HAL_DMA_Abort_IT+0x1a4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d045      	beq.n	80022cc <HAL_DMA_Abort_IT+0x17c>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a2c      	ldr	r2, [pc, #176]	@ (80022f8 <HAL_DMA_Abort_IT+0x1a8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d040      	beq.n	80022cc <HAL_DMA_Abort_IT+0x17c>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a2b      	ldr	r2, [pc, #172]	@ (80022fc <HAL_DMA_Abort_IT+0x1ac>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d03b      	beq.n	80022cc <HAL_DMA_Abort_IT+0x17c>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a29      	ldr	r2, [pc, #164]	@ (8002300 <HAL_DMA_Abort_IT+0x1b0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d036      	beq.n	80022cc <HAL_DMA_Abort_IT+0x17c>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a28      	ldr	r2, [pc, #160]	@ (8002304 <HAL_DMA_Abort_IT+0x1b4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d031      	beq.n	80022cc <HAL_DMA_Abort_IT+0x17c>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a26      	ldr	r2, [pc, #152]	@ (8002308 <HAL_DMA_Abort_IT+0x1b8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d02c      	beq.n	80022cc <HAL_DMA_Abort_IT+0x17c>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a25      	ldr	r2, [pc, #148]	@ (800230c <HAL_DMA_Abort_IT+0x1bc>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d027      	beq.n	80022cc <HAL_DMA_Abort_IT+0x17c>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a23      	ldr	r2, [pc, #140]	@ (8002310 <HAL_DMA_Abort_IT+0x1c0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d022      	beq.n	80022cc <HAL_DMA_Abort_IT+0x17c>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a22      	ldr	r2, [pc, #136]	@ (8002314 <HAL_DMA_Abort_IT+0x1c4>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d01d      	beq.n	80022cc <HAL_DMA_Abort_IT+0x17c>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a20      	ldr	r2, [pc, #128]	@ (8002318 <HAL_DMA_Abort_IT+0x1c8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d018      	beq.n	80022cc <HAL_DMA_Abort_IT+0x17c>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a1f      	ldr	r2, [pc, #124]	@ (800231c <HAL_DMA_Abort_IT+0x1cc>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d013      	beq.n	80022cc <HAL_DMA_Abort_IT+0x17c>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002320 <HAL_DMA_Abort_IT+0x1d0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d00e      	beq.n	80022cc <HAL_DMA_Abort_IT+0x17c>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002324 <HAL_DMA_Abort_IT+0x1d4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d009      	beq.n	80022cc <HAL_DMA_Abort_IT+0x17c>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a1a      	ldr	r2, [pc, #104]	@ (8002328 <HAL_DMA_Abort_IT+0x1d8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d004      	beq.n	80022cc <HAL_DMA_Abort_IT+0x17c>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a19      	ldr	r2, [pc, #100]	@ (800232c <HAL_DMA_Abort_IT+0x1dc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d108      	bne.n	80022de <HAL_DMA_Abort_IT+0x18e>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0201 	bic.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	e178      	b.n	80025d0 <HAL_DMA_Abort_IT+0x480>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0201 	bic.w	r2, r2, #1
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	e16f      	b.n	80025d0 <HAL_DMA_Abort_IT+0x480>
 80022f0:	40020010 	.word	0x40020010
 80022f4:	40020028 	.word	0x40020028
 80022f8:	40020040 	.word	0x40020040
 80022fc:	40020058 	.word	0x40020058
 8002300:	40020070 	.word	0x40020070
 8002304:	40020088 	.word	0x40020088
 8002308:	400200a0 	.word	0x400200a0
 800230c:	400200b8 	.word	0x400200b8
 8002310:	40020410 	.word	0x40020410
 8002314:	40020428 	.word	0x40020428
 8002318:	40020440 	.word	0x40020440
 800231c:	40020458 	.word	0x40020458
 8002320:	40020470 	.word	0x40020470
 8002324:	40020488 	.word	0x40020488
 8002328:	400204a0 	.word	0x400204a0
 800232c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 020e 	bic.w	r2, r2, #14
 800233e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a6c      	ldr	r2, [pc, #432]	@ (80024f8 <HAL_DMA_Abort_IT+0x3a8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d04a      	beq.n	80023e0 <HAL_DMA_Abort_IT+0x290>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a6b      	ldr	r2, [pc, #428]	@ (80024fc <HAL_DMA_Abort_IT+0x3ac>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d045      	beq.n	80023e0 <HAL_DMA_Abort_IT+0x290>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a69      	ldr	r2, [pc, #420]	@ (8002500 <HAL_DMA_Abort_IT+0x3b0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d040      	beq.n	80023e0 <HAL_DMA_Abort_IT+0x290>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a68      	ldr	r2, [pc, #416]	@ (8002504 <HAL_DMA_Abort_IT+0x3b4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d03b      	beq.n	80023e0 <HAL_DMA_Abort_IT+0x290>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a66      	ldr	r2, [pc, #408]	@ (8002508 <HAL_DMA_Abort_IT+0x3b8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d036      	beq.n	80023e0 <HAL_DMA_Abort_IT+0x290>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a65      	ldr	r2, [pc, #404]	@ (800250c <HAL_DMA_Abort_IT+0x3bc>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d031      	beq.n	80023e0 <HAL_DMA_Abort_IT+0x290>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a63      	ldr	r2, [pc, #396]	@ (8002510 <HAL_DMA_Abort_IT+0x3c0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d02c      	beq.n	80023e0 <HAL_DMA_Abort_IT+0x290>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a62      	ldr	r2, [pc, #392]	@ (8002514 <HAL_DMA_Abort_IT+0x3c4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d027      	beq.n	80023e0 <HAL_DMA_Abort_IT+0x290>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a60      	ldr	r2, [pc, #384]	@ (8002518 <HAL_DMA_Abort_IT+0x3c8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d022      	beq.n	80023e0 <HAL_DMA_Abort_IT+0x290>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a5f      	ldr	r2, [pc, #380]	@ (800251c <HAL_DMA_Abort_IT+0x3cc>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d01d      	beq.n	80023e0 <HAL_DMA_Abort_IT+0x290>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a5d      	ldr	r2, [pc, #372]	@ (8002520 <HAL_DMA_Abort_IT+0x3d0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d018      	beq.n	80023e0 <HAL_DMA_Abort_IT+0x290>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a5c      	ldr	r2, [pc, #368]	@ (8002524 <HAL_DMA_Abort_IT+0x3d4>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d013      	beq.n	80023e0 <HAL_DMA_Abort_IT+0x290>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a5a      	ldr	r2, [pc, #360]	@ (8002528 <HAL_DMA_Abort_IT+0x3d8>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00e      	beq.n	80023e0 <HAL_DMA_Abort_IT+0x290>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a59      	ldr	r2, [pc, #356]	@ (800252c <HAL_DMA_Abort_IT+0x3dc>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d009      	beq.n	80023e0 <HAL_DMA_Abort_IT+0x290>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a57      	ldr	r2, [pc, #348]	@ (8002530 <HAL_DMA_Abort_IT+0x3e0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d004      	beq.n	80023e0 <HAL_DMA_Abort_IT+0x290>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a56      	ldr	r2, [pc, #344]	@ (8002534 <HAL_DMA_Abort_IT+0x3e4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d108      	bne.n	80023f2 <HAL_DMA_Abort_IT+0x2a2>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0201 	bic.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	e007      	b.n	8002402 <HAL_DMA_Abort_IT+0x2b2>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0201 	bic.w	r2, r2, #1
 8002400:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a3c      	ldr	r2, [pc, #240]	@ (80024f8 <HAL_DMA_Abort_IT+0x3a8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d072      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x3a2>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a3a      	ldr	r2, [pc, #232]	@ (80024fc <HAL_DMA_Abort_IT+0x3ac>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d06d      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x3a2>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a39      	ldr	r2, [pc, #228]	@ (8002500 <HAL_DMA_Abort_IT+0x3b0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d068      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x3a2>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a37      	ldr	r2, [pc, #220]	@ (8002504 <HAL_DMA_Abort_IT+0x3b4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d063      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x3a2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a36      	ldr	r2, [pc, #216]	@ (8002508 <HAL_DMA_Abort_IT+0x3b8>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d05e      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x3a2>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a34      	ldr	r2, [pc, #208]	@ (800250c <HAL_DMA_Abort_IT+0x3bc>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d059      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x3a2>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a33      	ldr	r2, [pc, #204]	@ (8002510 <HAL_DMA_Abort_IT+0x3c0>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d054      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x3a2>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a31      	ldr	r2, [pc, #196]	@ (8002514 <HAL_DMA_Abort_IT+0x3c4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d04f      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x3a2>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a30      	ldr	r2, [pc, #192]	@ (8002518 <HAL_DMA_Abort_IT+0x3c8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d04a      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x3a2>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a2e      	ldr	r2, [pc, #184]	@ (800251c <HAL_DMA_Abort_IT+0x3cc>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d045      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x3a2>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a2d      	ldr	r2, [pc, #180]	@ (8002520 <HAL_DMA_Abort_IT+0x3d0>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d040      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x3a2>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a2b      	ldr	r2, [pc, #172]	@ (8002524 <HAL_DMA_Abort_IT+0x3d4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d03b      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x3a2>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a2a      	ldr	r2, [pc, #168]	@ (8002528 <HAL_DMA_Abort_IT+0x3d8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d036      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x3a2>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a28      	ldr	r2, [pc, #160]	@ (800252c <HAL_DMA_Abort_IT+0x3dc>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d031      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x3a2>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a27      	ldr	r2, [pc, #156]	@ (8002530 <HAL_DMA_Abort_IT+0x3e0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d02c      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x3a2>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a25      	ldr	r2, [pc, #148]	@ (8002534 <HAL_DMA_Abort_IT+0x3e4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d027      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x3a2>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a24      	ldr	r2, [pc, #144]	@ (8002538 <HAL_DMA_Abort_IT+0x3e8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d022      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x3a2>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a22      	ldr	r2, [pc, #136]	@ (800253c <HAL_DMA_Abort_IT+0x3ec>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d01d      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x3a2>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a21      	ldr	r2, [pc, #132]	@ (8002540 <HAL_DMA_Abort_IT+0x3f0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d018      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x3a2>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002544 <HAL_DMA_Abort_IT+0x3f4>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d013      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x3a2>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002548 <HAL_DMA_Abort_IT+0x3f8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d00e      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x3a2>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a1c      	ldr	r2, [pc, #112]	@ (800254c <HAL_DMA_Abort_IT+0x3fc>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d009      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x3a2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002550 <HAL_DMA_Abort_IT+0x400>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d004      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x3a2>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a19      	ldr	r2, [pc, #100]	@ (8002554 <HAL_DMA_Abort_IT+0x404>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d132      	bne.n	8002558 <HAL_DMA_Abort_IT+0x408>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e031      	b.n	800255a <HAL_DMA_Abort_IT+0x40a>
 80024f6:	bf00      	nop
 80024f8:	40020010 	.word	0x40020010
 80024fc:	40020028 	.word	0x40020028
 8002500:	40020040 	.word	0x40020040
 8002504:	40020058 	.word	0x40020058
 8002508:	40020070 	.word	0x40020070
 800250c:	40020088 	.word	0x40020088
 8002510:	400200a0 	.word	0x400200a0
 8002514:	400200b8 	.word	0x400200b8
 8002518:	40020410 	.word	0x40020410
 800251c:	40020428 	.word	0x40020428
 8002520:	40020440 	.word	0x40020440
 8002524:	40020458 	.word	0x40020458
 8002528:	40020470 	.word	0x40020470
 800252c:	40020488 	.word	0x40020488
 8002530:	400204a0 	.word	0x400204a0
 8002534:	400204b8 	.word	0x400204b8
 8002538:	58025408 	.word	0x58025408
 800253c:	5802541c 	.word	0x5802541c
 8002540:	58025430 	.word	0x58025430
 8002544:	58025444 	.word	0x58025444
 8002548:	58025458 	.word	0x58025458
 800254c:	5802546c 	.word	0x5802546c
 8002550:	58025480 	.word	0x58025480
 8002554:	58025494 	.word	0x58025494
 8002558:	2300      	movs	r3, #0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d028      	beq.n	80025b0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002568:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800256c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002572:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	2201      	movs	r2, #1
 800257e:	409a      	lsls	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800258c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00c      	beq.n	80025b0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025a4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80025ae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop

080025dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08a      	sub	sp, #40	@ 0x28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025e8:	4b67      	ldr	r3, [pc, #412]	@ (8002788 <HAL_DMA_IRQHandler+0x1ac>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a67      	ldr	r2, [pc, #412]	@ (800278c <HAL_DMA_IRQHandler+0x1b0>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	0a9b      	lsrs	r3, r3, #10
 80025f4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002600:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a5f      	ldr	r2, [pc, #380]	@ (8002790 <HAL_DMA_IRQHandler+0x1b4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d04a      	beq.n	80026ae <HAL_DMA_IRQHandler+0xd2>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a5d      	ldr	r2, [pc, #372]	@ (8002794 <HAL_DMA_IRQHandler+0x1b8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d045      	beq.n	80026ae <HAL_DMA_IRQHandler+0xd2>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a5c      	ldr	r2, [pc, #368]	@ (8002798 <HAL_DMA_IRQHandler+0x1bc>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d040      	beq.n	80026ae <HAL_DMA_IRQHandler+0xd2>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a5a      	ldr	r2, [pc, #360]	@ (800279c <HAL_DMA_IRQHandler+0x1c0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d03b      	beq.n	80026ae <HAL_DMA_IRQHandler+0xd2>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a59      	ldr	r2, [pc, #356]	@ (80027a0 <HAL_DMA_IRQHandler+0x1c4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d036      	beq.n	80026ae <HAL_DMA_IRQHandler+0xd2>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a57      	ldr	r2, [pc, #348]	@ (80027a4 <HAL_DMA_IRQHandler+0x1c8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d031      	beq.n	80026ae <HAL_DMA_IRQHandler+0xd2>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a56      	ldr	r2, [pc, #344]	@ (80027a8 <HAL_DMA_IRQHandler+0x1cc>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d02c      	beq.n	80026ae <HAL_DMA_IRQHandler+0xd2>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a54      	ldr	r2, [pc, #336]	@ (80027ac <HAL_DMA_IRQHandler+0x1d0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d027      	beq.n	80026ae <HAL_DMA_IRQHandler+0xd2>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a53      	ldr	r2, [pc, #332]	@ (80027b0 <HAL_DMA_IRQHandler+0x1d4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d022      	beq.n	80026ae <HAL_DMA_IRQHandler+0xd2>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a51      	ldr	r2, [pc, #324]	@ (80027b4 <HAL_DMA_IRQHandler+0x1d8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d01d      	beq.n	80026ae <HAL_DMA_IRQHandler+0xd2>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a50      	ldr	r2, [pc, #320]	@ (80027b8 <HAL_DMA_IRQHandler+0x1dc>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d018      	beq.n	80026ae <HAL_DMA_IRQHandler+0xd2>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a4e      	ldr	r2, [pc, #312]	@ (80027bc <HAL_DMA_IRQHandler+0x1e0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d013      	beq.n	80026ae <HAL_DMA_IRQHandler+0xd2>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a4d      	ldr	r2, [pc, #308]	@ (80027c0 <HAL_DMA_IRQHandler+0x1e4>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d00e      	beq.n	80026ae <HAL_DMA_IRQHandler+0xd2>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a4b      	ldr	r2, [pc, #300]	@ (80027c4 <HAL_DMA_IRQHandler+0x1e8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d009      	beq.n	80026ae <HAL_DMA_IRQHandler+0xd2>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a4a      	ldr	r2, [pc, #296]	@ (80027c8 <HAL_DMA_IRQHandler+0x1ec>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d004      	beq.n	80026ae <HAL_DMA_IRQHandler+0xd2>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a48      	ldr	r2, [pc, #288]	@ (80027cc <HAL_DMA_IRQHandler+0x1f0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d101      	bne.n	80026b2 <HAL_DMA_IRQHandler+0xd6>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <HAL_DMA_IRQHandler+0xd8>
 80026b2:	2300      	movs	r3, #0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 842b 	beq.w	8002f10 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026be:	f003 031f 	and.w	r3, r3, #31
 80026c2:	2208      	movs	r2, #8
 80026c4:	409a      	lsls	r2, r3
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 80a2 	beq.w	8002814 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a2e      	ldr	r2, [pc, #184]	@ (8002790 <HAL_DMA_IRQHandler+0x1b4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d04a      	beq.n	8002770 <HAL_DMA_IRQHandler+0x194>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a2d      	ldr	r2, [pc, #180]	@ (8002794 <HAL_DMA_IRQHandler+0x1b8>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d045      	beq.n	8002770 <HAL_DMA_IRQHandler+0x194>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002798 <HAL_DMA_IRQHandler+0x1bc>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d040      	beq.n	8002770 <HAL_DMA_IRQHandler+0x194>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a2a      	ldr	r2, [pc, #168]	@ (800279c <HAL_DMA_IRQHandler+0x1c0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d03b      	beq.n	8002770 <HAL_DMA_IRQHandler+0x194>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a28      	ldr	r2, [pc, #160]	@ (80027a0 <HAL_DMA_IRQHandler+0x1c4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d036      	beq.n	8002770 <HAL_DMA_IRQHandler+0x194>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a27      	ldr	r2, [pc, #156]	@ (80027a4 <HAL_DMA_IRQHandler+0x1c8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d031      	beq.n	8002770 <HAL_DMA_IRQHandler+0x194>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a25      	ldr	r2, [pc, #148]	@ (80027a8 <HAL_DMA_IRQHandler+0x1cc>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d02c      	beq.n	8002770 <HAL_DMA_IRQHandler+0x194>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a24      	ldr	r2, [pc, #144]	@ (80027ac <HAL_DMA_IRQHandler+0x1d0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d027      	beq.n	8002770 <HAL_DMA_IRQHandler+0x194>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a22      	ldr	r2, [pc, #136]	@ (80027b0 <HAL_DMA_IRQHandler+0x1d4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d022      	beq.n	8002770 <HAL_DMA_IRQHandler+0x194>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a21      	ldr	r2, [pc, #132]	@ (80027b4 <HAL_DMA_IRQHandler+0x1d8>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d01d      	beq.n	8002770 <HAL_DMA_IRQHandler+0x194>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a1f      	ldr	r2, [pc, #124]	@ (80027b8 <HAL_DMA_IRQHandler+0x1dc>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d018      	beq.n	8002770 <HAL_DMA_IRQHandler+0x194>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a1e      	ldr	r2, [pc, #120]	@ (80027bc <HAL_DMA_IRQHandler+0x1e0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d013      	beq.n	8002770 <HAL_DMA_IRQHandler+0x194>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a1c      	ldr	r2, [pc, #112]	@ (80027c0 <HAL_DMA_IRQHandler+0x1e4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00e      	beq.n	8002770 <HAL_DMA_IRQHandler+0x194>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a1b      	ldr	r2, [pc, #108]	@ (80027c4 <HAL_DMA_IRQHandler+0x1e8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d009      	beq.n	8002770 <HAL_DMA_IRQHandler+0x194>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a19      	ldr	r2, [pc, #100]	@ (80027c8 <HAL_DMA_IRQHandler+0x1ec>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d004      	beq.n	8002770 <HAL_DMA_IRQHandler+0x194>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a18      	ldr	r2, [pc, #96]	@ (80027cc <HAL_DMA_IRQHandler+0x1f0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d12f      	bne.n	80027d0 <HAL_DMA_IRQHandler+0x1f4>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b00      	cmp	r3, #0
 800277c:	bf14      	ite	ne
 800277e:	2301      	movne	r3, #1
 8002780:	2300      	moveq	r3, #0
 8002782:	b2db      	uxtb	r3, r3
 8002784:	e02e      	b.n	80027e4 <HAL_DMA_IRQHandler+0x208>
 8002786:	bf00      	nop
 8002788:	24000000 	.word	0x24000000
 800278c:	1b4e81b5 	.word	0x1b4e81b5
 8002790:	40020010 	.word	0x40020010
 8002794:	40020028 	.word	0x40020028
 8002798:	40020040 	.word	0x40020040
 800279c:	40020058 	.word	0x40020058
 80027a0:	40020070 	.word	0x40020070
 80027a4:	40020088 	.word	0x40020088
 80027a8:	400200a0 	.word	0x400200a0
 80027ac:	400200b8 	.word	0x400200b8
 80027b0:	40020410 	.word	0x40020410
 80027b4:	40020428 	.word	0x40020428
 80027b8:	40020440 	.word	0x40020440
 80027bc:	40020458 	.word	0x40020458
 80027c0:	40020470 	.word	0x40020470
 80027c4:	40020488 	.word	0x40020488
 80027c8:	400204a0 	.word	0x400204a0
 80027cc:	400204b8 	.word	0x400204b8
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	bf14      	ite	ne
 80027de:	2301      	movne	r3, #1
 80027e0:	2300      	moveq	r3, #0
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d015      	beq.n	8002814 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0204 	bic.w	r2, r2, #4
 80027f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	2208      	movs	r2, #8
 8002802:	409a      	lsls	r2, r3
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800280c:	f043 0201 	orr.w	r2, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002818:	f003 031f 	and.w	r3, r3, #31
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	fa22 f303 	lsr.w	r3, r2, r3
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d06e      	beq.n	8002908 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a69      	ldr	r2, [pc, #420]	@ (80029d4 <HAL_DMA_IRQHandler+0x3f8>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d04a      	beq.n	80028ca <HAL_DMA_IRQHandler+0x2ee>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a67      	ldr	r2, [pc, #412]	@ (80029d8 <HAL_DMA_IRQHandler+0x3fc>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d045      	beq.n	80028ca <HAL_DMA_IRQHandler+0x2ee>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a66      	ldr	r2, [pc, #408]	@ (80029dc <HAL_DMA_IRQHandler+0x400>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d040      	beq.n	80028ca <HAL_DMA_IRQHandler+0x2ee>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a64      	ldr	r2, [pc, #400]	@ (80029e0 <HAL_DMA_IRQHandler+0x404>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d03b      	beq.n	80028ca <HAL_DMA_IRQHandler+0x2ee>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a63      	ldr	r2, [pc, #396]	@ (80029e4 <HAL_DMA_IRQHandler+0x408>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d036      	beq.n	80028ca <HAL_DMA_IRQHandler+0x2ee>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a61      	ldr	r2, [pc, #388]	@ (80029e8 <HAL_DMA_IRQHandler+0x40c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d031      	beq.n	80028ca <HAL_DMA_IRQHandler+0x2ee>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a60      	ldr	r2, [pc, #384]	@ (80029ec <HAL_DMA_IRQHandler+0x410>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d02c      	beq.n	80028ca <HAL_DMA_IRQHandler+0x2ee>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a5e      	ldr	r2, [pc, #376]	@ (80029f0 <HAL_DMA_IRQHandler+0x414>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d027      	beq.n	80028ca <HAL_DMA_IRQHandler+0x2ee>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a5d      	ldr	r2, [pc, #372]	@ (80029f4 <HAL_DMA_IRQHandler+0x418>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d022      	beq.n	80028ca <HAL_DMA_IRQHandler+0x2ee>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a5b      	ldr	r2, [pc, #364]	@ (80029f8 <HAL_DMA_IRQHandler+0x41c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d01d      	beq.n	80028ca <HAL_DMA_IRQHandler+0x2ee>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a5a      	ldr	r2, [pc, #360]	@ (80029fc <HAL_DMA_IRQHandler+0x420>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d018      	beq.n	80028ca <HAL_DMA_IRQHandler+0x2ee>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a58      	ldr	r2, [pc, #352]	@ (8002a00 <HAL_DMA_IRQHandler+0x424>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d013      	beq.n	80028ca <HAL_DMA_IRQHandler+0x2ee>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a57      	ldr	r2, [pc, #348]	@ (8002a04 <HAL_DMA_IRQHandler+0x428>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d00e      	beq.n	80028ca <HAL_DMA_IRQHandler+0x2ee>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a55      	ldr	r2, [pc, #340]	@ (8002a08 <HAL_DMA_IRQHandler+0x42c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d009      	beq.n	80028ca <HAL_DMA_IRQHandler+0x2ee>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a54      	ldr	r2, [pc, #336]	@ (8002a0c <HAL_DMA_IRQHandler+0x430>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d004      	beq.n	80028ca <HAL_DMA_IRQHandler+0x2ee>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a52      	ldr	r2, [pc, #328]	@ (8002a10 <HAL_DMA_IRQHandler+0x434>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d10a      	bne.n	80028e0 <HAL_DMA_IRQHandler+0x304>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	bf14      	ite	ne
 80028d8:	2301      	movne	r3, #1
 80028da:	2300      	moveq	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	e003      	b.n	80028e8 <HAL_DMA_IRQHandler+0x30c>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2300      	movs	r3, #0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00d      	beq.n	8002908 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f0:	f003 031f 	and.w	r3, r3, #31
 80028f4:	2201      	movs	r2, #1
 80028f6:	409a      	lsls	r2, r3
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002900:	f043 0202 	orr.w	r2, r3, #2
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	2204      	movs	r2, #4
 8002912:	409a      	lsls	r2, r3
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	4013      	ands	r3, r2
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 808f 	beq.w	8002a3c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a2c      	ldr	r2, [pc, #176]	@ (80029d4 <HAL_DMA_IRQHandler+0x3f8>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d04a      	beq.n	80029be <HAL_DMA_IRQHandler+0x3e2>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a2a      	ldr	r2, [pc, #168]	@ (80029d8 <HAL_DMA_IRQHandler+0x3fc>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d045      	beq.n	80029be <HAL_DMA_IRQHandler+0x3e2>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a29      	ldr	r2, [pc, #164]	@ (80029dc <HAL_DMA_IRQHandler+0x400>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d040      	beq.n	80029be <HAL_DMA_IRQHandler+0x3e2>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a27      	ldr	r2, [pc, #156]	@ (80029e0 <HAL_DMA_IRQHandler+0x404>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d03b      	beq.n	80029be <HAL_DMA_IRQHandler+0x3e2>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a26      	ldr	r2, [pc, #152]	@ (80029e4 <HAL_DMA_IRQHandler+0x408>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d036      	beq.n	80029be <HAL_DMA_IRQHandler+0x3e2>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a24      	ldr	r2, [pc, #144]	@ (80029e8 <HAL_DMA_IRQHandler+0x40c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d031      	beq.n	80029be <HAL_DMA_IRQHandler+0x3e2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a23      	ldr	r2, [pc, #140]	@ (80029ec <HAL_DMA_IRQHandler+0x410>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d02c      	beq.n	80029be <HAL_DMA_IRQHandler+0x3e2>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a21      	ldr	r2, [pc, #132]	@ (80029f0 <HAL_DMA_IRQHandler+0x414>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d027      	beq.n	80029be <HAL_DMA_IRQHandler+0x3e2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a20      	ldr	r2, [pc, #128]	@ (80029f4 <HAL_DMA_IRQHandler+0x418>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d022      	beq.n	80029be <HAL_DMA_IRQHandler+0x3e2>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a1e      	ldr	r2, [pc, #120]	@ (80029f8 <HAL_DMA_IRQHandler+0x41c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d01d      	beq.n	80029be <HAL_DMA_IRQHandler+0x3e2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a1d      	ldr	r2, [pc, #116]	@ (80029fc <HAL_DMA_IRQHandler+0x420>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d018      	beq.n	80029be <HAL_DMA_IRQHandler+0x3e2>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a1b      	ldr	r2, [pc, #108]	@ (8002a00 <HAL_DMA_IRQHandler+0x424>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d013      	beq.n	80029be <HAL_DMA_IRQHandler+0x3e2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a1a      	ldr	r2, [pc, #104]	@ (8002a04 <HAL_DMA_IRQHandler+0x428>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d00e      	beq.n	80029be <HAL_DMA_IRQHandler+0x3e2>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a18      	ldr	r2, [pc, #96]	@ (8002a08 <HAL_DMA_IRQHandler+0x42c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d009      	beq.n	80029be <HAL_DMA_IRQHandler+0x3e2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a17      	ldr	r2, [pc, #92]	@ (8002a0c <HAL_DMA_IRQHandler+0x430>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d004      	beq.n	80029be <HAL_DMA_IRQHandler+0x3e2>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a15      	ldr	r2, [pc, #84]	@ (8002a10 <HAL_DMA_IRQHandler+0x434>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d12a      	bne.n	8002a14 <HAL_DMA_IRQHandler+0x438>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bf14      	ite	ne
 80029cc:	2301      	movne	r3, #1
 80029ce:	2300      	moveq	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	e023      	b.n	8002a1c <HAL_DMA_IRQHandler+0x440>
 80029d4:	40020010 	.word	0x40020010
 80029d8:	40020028 	.word	0x40020028
 80029dc:	40020040 	.word	0x40020040
 80029e0:	40020058 	.word	0x40020058
 80029e4:	40020070 	.word	0x40020070
 80029e8:	40020088 	.word	0x40020088
 80029ec:	400200a0 	.word	0x400200a0
 80029f0:	400200b8 	.word	0x400200b8
 80029f4:	40020410 	.word	0x40020410
 80029f8:	40020428 	.word	0x40020428
 80029fc:	40020440 	.word	0x40020440
 8002a00:	40020458 	.word	0x40020458
 8002a04:	40020470 	.word	0x40020470
 8002a08:	40020488 	.word	0x40020488
 8002a0c:	400204a0 	.word	0x400204a0
 8002a10:	400204b8 	.word	0x400204b8
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00d      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	2204      	movs	r2, #4
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a34:	f043 0204 	orr.w	r2, r3, #4
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	2210      	movs	r2, #16
 8002a46:	409a      	lsls	r2, r3
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80a6 	beq.w	8002b9e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a85      	ldr	r2, [pc, #532]	@ (8002c6c <HAL_DMA_IRQHandler+0x690>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d04a      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x516>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a83      	ldr	r2, [pc, #524]	@ (8002c70 <HAL_DMA_IRQHandler+0x694>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d045      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x516>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a82      	ldr	r2, [pc, #520]	@ (8002c74 <HAL_DMA_IRQHandler+0x698>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d040      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x516>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a80      	ldr	r2, [pc, #512]	@ (8002c78 <HAL_DMA_IRQHandler+0x69c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d03b      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x516>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a7f      	ldr	r2, [pc, #508]	@ (8002c7c <HAL_DMA_IRQHandler+0x6a0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d036      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x516>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a7d      	ldr	r2, [pc, #500]	@ (8002c80 <HAL_DMA_IRQHandler+0x6a4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d031      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x516>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a7c      	ldr	r2, [pc, #496]	@ (8002c84 <HAL_DMA_IRQHandler+0x6a8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d02c      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x516>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a7a      	ldr	r2, [pc, #488]	@ (8002c88 <HAL_DMA_IRQHandler+0x6ac>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d027      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x516>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a79      	ldr	r2, [pc, #484]	@ (8002c8c <HAL_DMA_IRQHandler+0x6b0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d022      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x516>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a77      	ldr	r2, [pc, #476]	@ (8002c90 <HAL_DMA_IRQHandler+0x6b4>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d01d      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x516>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a76      	ldr	r2, [pc, #472]	@ (8002c94 <HAL_DMA_IRQHandler+0x6b8>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d018      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x516>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a74      	ldr	r2, [pc, #464]	@ (8002c98 <HAL_DMA_IRQHandler+0x6bc>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d013      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x516>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a73      	ldr	r2, [pc, #460]	@ (8002c9c <HAL_DMA_IRQHandler+0x6c0>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d00e      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x516>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a71      	ldr	r2, [pc, #452]	@ (8002ca0 <HAL_DMA_IRQHandler+0x6c4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d009      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x516>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a70      	ldr	r2, [pc, #448]	@ (8002ca4 <HAL_DMA_IRQHandler+0x6c8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d004      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x516>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a6e      	ldr	r2, [pc, #440]	@ (8002ca8 <HAL_DMA_IRQHandler+0x6cc>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d10a      	bne.n	8002b08 <HAL_DMA_IRQHandler+0x52c>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	bf14      	ite	ne
 8002b00:	2301      	movne	r3, #1
 8002b02:	2300      	moveq	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	e009      	b.n	8002b1c <HAL_DMA_IRQHandler+0x540>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	bf14      	ite	ne
 8002b16:	2301      	movne	r3, #1
 8002b18:	2300      	moveq	r3, #0
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d03e      	beq.n	8002b9e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	2210      	movs	r2, #16
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d018      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d108      	bne.n	8002b5e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d024      	beq.n	8002b9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4798      	blx	r3
 8002b5c:	e01f      	b.n	8002b9e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d01b      	beq.n	8002b9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	4798      	blx	r3
 8002b6e:	e016      	b.n	8002b9e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d107      	bne.n	8002b8e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0208 	bic.w	r2, r2, #8
 8002b8c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	409a      	lsls	r2, r3
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 8110 	beq.w	8002dd4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a2c      	ldr	r2, [pc, #176]	@ (8002c6c <HAL_DMA_IRQHandler+0x690>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d04a      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x678>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a2b      	ldr	r2, [pc, #172]	@ (8002c70 <HAL_DMA_IRQHandler+0x694>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d045      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x678>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a29      	ldr	r2, [pc, #164]	@ (8002c74 <HAL_DMA_IRQHandler+0x698>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d040      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x678>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a28      	ldr	r2, [pc, #160]	@ (8002c78 <HAL_DMA_IRQHandler+0x69c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d03b      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x678>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a26      	ldr	r2, [pc, #152]	@ (8002c7c <HAL_DMA_IRQHandler+0x6a0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d036      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x678>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a25      	ldr	r2, [pc, #148]	@ (8002c80 <HAL_DMA_IRQHandler+0x6a4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d031      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x678>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a23      	ldr	r2, [pc, #140]	@ (8002c84 <HAL_DMA_IRQHandler+0x6a8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d02c      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x678>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a22      	ldr	r2, [pc, #136]	@ (8002c88 <HAL_DMA_IRQHandler+0x6ac>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d027      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x678>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a20      	ldr	r2, [pc, #128]	@ (8002c8c <HAL_DMA_IRQHandler+0x6b0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d022      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x678>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a1f      	ldr	r2, [pc, #124]	@ (8002c90 <HAL_DMA_IRQHandler+0x6b4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d01d      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x678>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8002c94 <HAL_DMA_IRQHandler+0x6b8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d018      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x678>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1c      	ldr	r2, [pc, #112]	@ (8002c98 <HAL_DMA_IRQHandler+0x6bc>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d013      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x678>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a1a      	ldr	r2, [pc, #104]	@ (8002c9c <HAL_DMA_IRQHandler+0x6c0>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d00e      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x678>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a19      	ldr	r2, [pc, #100]	@ (8002ca0 <HAL_DMA_IRQHandler+0x6c4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d009      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x678>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a17      	ldr	r2, [pc, #92]	@ (8002ca4 <HAL_DMA_IRQHandler+0x6c8>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d004      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x678>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a16      	ldr	r2, [pc, #88]	@ (8002ca8 <HAL_DMA_IRQHandler+0x6cc>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d12b      	bne.n	8002cac <HAL_DMA_IRQHandler+0x6d0>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	bf14      	ite	ne
 8002c62:	2301      	movne	r3, #1
 8002c64:	2300      	moveq	r3, #0
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	e02a      	b.n	8002cc0 <HAL_DMA_IRQHandler+0x6e4>
 8002c6a:	bf00      	nop
 8002c6c:	40020010 	.word	0x40020010
 8002c70:	40020028 	.word	0x40020028
 8002c74:	40020040 	.word	0x40020040
 8002c78:	40020058 	.word	0x40020058
 8002c7c:	40020070 	.word	0x40020070
 8002c80:	40020088 	.word	0x40020088
 8002c84:	400200a0 	.word	0x400200a0
 8002c88:	400200b8 	.word	0x400200b8
 8002c8c:	40020410 	.word	0x40020410
 8002c90:	40020428 	.word	0x40020428
 8002c94:	40020440 	.word	0x40020440
 8002c98:	40020458 	.word	0x40020458
 8002c9c:	40020470 	.word	0x40020470
 8002ca0:	40020488 	.word	0x40020488
 8002ca4:	400204a0 	.word	0x400204a0
 8002ca8:	400204b8 	.word	0x400204b8
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	bf14      	ite	ne
 8002cba:	2301      	movne	r3, #1
 8002cbc:	2300      	moveq	r3, #0
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 8087 	beq.w	8002dd4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cca:	f003 031f 	and.w	r3, r3, #31
 8002cce:	2220      	movs	r2, #32
 8002cd0:	409a      	lsls	r2, r3
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d139      	bne.n	8002d56 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0216 	bic.w	r2, r2, #22
 8002cf0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695a      	ldr	r2, [r3, #20]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d00:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d103      	bne.n	8002d12 <HAL_DMA_IRQHandler+0x736>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d007      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0208 	bic.w	r2, r2, #8
 8002d20:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d26:	f003 031f 	and.w	r3, r3, #31
 8002d2a:	223f      	movs	r2, #63	@ 0x3f
 8002d2c:	409a      	lsls	r2, r3
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 834a 	beq.w	80033e0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	4798      	blx	r3
          }
          return;
 8002d54:	e344      	b.n	80033e0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d018      	beq.n	8002d96 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d108      	bne.n	8002d84 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d02c      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	4798      	blx	r3
 8002d82:	e027      	b.n	8002dd4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d023      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	4798      	blx	r3
 8002d94:	e01e      	b.n	8002dd4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10f      	bne.n	8002dc4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0210 	bic.w	r2, r2, #16
 8002db2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 8306 	beq.w	80033ea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 8088 	beq.w	8002efc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2204      	movs	r2, #4
 8002df0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a7a      	ldr	r2, [pc, #488]	@ (8002fe4 <HAL_DMA_IRQHandler+0xa08>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d04a      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x8b8>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a79      	ldr	r2, [pc, #484]	@ (8002fe8 <HAL_DMA_IRQHandler+0xa0c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d045      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x8b8>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a77      	ldr	r2, [pc, #476]	@ (8002fec <HAL_DMA_IRQHandler+0xa10>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d040      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x8b8>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a76      	ldr	r2, [pc, #472]	@ (8002ff0 <HAL_DMA_IRQHandler+0xa14>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d03b      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x8b8>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a74      	ldr	r2, [pc, #464]	@ (8002ff4 <HAL_DMA_IRQHandler+0xa18>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d036      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x8b8>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a73      	ldr	r2, [pc, #460]	@ (8002ff8 <HAL_DMA_IRQHandler+0xa1c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d031      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x8b8>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a71      	ldr	r2, [pc, #452]	@ (8002ffc <HAL_DMA_IRQHandler+0xa20>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d02c      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x8b8>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a70      	ldr	r2, [pc, #448]	@ (8003000 <HAL_DMA_IRQHandler+0xa24>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d027      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x8b8>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a6e      	ldr	r2, [pc, #440]	@ (8003004 <HAL_DMA_IRQHandler+0xa28>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d022      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x8b8>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a6d      	ldr	r2, [pc, #436]	@ (8003008 <HAL_DMA_IRQHandler+0xa2c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d01d      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x8b8>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a6b      	ldr	r2, [pc, #428]	@ (800300c <HAL_DMA_IRQHandler+0xa30>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d018      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x8b8>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a6a      	ldr	r2, [pc, #424]	@ (8003010 <HAL_DMA_IRQHandler+0xa34>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d013      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x8b8>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a68      	ldr	r2, [pc, #416]	@ (8003014 <HAL_DMA_IRQHandler+0xa38>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d00e      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x8b8>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a67      	ldr	r2, [pc, #412]	@ (8003018 <HAL_DMA_IRQHandler+0xa3c>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d009      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x8b8>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a65      	ldr	r2, [pc, #404]	@ (800301c <HAL_DMA_IRQHandler+0xa40>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d004      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x8b8>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a64      	ldr	r2, [pc, #400]	@ (8003020 <HAL_DMA_IRQHandler+0xa44>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d108      	bne.n	8002ea6 <HAL_DMA_IRQHandler+0x8ca>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0201 	bic.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	e007      	b.n	8002eb6 <HAL_DMA_IRQHandler+0x8da>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0201 	bic.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d307      	bcc.n	8002ed2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1f2      	bne.n	8002eb6 <HAL_DMA_IRQHandler+0x8da>
 8002ed0:	e000      	b.n	8002ed4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002ed2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d004      	beq.n	8002eec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002eea:	e003      	b.n	8002ef4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 8272 	beq.w	80033ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	4798      	blx	r3
 8002f0e:	e26c      	b.n	80033ea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a43      	ldr	r2, [pc, #268]	@ (8003024 <HAL_DMA_IRQHandler+0xa48>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d022      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x984>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a42      	ldr	r2, [pc, #264]	@ (8003028 <HAL_DMA_IRQHandler+0xa4c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d01d      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x984>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a40      	ldr	r2, [pc, #256]	@ (800302c <HAL_DMA_IRQHandler+0xa50>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d018      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x984>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a3f      	ldr	r2, [pc, #252]	@ (8003030 <HAL_DMA_IRQHandler+0xa54>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d013      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x984>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a3d      	ldr	r2, [pc, #244]	@ (8003034 <HAL_DMA_IRQHandler+0xa58>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00e      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x984>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a3c      	ldr	r2, [pc, #240]	@ (8003038 <HAL_DMA_IRQHandler+0xa5c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d009      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x984>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a3a      	ldr	r2, [pc, #232]	@ (800303c <HAL_DMA_IRQHandler+0xa60>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d004      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x984>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a39      	ldr	r2, [pc, #228]	@ (8003040 <HAL_DMA_IRQHandler+0xa64>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d101      	bne.n	8002f64 <HAL_DMA_IRQHandler+0x988>
 8002f60:	2301      	movs	r3, #1
 8002f62:	e000      	b.n	8002f66 <HAL_DMA_IRQHandler+0x98a>
 8002f64:	2300      	movs	r3, #0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 823f 	beq.w	80033ea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	2204      	movs	r2, #4
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 80cd 	beq.w	8003124 <HAL_DMA_IRQHandler+0xb48>
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80c7 	beq.w	8003124 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f9a:	f003 031f 	and.w	r3, r3, #31
 8002f9e:	2204      	movs	r2, #4
 8002fa0:	409a      	lsls	r2, r3
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d049      	beq.n	8003044 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d109      	bne.n	8002fce <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 8210 	beq.w	80033e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002fcc:	e20a      	b.n	80033e4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 8206 	beq.w	80033e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002fe0:	e200      	b.n	80033e4 <HAL_DMA_IRQHandler+0xe08>
 8002fe2:	bf00      	nop
 8002fe4:	40020010 	.word	0x40020010
 8002fe8:	40020028 	.word	0x40020028
 8002fec:	40020040 	.word	0x40020040
 8002ff0:	40020058 	.word	0x40020058
 8002ff4:	40020070 	.word	0x40020070
 8002ff8:	40020088 	.word	0x40020088
 8002ffc:	400200a0 	.word	0x400200a0
 8003000:	400200b8 	.word	0x400200b8
 8003004:	40020410 	.word	0x40020410
 8003008:	40020428 	.word	0x40020428
 800300c:	40020440 	.word	0x40020440
 8003010:	40020458 	.word	0x40020458
 8003014:	40020470 	.word	0x40020470
 8003018:	40020488 	.word	0x40020488
 800301c:	400204a0 	.word	0x400204a0
 8003020:	400204b8 	.word	0x400204b8
 8003024:	58025408 	.word	0x58025408
 8003028:	5802541c 	.word	0x5802541c
 800302c:	58025430 	.word	0x58025430
 8003030:	58025444 	.word	0x58025444
 8003034:	58025458 	.word	0x58025458
 8003038:	5802546c 	.word	0x5802546c
 800303c:	58025480 	.word	0x58025480
 8003040:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	2b00      	cmp	r3, #0
 800304c:	d160      	bne.n	8003110 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a7f      	ldr	r2, [pc, #508]	@ (8003250 <HAL_DMA_IRQHandler+0xc74>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d04a      	beq.n	80030ee <HAL_DMA_IRQHandler+0xb12>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a7d      	ldr	r2, [pc, #500]	@ (8003254 <HAL_DMA_IRQHandler+0xc78>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d045      	beq.n	80030ee <HAL_DMA_IRQHandler+0xb12>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a7c      	ldr	r2, [pc, #496]	@ (8003258 <HAL_DMA_IRQHandler+0xc7c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d040      	beq.n	80030ee <HAL_DMA_IRQHandler+0xb12>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a7a      	ldr	r2, [pc, #488]	@ (800325c <HAL_DMA_IRQHandler+0xc80>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d03b      	beq.n	80030ee <HAL_DMA_IRQHandler+0xb12>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a79      	ldr	r2, [pc, #484]	@ (8003260 <HAL_DMA_IRQHandler+0xc84>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d036      	beq.n	80030ee <HAL_DMA_IRQHandler+0xb12>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a77      	ldr	r2, [pc, #476]	@ (8003264 <HAL_DMA_IRQHandler+0xc88>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d031      	beq.n	80030ee <HAL_DMA_IRQHandler+0xb12>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a76      	ldr	r2, [pc, #472]	@ (8003268 <HAL_DMA_IRQHandler+0xc8c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d02c      	beq.n	80030ee <HAL_DMA_IRQHandler+0xb12>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a74      	ldr	r2, [pc, #464]	@ (800326c <HAL_DMA_IRQHandler+0xc90>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d027      	beq.n	80030ee <HAL_DMA_IRQHandler+0xb12>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a73      	ldr	r2, [pc, #460]	@ (8003270 <HAL_DMA_IRQHandler+0xc94>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d022      	beq.n	80030ee <HAL_DMA_IRQHandler+0xb12>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a71      	ldr	r2, [pc, #452]	@ (8003274 <HAL_DMA_IRQHandler+0xc98>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d01d      	beq.n	80030ee <HAL_DMA_IRQHandler+0xb12>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a70      	ldr	r2, [pc, #448]	@ (8003278 <HAL_DMA_IRQHandler+0xc9c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d018      	beq.n	80030ee <HAL_DMA_IRQHandler+0xb12>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a6e      	ldr	r2, [pc, #440]	@ (800327c <HAL_DMA_IRQHandler+0xca0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d013      	beq.n	80030ee <HAL_DMA_IRQHandler+0xb12>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a6d      	ldr	r2, [pc, #436]	@ (8003280 <HAL_DMA_IRQHandler+0xca4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d00e      	beq.n	80030ee <HAL_DMA_IRQHandler+0xb12>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a6b      	ldr	r2, [pc, #428]	@ (8003284 <HAL_DMA_IRQHandler+0xca8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d009      	beq.n	80030ee <HAL_DMA_IRQHandler+0xb12>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a6a      	ldr	r2, [pc, #424]	@ (8003288 <HAL_DMA_IRQHandler+0xcac>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d004      	beq.n	80030ee <HAL_DMA_IRQHandler+0xb12>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a68      	ldr	r2, [pc, #416]	@ (800328c <HAL_DMA_IRQHandler+0xcb0>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d108      	bne.n	8003100 <HAL_DMA_IRQHandler+0xb24>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0208 	bic.w	r2, r2, #8
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	e007      	b.n	8003110 <HAL_DMA_IRQHandler+0xb34>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0204 	bic.w	r2, r2, #4
 800310e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8165 	beq.w	80033e4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003122:	e15f      	b.n	80033e4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	2202      	movs	r2, #2
 800312e:	409a      	lsls	r2, r3
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	4013      	ands	r3, r2
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80c5 	beq.w	80032c4 <HAL_DMA_IRQHandler+0xce8>
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80bf 	beq.w	80032c4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314a:	f003 031f 	and.w	r3, r3, #31
 800314e:	2202      	movs	r2, #2
 8003150:	409a      	lsls	r2, r3
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d018      	beq.n	8003192 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 813a 	beq.w	80033e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800317c:	e134      	b.n	80033e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 8130 	beq.w	80033e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003190:	e12a      	b.n	80033e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	f040 8089 	bne.w	80032b0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a2b      	ldr	r2, [pc, #172]	@ (8003250 <HAL_DMA_IRQHandler+0xc74>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d04a      	beq.n	800323e <HAL_DMA_IRQHandler+0xc62>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a29      	ldr	r2, [pc, #164]	@ (8003254 <HAL_DMA_IRQHandler+0xc78>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d045      	beq.n	800323e <HAL_DMA_IRQHandler+0xc62>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a28      	ldr	r2, [pc, #160]	@ (8003258 <HAL_DMA_IRQHandler+0xc7c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d040      	beq.n	800323e <HAL_DMA_IRQHandler+0xc62>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a26      	ldr	r2, [pc, #152]	@ (800325c <HAL_DMA_IRQHandler+0xc80>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d03b      	beq.n	800323e <HAL_DMA_IRQHandler+0xc62>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a25      	ldr	r2, [pc, #148]	@ (8003260 <HAL_DMA_IRQHandler+0xc84>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d036      	beq.n	800323e <HAL_DMA_IRQHandler+0xc62>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a23      	ldr	r2, [pc, #140]	@ (8003264 <HAL_DMA_IRQHandler+0xc88>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d031      	beq.n	800323e <HAL_DMA_IRQHandler+0xc62>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a22      	ldr	r2, [pc, #136]	@ (8003268 <HAL_DMA_IRQHandler+0xc8c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d02c      	beq.n	800323e <HAL_DMA_IRQHandler+0xc62>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a20      	ldr	r2, [pc, #128]	@ (800326c <HAL_DMA_IRQHandler+0xc90>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d027      	beq.n	800323e <HAL_DMA_IRQHandler+0xc62>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a1f      	ldr	r2, [pc, #124]	@ (8003270 <HAL_DMA_IRQHandler+0xc94>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d022      	beq.n	800323e <HAL_DMA_IRQHandler+0xc62>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003274 <HAL_DMA_IRQHandler+0xc98>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d01d      	beq.n	800323e <HAL_DMA_IRQHandler+0xc62>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a1c      	ldr	r2, [pc, #112]	@ (8003278 <HAL_DMA_IRQHandler+0xc9c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d018      	beq.n	800323e <HAL_DMA_IRQHandler+0xc62>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1a      	ldr	r2, [pc, #104]	@ (800327c <HAL_DMA_IRQHandler+0xca0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d013      	beq.n	800323e <HAL_DMA_IRQHandler+0xc62>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a19      	ldr	r2, [pc, #100]	@ (8003280 <HAL_DMA_IRQHandler+0xca4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00e      	beq.n	800323e <HAL_DMA_IRQHandler+0xc62>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a17      	ldr	r2, [pc, #92]	@ (8003284 <HAL_DMA_IRQHandler+0xca8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d009      	beq.n	800323e <HAL_DMA_IRQHandler+0xc62>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a16      	ldr	r2, [pc, #88]	@ (8003288 <HAL_DMA_IRQHandler+0xcac>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d004      	beq.n	800323e <HAL_DMA_IRQHandler+0xc62>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a14      	ldr	r2, [pc, #80]	@ (800328c <HAL_DMA_IRQHandler+0xcb0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d128      	bne.n	8003290 <HAL_DMA_IRQHandler+0xcb4>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0214 	bic.w	r2, r2, #20
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	e027      	b.n	80032a0 <HAL_DMA_IRQHandler+0xcc4>
 8003250:	40020010 	.word	0x40020010
 8003254:	40020028 	.word	0x40020028
 8003258:	40020040 	.word	0x40020040
 800325c:	40020058 	.word	0x40020058
 8003260:	40020070 	.word	0x40020070
 8003264:	40020088 	.word	0x40020088
 8003268:	400200a0 	.word	0x400200a0
 800326c:	400200b8 	.word	0x400200b8
 8003270:	40020410 	.word	0x40020410
 8003274:	40020428 	.word	0x40020428
 8003278:	40020440 	.word	0x40020440
 800327c:	40020458 	.word	0x40020458
 8003280:	40020470 	.word	0x40020470
 8003284:	40020488 	.word	0x40020488
 8003288:	400204a0 	.word	0x400204a0
 800328c:	400204b8 	.word	0x400204b8
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 020a 	bic.w	r2, r2, #10
 800329e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 8097 	beq.w	80033e8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032c2:	e091      	b.n	80033e8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c8:	f003 031f 	and.w	r3, r3, #31
 80032cc:	2208      	movs	r2, #8
 80032ce:	409a      	lsls	r2, r3
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 8088 	beq.w	80033ea <HAL_DMA_IRQHandler+0xe0e>
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 8082 	beq.w	80033ea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a41      	ldr	r2, [pc, #260]	@ (80033f0 <HAL_DMA_IRQHandler+0xe14>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d04a      	beq.n	8003386 <HAL_DMA_IRQHandler+0xdaa>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a3f      	ldr	r2, [pc, #252]	@ (80033f4 <HAL_DMA_IRQHandler+0xe18>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d045      	beq.n	8003386 <HAL_DMA_IRQHandler+0xdaa>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a3e      	ldr	r2, [pc, #248]	@ (80033f8 <HAL_DMA_IRQHandler+0xe1c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d040      	beq.n	8003386 <HAL_DMA_IRQHandler+0xdaa>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a3c      	ldr	r2, [pc, #240]	@ (80033fc <HAL_DMA_IRQHandler+0xe20>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d03b      	beq.n	8003386 <HAL_DMA_IRQHandler+0xdaa>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a3b      	ldr	r2, [pc, #236]	@ (8003400 <HAL_DMA_IRQHandler+0xe24>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d036      	beq.n	8003386 <HAL_DMA_IRQHandler+0xdaa>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a39      	ldr	r2, [pc, #228]	@ (8003404 <HAL_DMA_IRQHandler+0xe28>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d031      	beq.n	8003386 <HAL_DMA_IRQHandler+0xdaa>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a38      	ldr	r2, [pc, #224]	@ (8003408 <HAL_DMA_IRQHandler+0xe2c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d02c      	beq.n	8003386 <HAL_DMA_IRQHandler+0xdaa>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a36      	ldr	r2, [pc, #216]	@ (800340c <HAL_DMA_IRQHandler+0xe30>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d027      	beq.n	8003386 <HAL_DMA_IRQHandler+0xdaa>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a35      	ldr	r2, [pc, #212]	@ (8003410 <HAL_DMA_IRQHandler+0xe34>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d022      	beq.n	8003386 <HAL_DMA_IRQHandler+0xdaa>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a33      	ldr	r2, [pc, #204]	@ (8003414 <HAL_DMA_IRQHandler+0xe38>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d01d      	beq.n	8003386 <HAL_DMA_IRQHandler+0xdaa>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a32      	ldr	r2, [pc, #200]	@ (8003418 <HAL_DMA_IRQHandler+0xe3c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d018      	beq.n	8003386 <HAL_DMA_IRQHandler+0xdaa>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a30      	ldr	r2, [pc, #192]	@ (800341c <HAL_DMA_IRQHandler+0xe40>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d013      	beq.n	8003386 <HAL_DMA_IRQHandler+0xdaa>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a2f      	ldr	r2, [pc, #188]	@ (8003420 <HAL_DMA_IRQHandler+0xe44>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00e      	beq.n	8003386 <HAL_DMA_IRQHandler+0xdaa>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a2d      	ldr	r2, [pc, #180]	@ (8003424 <HAL_DMA_IRQHandler+0xe48>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d009      	beq.n	8003386 <HAL_DMA_IRQHandler+0xdaa>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a2c      	ldr	r2, [pc, #176]	@ (8003428 <HAL_DMA_IRQHandler+0xe4c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d004      	beq.n	8003386 <HAL_DMA_IRQHandler+0xdaa>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a2a      	ldr	r2, [pc, #168]	@ (800342c <HAL_DMA_IRQHandler+0xe50>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d108      	bne.n	8003398 <HAL_DMA_IRQHandler+0xdbc>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 021c 	bic.w	r2, r2, #28
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	e007      	b.n	80033a8 <HAL_DMA_IRQHandler+0xdcc>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 020e 	bic.w	r2, r2, #14
 80033a6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ac:	f003 031f 	and.w	r3, r3, #31
 80033b0:	2201      	movs	r2, #1
 80033b2:	409a      	lsls	r2, r3
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d009      	beq.n	80033ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	4798      	blx	r3
 80033de:	e004      	b.n	80033ea <HAL_DMA_IRQHandler+0xe0e>
          return;
 80033e0:	bf00      	nop
 80033e2:	e002      	b.n	80033ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033e4:	bf00      	nop
 80033e6:	e000      	b.n	80033ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033e8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80033ea:	3728      	adds	r7, #40	@ 0x28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40020010 	.word	0x40020010
 80033f4:	40020028 	.word	0x40020028
 80033f8:	40020040 	.word	0x40020040
 80033fc:	40020058 	.word	0x40020058
 8003400:	40020070 	.word	0x40020070
 8003404:	40020088 	.word	0x40020088
 8003408:	400200a0 	.word	0x400200a0
 800340c:	400200b8 	.word	0x400200b8
 8003410:	40020410 	.word	0x40020410
 8003414:	40020428 	.word	0x40020428
 8003418:	40020440 	.word	0x40020440
 800341c:	40020458 	.word	0x40020458
 8003420:	40020470 	.word	0x40020470
 8003424:	40020488 	.word	0x40020488
 8003428:	400204a0 	.word	0x400204a0
 800342c:	400204b8 	.word	0x400204b8

08003430 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a42      	ldr	r2, [pc, #264]	@ (8003548 <DMA_CalcBaseAndBitshift+0x118>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d04a      	beq.n	80034d8 <DMA_CalcBaseAndBitshift+0xa8>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a41      	ldr	r2, [pc, #260]	@ (800354c <DMA_CalcBaseAndBitshift+0x11c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d045      	beq.n	80034d8 <DMA_CalcBaseAndBitshift+0xa8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a3f      	ldr	r2, [pc, #252]	@ (8003550 <DMA_CalcBaseAndBitshift+0x120>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d040      	beq.n	80034d8 <DMA_CalcBaseAndBitshift+0xa8>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a3e      	ldr	r2, [pc, #248]	@ (8003554 <DMA_CalcBaseAndBitshift+0x124>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d03b      	beq.n	80034d8 <DMA_CalcBaseAndBitshift+0xa8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a3c      	ldr	r2, [pc, #240]	@ (8003558 <DMA_CalcBaseAndBitshift+0x128>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d036      	beq.n	80034d8 <DMA_CalcBaseAndBitshift+0xa8>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a3b      	ldr	r2, [pc, #236]	@ (800355c <DMA_CalcBaseAndBitshift+0x12c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d031      	beq.n	80034d8 <DMA_CalcBaseAndBitshift+0xa8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a39      	ldr	r2, [pc, #228]	@ (8003560 <DMA_CalcBaseAndBitshift+0x130>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d02c      	beq.n	80034d8 <DMA_CalcBaseAndBitshift+0xa8>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a38      	ldr	r2, [pc, #224]	@ (8003564 <DMA_CalcBaseAndBitshift+0x134>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d027      	beq.n	80034d8 <DMA_CalcBaseAndBitshift+0xa8>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a36      	ldr	r2, [pc, #216]	@ (8003568 <DMA_CalcBaseAndBitshift+0x138>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d022      	beq.n	80034d8 <DMA_CalcBaseAndBitshift+0xa8>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a35      	ldr	r2, [pc, #212]	@ (800356c <DMA_CalcBaseAndBitshift+0x13c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d01d      	beq.n	80034d8 <DMA_CalcBaseAndBitshift+0xa8>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a33      	ldr	r2, [pc, #204]	@ (8003570 <DMA_CalcBaseAndBitshift+0x140>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d018      	beq.n	80034d8 <DMA_CalcBaseAndBitshift+0xa8>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a32      	ldr	r2, [pc, #200]	@ (8003574 <DMA_CalcBaseAndBitshift+0x144>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d013      	beq.n	80034d8 <DMA_CalcBaseAndBitshift+0xa8>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a30      	ldr	r2, [pc, #192]	@ (8003578 <DMA_CalcBaseAndBitshift+0x148>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d00e      	beq.n	80034d8 <DMA_CalcBaseAndBitshift+0xa8>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a2f      	ldr	r2, [pc, #188]	@ (800357c <DMA_CalcBaseAndBitshift+0x14c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d009      	beq.n	80034d8 <DMA_CalcBaseAndBitshift+0xa8>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a2d      	ldr	r2, [pc, #180]	@ (8003580 <DMA_CalcBaseAndBitshift+0x150>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d004      	beq.n	80034d8 <DMA_CalcBaseAndBitshift+0xa8>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a2c      	ldr	r2, [pc, #176]	@ (8003584 <DMA_CalcBaseAndBitshift+0x154>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d101      	bne.n	80034dc <DMA_CalcBaseAndBitshift+0xac>
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <DMA_CalcBaseAndBitshift+0xae>
 80034dc:	2300      	movs	r3, #0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d024      	beq.n	800352c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	3b10      	subs	r3, #16
 80034ea:	4a27      	ldr	r2, [pc, #156]	@ (8003588 <DMA_CalcBaseAndBitshift+0x158>)
 80034ec:	fba2 2303 	umull	r2, r3, r2, r3
 80034f0:	091b      	lsrs	r3, r3, #4
 80034f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	4a24      	ldr	r2, [pc, #144]	@ (800358c <DMA_CalcBaseAndBitshift+0x15c>)
 80034fc:	5cd3      	ldrb	r3, [r2, r3]
 80034fe:	461a      	mov	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2b03      	cmp	r3, #3
 8003508:	d908      	bls.n	800351c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	4b1f      	ldr	r3, [pc, #124]	@ (8003590 <DMA_CalcBaseAndBitshift+0x160>)
 8003512:	4013      	ands	r3, r2
 8003514:	1d1a      	adds	r2, r3, #4
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	659a      	str	r2, [r3, #88]	@ 0x58
 800351a:	e00d      	b.n	8003538 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	4b1b      	ldr	r3, [pc, #108]	@ (8003590 <DMA_CalcBaseAndBitshift+0x160>)
 8003524:	4013      	ands	r3, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6593      	str	r3, [r2, #88]	@ 0x58
 800352a:	e005      	b.n	8003538 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800353c:	4618      	mov	r0, r3
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	40020010 	.word	0x40020010
 800354c:	40020028 	.word	0x40020028
 8003550:	40020040 	.word	0x40020040
 8003554:	40020058 	.word	0x40020058
 8003558:	40020070 	.word	0x40020070
 800355c:	40020088 	.word	0x40020088
 8003560:	400200a0 	.word	0x400200a0
 8003564:	400200b8 	.word	0x400200b8
 8003568:	40020410 	.word	0x40020410
 800356c:	40020428 	.word	0x40020428
 8003570:	40020440 	.word	0x40020440
 8003574:	40020458 	.word	0x40020458
 8003578:	40020470 	.word	0x40020470
 800357c:	40020488 	.word	0x40020488
 8003580:	400204a0 	.word	0x400204a0
 8003584:	400204b8 	.word	0x400204b8
 8003588:	aaaaaaab 	.word	0xaaaaaaab
 800358c:	080091e0 	.word	0x080091e0
 8003590:	fffffc00 	.word	0xfffffc00

08003594 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d120      	bne.n	80035ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d858      	bhi.n	8003662 <DMA_CheckFifoParam+0xce>
 80035b0:	a201      	add	r2, pc, #4	@ (adr r2, 80035b8 <DMA_CheckFifoParam+0x24>)
 80035b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b6:	bf00      	nop
 80035b8:	080035c9 	.word	0x080035c9
 80035bc:	080035db 	.word	0x080035db
 80035c0:	080035c9 	.word	0x080035c9
 80035c4:	08003663 	.word	0x08003663
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d048      	beq.n	8003666 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80035d8:	e045      	b.n	8003666 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035e2:	d142      	bne.n	800366a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80035e8:	e03f      	b.n	800366a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035f2:	d123      	bne.n	800363c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d838      	bhi.n	800366e <DMA_CheckFifoParam+0xda>
 80035fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003604 <DMA_CheckFifoParam+0x70>)
 80035fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003602:	bf00      	nop
 8003604:	08003615 	.word	0x08003615
 8003608:	0800361b 	.word	0x0800361b
 800360c:	08003615 	.word	0x08003615
 8003610:	0800362d 	.word	0x0800362d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
        break;
 8003618:	e030      	b.n	800367c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d025      	beq.n	8003672 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800362a:	e022      	b.n	8003672 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003630:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003634:	d11f      	bne.n	8003676 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800363a:	e01c      	b.n	8003676 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003640:	2b02      	cmp	r3, #2
 8003642:	d902      	bls.n	800364a <DMA_CheckFifoParam+0xb6>
 8003644:	2b03      	cmp	r3, #3
 8003646:	d003      	beq.n	8003650 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003648:	e018      	b.n	800367c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	73fb      	strb	r3, [r7, #15]
        break;
 800364e:	e015      	b.n	800367c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003654:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00e      	beq.n	800367a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
    break;
 8003660:	e00b      	b.n	800367a <DMA_CheckFifoParam+0xe6>
        break;
 8003662:	bf00      	nop
 8003664:	e00a      	b.n	800367c <DMA_CheckFifoParam+0xe8>
        break;
 8003666:	bf00      	nop
 8003668:	e008      	b.n	800367c <DMA_CheckFifoParam+0xe8>
        break;
 800366a:	bf00      	nop
 800366c:	e006      	b.n	800367c <DMA_CheckFifoParam+0xe8>
        break;
 800366e:	bf00      	nop
 8003670:	e004      	b.n	800367c <DMA_CheckFifoParam+0xe8>
        break;
 8003672:	bf00      	nop
 8003674:	e002      	b.n	800367c <DMA_CheckFifoParam+0xe8>
        break;
 8003676:	bf00      	nop
 8003678:	e000      	b.n	800367c <DMA_CheckFifoParam+0xe8>
    break;
 800367a:	bf00      	nop
    }
  }

  return status;
 800367c:	7bfb      	ldrb	r3, [r7, #15]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop

0800368c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a38      	ldr	r2, [pc, #224]	@ (8003780 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d022      	beq.n	80036ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a36      	ldr	r2, [pc, #216]	@ (8003784 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d01d      	beq.n	80036ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a35      	ldr	r2, [pc, #212]	@ (8003788 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d018      	beq.n	80036ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a33      	ldr	r2, [pc, #204]	@ (800378c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d013      	beq.n	80036ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a32      	ldr	r2, [pc, #200]	@ (8003790 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00e      	beq.n	80036ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a30      	ldr	r2, [pc, #192]	@ (8003794 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d009      	beq.n	80036ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a2f      	ldr	r2, [pc, #188]	@ (8003798 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d004      	beq.n	80036ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a2d      	ldr	r2, [pc, #180]	@ (800379c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d101      	bne.n	80036ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80036ee:	2300      	movs	r3, #0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01a      	beq.n	800372a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	3b08      	subs	r3, #8
 80036fc:	4a28      	ldr	r2, [pc, #160]	@ (80037a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80036fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003702:	091b      	lsrs	r3, r3, #4
 8003704:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4b26      	ldr	r3, [pc, #152]	@ (80037a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800370a:	4413      	add	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	461a      	mov	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a24      	ldr	r2, [pc, #144]	@ (80037a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003718:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	2201      	movs	r2, #1
 8003722:	409a      	lsls	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003728:	e024      	b.n	8003774 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	b2db      	uxtb	r3, r3
 8003730:	3b10      	subs	r3, #16
 8003732:	4a1e      	ldr	r2, [pc, #120]	@ (80037ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003734:	fba2 2303 	umull	r2, r3, r2, r3
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4a1c      	ldr	r2, [pc, #112]	@ (80037b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d806      	bhi.n	8003752 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	4a1b      	ldr	r2, [pc, #108]	@ (80037b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d902      	bls.n	8003752 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	3308      	adds	r3, #8
 8003750:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4b18      	ldr	r3, [pc, #96]	@ (80037b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003756:	4413      	add	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	461a      	mov	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a16      	ldr	r2, [pc, #88]	@ (80037bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003764:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	2201      	movs	r2, #1
 800376e:	409a      	lsls	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003774:	bf00      	nop
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	58025408 	.word	0x58025408
 8003784:	5802541c 	.word	0x5802541c
 8003788:	58025430 	.word	0x58025430
 800378c:	58025444 	.word	0x58025444
 8003790:	58025458 	.word	0x58025458
 8003794:	5802546c 	.word	0x5802546c
 8003798:	58025480 	.word	0x58025480
 800379c:	58025494 	.word	0x58025494
 80037a0:	cccccccd 	.word	0xcccccccd
 80037a4:	16009600 	.word	0x16009600
 80037a8:	58025880 	.word	0x58025880
 80037ac:	aaaaaaab 	.word	0xaaaaaaab
 80037b0:	400204b8 	.word	0x400204b8
 80037b4:	4002040f 	.word	0x4002040f
 80037b8:	10008200 	.word	0x10008200
 80037bc:	40020880 	.word	0x40020880

080037c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d04a      	beq.n	800386c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d847      	bhi.n	800386c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a25      	ldr	r2, [pc, #148]	@ (8003878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d022      	beq.n	800382c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a24      	ldr	r2, [pc, #144]	@ (800387c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d01d      	beq.n	800382c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a22      	ldr	r2, [pc, #136]	@ (8003880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d018      	beq.n	800382c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a21      	ldr	r2, [pc, #132]	@ (8003884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d013      	beq.n	800382c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a1f      	ldr	r2, [pc, #124]	@ (8003888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00e      	beq.n	800382c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1e      	ldr	r2, [pc, #120]	@ (800388c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d009      	beq.n	800382c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a1c      	ldr	r2, [pc, #112]	@ (8003890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d004      	beq.n	800382c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a1b      	ldr	r2, [pc, #108]	@ (8003894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d101      	bne.n	8003830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003830:	2300      	movs	r3, #0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00a      	beq.n	800384c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4b17      	ldr	r3, [pc, #92]	@ (8003898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800383a:	4413      	add	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	461a      	mov	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a15      	ldr	r2, [pc, #84]	@ (800389c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003848:	671a      	str	r2, [r3, #112]	@ 0x70
 800384a:	e009      	b.n	8003860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	4b14      	ldr	r3, [pc, #80]	@ (80038a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	461a      	mov	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a11      	ldr	r2, [pc, #68]	@ (80038a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800385e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	3b01      	subs	r3, #1
 8003864:	2201      	movs	r2, #1
 8003866:	409a      	lsls	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800386c:	bf00      	nop
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	58025408 	.word	0x58025408
 800387c:	5802541c 	.word	0x5802541c
 8003880:	58025430 	.word	0x58025430
 8003884:	58025444 	.word	0x58025444
 8003888:	58025458 	.word	0x58025458
 800388c:	5802546c 	.word	0x5802546c
 8003890:	58025480 	.word	0x58025480
 8003894:	58025494 	.word	0x58025494
 8003898:	1600963f 	.word	0x1600963f
 800389c:	58025940 	.word	0x58025940
 80038a0:	1000823f 	.word	0x1000823f
 80038a4:	40020940 	.word	0x40020940

080038a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b089      	sub	sp, #36	@ 0x24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80038b6:	4b89      	ldr	r3, [pc, #548]	@ (8003adc <HAL_GPIO_Init+0x234>)
 80038b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80038ba:	e194      	b.n	8003be6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	2101      	movs	r1, #1
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	fa01 f303 	lsl.w	r3, r1, r3
 80038c8:	4013      	ands	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 8186 	beq.w	8003be0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d005      	beq.n	80038ec <HAL_GPIO_Init+0x44>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d130      	bne.n	800394e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	2203      	movs	r2, #3
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003922:	2201      	movs	r2, #1
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	43db      	mvns	r3, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4013      	ands	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	091b      	lsrs	r3, r3, #4
 8003938:	f003 0201 	and.w	r2, r3, #1
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4313      	orrs	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	2b03      	cmp	r3, #3
 8003958:	d017      	beq.n	800398a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	2203      	movs	r2, #3
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	43db      	mvns	r3, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4013      	ands	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4313      	orrs	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d123      	bne.n	80039de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	08da      	lsrs	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3208      	adds	r2, #8
 800399e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	220f      	movs	r2, #15
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	43db      	mvns	r3, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4013      	ands	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	691a      	ldr	r2, [r3, #16]
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	08da      	lsrs	r2, r3, #3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3208      	adds	r2, #8
 80039d8:	69b9      	ldr	r1, [r7, #24]
 80039da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	2203      	movs	r2, #3
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43db      	mvns	r3, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4013      	ands	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f003 0203 	and.w	r2, r3, #3
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 80e0 	beq.w	8003be0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a20:	4b2f      	ldr	r3, [pc, #188]	@ (8003ae0 <HAL_GPIO_Init+0x238>)
 8003a22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a26:	4a2e      	ldr	r2, [pc, #184]	@ (8003ae0 <HAL_GPIO_Init+0x238>)
 8003a28:	f043 0302 	orr.w	r3, r3, #2
 8003a2c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003a30:	4b2b      	ldr	r3, [pc, #172]	@ (8003ae0 <HAL_GPIO_Init+0x238>)
 8003a32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a3e:	4a29      	ldr	r2, [pc, #164]	@ (8003ae4 <HAL_GPIO_Init+0x23c>)
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	089b      	lsrs	r3, r3, #2
 8003a44:	3302      	adds	r3, #2
 8003a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	220f      	movs	r2, #15
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a20      	ldr	r2, [pc, #128]	@ (8003ae8 <HAL_GPIO_Init+0x240>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d052      	beq.n	8003b10 <HAL_GPIO_Init+0x268>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8003aec <HAL_GPIO_Init+0x244>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d031      	beq.n	8003ad6 <HAL_GPIO_Init+0x22e>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a1e      	ldr	r2, [pc, #120]	@ (8003af0 <HAL_GPIO_Init+0x248>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d02b      	beq.n	8003ad2 <HAL_GPIO_Init+0x22a>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8003af4 <HAL_GPIO_Init+0x24c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d025      	beq.n	8003ace <HAL_GPIO_Init+0x226>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a1c      	ldr	r2, [pc, #112]	@ (8003af8 <HAL_GPIO_Init+0x250>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d01f      	beq.n	8003aca <HAL_GPIO_Init+0x222>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8003afc <HAL_GPIO_Init+0x254>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d019      	beq.n	8003ac6 <HAL_GPIO_Init+0x21e>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a1a      	ldr	r2, [pc, #104]	@ (8003b00 <HAL_GPIO_Init+0x258>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d013      	beq.n	8003ac2 <HAL_GPIO_Init+0x21a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a19      	ldr	r2, [pc, #100]	@ (8003b04 <HAL_GPIO_Init+0x25c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00d      	beq.n	8003abe <HAL_GPIO_Init+0x216>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a18      	ldr	r2, [pc, #96]	@ (8003b08 <HAL_GPIO_Init+0x260>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d007      	beq.n	8003aba <HAL_GPIO_Init+0x212>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a17      	ldr	r2, [pc, #92]	@ (8003b0c <HAL_GPIO_Init+0x264>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d101      	bne.n	8003ab6 <HAL_GPIO_Init+0x20e>
 8003ab2:	2309      	movs	r3, #9
 8003ab4:	e02d      	b.n	8003b12 <HAL_GPIO_Init+0x26a>
 8003ab6:	230a      	movs	r3, #10
 8003ab8:	e02b      	b.n	8003b12 <HAL_GPIO_Init+0x26a>
 8003aba:	2308      	movs	r3, #8
 8003abc:	e029      	b.n	8003b12 <HAL_GPIO_Init+0x26a>
 8003abe:	2307      	movs	r3, #7
 8003ac0:	e027      	b.n	8003b12 <HAL_GPIO_Init+0x26a>
 8003ac2:	2306      	movs	r3, #6
 8003ac4:	e025      	b.n	8003b12 <HAL_GPIO_Init+0x26a>
 8003ac6:	2305      	movs	r3, #5
 8003ac8:	e023      	b.n	8003b12 <HAL_GPIO_Init+0x26a>
 8003aca:	2304      	movs	r3, #4
 8003acc:	e021      	b.n	8003b12 <HAL_GPIO_Init+0x26a>
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e01f      	b.n	8003b12 <HAL_GPIO_Init+0x26a>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e01d      	b.n	8003b12 <HAL_GPIO_Init+0x26a>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e01b      	b.n	8003b12 <HAL_GPIO_Init+0x26a>
 8003ada:	bf00      	nop
 8003adc:	58000080 	.word	0x58000080
 8003ae0:	58024400 	.word	0x58024400
 8003ae4:	58000400 	.word	0x58000400
 8003ae8:	58020000 	.word	0x58020000
 8003aec:	58020400 	.word	0x58020400
 8003af0:	58020800 	.word	0x58020800
 8003af4:	58020c00 	.word	0x58020c00
 8003af8:	58021000 	.word	0x58021000
 8003afc:	58021400 	.word	0x58021400
 8003b00:	58021800 	.word	0x58021800
 8003b04:	58021c00 	.word	0x58021c00
 8003b08:	58022000 	.word	0x58022000
 8003b0c:	58022400 	.word	0x58022400
 8003b10:	2300      	movs	r3, #0
 8003b12:	69fa      	ldr	r2, [r7, #28]
 8003b14:	f002 0203 	and.w	r2, r2, #3
 8003b18:	0092      	lsls	r2, r2, #2
 8003b1a:	4093      	lsls	r3, r2
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b22:	4938      	ldr	r1, [pc, #224]	@ (8003c04 <HAL_GPIO_Init+0x35c>)
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	089b      	lsrs	r3, r3, #2
 8003b28:	3302      	adds	r3, #2
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003b56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003b84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	43db      	mvns	r3, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	3301      	adds	r3, #1
 8003be4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f47f ae63 	bne.w	80038bc <HAL_GPIO_Init+0x14>
  }
}
 8003bf6:	bf00      	nop
 8003bf8:	bf00      	nop
 8003bfa:	3724      	adds	r7, #36	@ 0x24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	58000400 	.word	0x58000400

08003c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	807b      	strh	r3, [r7, #2]
 8003c14:	4613      	mov	r3, r2
 8003c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c18:	787b      	ldrb	r3, [r7, #1]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c1e:	887a      	ldrh	r2, [r7, #2]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003c24:	e003      	b.n	8003c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c26:	887b      	ldrh	r3, [r7, #2]
 8003c28:	041a      	lsls	r2, r3, #16
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	619a      	str	r2, [r3, #24]
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b085      	sub	sp, #20
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	460b      	mov	r3, r1
 8003c44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c4c:	887a      	ldrh	r2, [r7, #2]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4013      	ands	r3, r2
 8003c52:	041a      	lsls	r2, r3, #16
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	43d9      	mvns	r1, r3
 8003c58:	887b      	ldrh	r3, [r7, #2]
 8003c5a:	400b      	ands	r3, r1
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	619a      	str	r2, [r3, #24]
}
 8003c62:	bf00      	nop
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
	...

08003c70 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003c78:	4b19      	ldr	r3, [pc, #100]	@ (8003ce0 <HAL_PWREx_ConfigSupply+0x70>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d00a      	beq.n	8003c9a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003c84:	4b16      	ldr	r3, [pc, #88]	@ (8003ce0 <HAL_PWREx_ConfigSupply+0x70>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d001      	beq.n	8003c96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e01f      	b.n	8003cd6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	e01d      	b.n	8003cd6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003c9a:	4b11      	ldr	r3, [pc, #68]	@ (8003ce0 <HAL_PWREx_ConfigSupply+0x70>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f023 0207 	bic.w	r2, r3, #7
 8003ca2:	490f      	ldr	r1, [pc, #60]	@ (8003ce0 <HAL_PWREx_ConfigSupply+0x70>)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003caa:	f7fd fa37 	bl	800111c <HAL_GetTick>
 8003cae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003cb0:	e009      	b.n	8003cc6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003cb2:	f7fd fa33 	bl	800111c <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003cc0:	d901      	bls.n	8003cc6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e007      	b.n	8003cd6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003cc6:	4b06      	ldr	r3, [pc, #24]	@ (8003ce0 <HAL_PWREx_ConfigSupply+0x70>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cd2:	d1ee      	bne.n	8003cb2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	58024800 	.word	0x58024800

08003ce4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08c      	sub	sp, #48	@ 0x30
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d102      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	f000 bc48 	b.w	8004588 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 8088 	beq.w	8003e16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d06:	4b99      	ldr	r3, [pc, #612]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d10:	4b96      	ldr	r3, [pc, #600]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d14:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d18:	2b10      	cmp	r3, #16
 8003d1a:	d007      	beq.n	8003d2c <HAL_RCC_OscConfig+0x48>
 8003d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d1e:	2b18      	cmp	r3, #24
 8003d20:	d111      	bne.n	8003d46 <HAL_RCC_OscConfig+0x62>
 8003d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d24:	f003 0303 	and.w	r3, r3, #3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d10c      	bne.n	8003d46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2c:	4b8f      	ldr	r3, [pc, #572]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d06d      	beq.n	8003e14 <HAL_RCC_OscConfig+0x130>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d169      	bne.n	8003e14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	f000 bc21 	b.w	8004588 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d4e:	d106      	bne.n	8003d5e <HAL_RCC_OscConfig+0x7a>
 8003d50:	4b86      	ldr	r3, [pc, #536]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a85      	ldr	r2, [pc, #532]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003d56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	e02e      	b.n	8003dbc <HAL_RCC_OscConfig+0xd8>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x9c>
 8003d66:	4b81      	ldr	r3, [pc, #516]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a80      	ldr	r2, [pc, #512]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003d6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	4b7e      	ldr	r3, [pc, #504]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a7d      	ldr	r2, [pc, #500]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003d78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e01d      	b.n	8003dbc <HAL_RCC_OscConfig+0xd8>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCC_OscConfig+0xc0>
 8003d8a:	4b78      	ldr	r3, [pc, #480]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a77      	ldr	r2, [pc, #476]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003d90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	4b75      	ldr	r3, [pc, #468]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a74      	ldr	r2, [pc, #464]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	e00b      	b.n	8003dbc <HAL_RCC_OscConfig+0xd8>
 8003da4:	4b71      	ldr	r3, [pc, #452]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a70      	ldr	r2, [pc, #448]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003daa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	4b6e      	ldr	r3, [pc, #440]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a6d      	ldr	r2, [pc, #436]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003db6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d013      	beq.n	8003dec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7fd f9aa 	bl	800111c <HAL_GetTick>
 8003dc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dcc:	f7fd f9a6 	bl	800111c <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b64      	cmp	r3, #100	@ 0x64
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e3d4      	b.n	8004588 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003dde:	4b63      	ldr	r3, [pc, #396]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0xe8>
 8003dea:	e014      	b.n	8003e16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dec:	f7fd f996 	bl	800111c <HAL_GetTick>
 8003df0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003df4:	f7fd f992 	bl	800111c <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b64      	cmp	r3, #100	@ 0x64
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e3c0      	b.n	8004588 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e06:	4b59      	ldr	r3, [pc, #356]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0x110>
 8003e12:	e000      	b.n	8003e16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 80ca 	beq.w	8003fb8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e24:	4b51      	ldr	r3, [pc, #324]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e2c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e2e:	4b4f      	ldr	r3, [pc, #316]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e32:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d007      	beq.n	8003e4a <HAL_RCC_OscConfig+0x166>
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	2b18      	cmp	r3, #24
 8003e3e:	d156      	bne.n	8003eee <HAL_RCC_OscConfig+0x20a>
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d151      	bne.n	8003eee <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e4a:	4b48      	ldr	r3, [pc, #288]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d005      	beq.n	8003e62 <HAL_RCC_OscConfig+0x17e>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e392      	b.n	8004588 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003e62:	4b42      	ldr	r3, [pc, #264]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f023 0219 	bic.w	r2, r3, #25
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	493f      	ldr	r1, [pc, #252]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e74:	f7fd f952 	bl	800111c <HAL_GetTick>
 8003e78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e7c:	f7fd f94e 	bl	800111c <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e37c      	b.n	8004588 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e8e:	4b37      	ldr	r3, [pc, #220]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0f0      	beq.n	8003e7c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e9a:	f7fd f94b 	bl	8001134 <HAL_GetREVID>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d817      	bhi.n	8003ed8 <HAL_RCC_OscConfig+0x1f4>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	2b40      	cmp	r3, #64	@ 0x40
 8003eae:	d108      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x1de>
 8003eb0:	4b2e      	ldr	r3, [pc, #184]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003eb8:	4a2c      	ldr	r2, [pc, #176]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003eba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ebe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ec0:	e07a      	b.n	8003fb8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	031b      	lsls	r3, r3, #12
 8003ed0:	4926      	ldr	r1, [pc, #152]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ed6:	e06f      	b.n	8003fb8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed8:	4b24      	ldr	r3, [pc, #144]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	061b      	lsls	r3, r3, #24
 8003ee6:	4921      	ldr	r1, [pc, #132]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003eec:	e064      	b.n	8003fb8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d047      	beq.n	8003f86 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f023 0219 	bic.w	r2, r3, #25
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	491a      	ldr	r1, [pc, #104]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f08:	f7fd f908 	bl	800111c <HAL_GetTick>
 8003f0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f10:	f7fd f904 	bl	800111c <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e332      	b.n	8004588 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f22:	4b12      	ldr	r3, [pc, #72]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2e:	f7fd f901 	bl	8001134 <HAL_GetREVID>
 8003f32:	4603      	mov	r3, r0
 8003f34:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d819      	bhi.n	8003f70 <HAL_RCC_OscConfig+0x28c>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	2b40      	cmp	r3, #64	@ 0x40
 8003f42:	d108      	bne.n	8003f56 <HAL_RCC_OscConfig+0x272>
 8003f44:	4b09      	ldr	r3, [pc, #36]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003f4c:	4a07      	ldr	r2, [pc, #28]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f52:	6053      	str	r3, [r2, #4]
 8003f54:	e030      	b.n	8003fb8 <HAL_RCC_OscConfig+0x2d4>
 8003f56:	4b05      	ldr	r3, [pc, #20]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	031b      	lsls	r3, r3, #12
 8003f64:	4901      	ldr	r1, [pc, #4]	@ (8003f6c <HAL_RCC_OscConfig+0x288>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	604b      	str	r3, [r1, #4]
 8003f6a:	e025      	b.n	8003fb8 <HAL_RCC_OscConfig+0x2d4>
 8003f6c:	58024400 	.word	0x58024400
 8003f70:	4b9a      	ldr	r3, [pc, #616]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	061b      	lsls	r3, r3, #24
 8003f7e:	4997      	ldr	r1, [pc, #604]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	604b      	str	r3, [r1, #4]
 8003f84:	e018      	b.n	8003fb8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f86:	4b95      	ldr	r3, [pc, #596]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a94      	ldr	r2, [pc, #592]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 8003f8c:	f023 0301 	bic.w	r3, r3, #1
 8003f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f92:	f7fd f8c3 	bl	800111c <HAL_GetTick>
 8003f96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f9a:	f7fd f8bf 	bl	800111c <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e2ed      	b.n	8004588 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fac:	4b8b      	ldr	r3, [pc, #556]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f0      	bne.n	8003f9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0310 	and.w	r3, r3, #16
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 80a9 	beq.w	8004118 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fc6:	4b85      	ldr	r3, [pc, #532]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fd0:	4b82      	ldr	r3, [pc, #520]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d007      	beq.n	8003fec <HAL_RCC_OscConfig+0x308>
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	2b18      	cmp	r3, #24
 8003fe0:	d13a      	bne.n	8004058 <HAL_RCC_OscConfig+0x374>
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f003 0303 	and.w	r3, r3, #3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d135      	bne.n	8004058 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003fec:	4b7b      	ldr	r3, [pc, #492]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <HAL_RCC_OscConfig+0x320>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	2b80      	cmp	r3, #128	@ 0x80
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e2c1      	b.n	8004588 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004004:	f7fd f896 	bl	8001134 <HAL_GetREVID>
 8004008:	4603      	mov	r3, r0
 800400a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800400e:	4293      	cmp	r3, r2
 8004010:	d817      	bhi.n	8004042 <HAL_RCC_OscConfig+0x35e>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	2b20      	cmp	r3, #32
 8004018:	d108      	bne.n	800402c <HAL_RCC_OscConfig+0x348>
 800401a:	4b70      	ldr	r3, [pc, #448]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004022:	4a6e      	ldr	r2, [pc, #440]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 8004024:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004028:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800402a:	e075      	b.n	8004118 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800402c:	4b6b      	ldr	r3, [pc, #428]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	069b      	lsls	r3, r3, #26
 800403a:	4968      	ldr	r1, [pc, #416]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 800403c:	4313      	orrs	r3, r2
 800403e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004040:	e06a      	b.n	8004118 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004042:	4b66      	ldr	r3, [pc, #408]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	061b      	lsls	r3, r3, #24
 8004050:	4962      	ldr	r1, [pc, #392]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 8004052:	4313      	orrs	r3, r2
 8004054:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004056:	e05f      	b.n	8004118 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d042      	beq.n	80040e6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004060:	4b5e      	ldr	r3, [pc, #376]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a5d      	ldr	r2, [pc, #372]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 8004066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800406a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406c:	f7fd f856 	bl	800111c <HAL_GetTick>
 8004070:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004074:	f7fd f852 	bl	800111c <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e280      	b.n	8004588 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004086:	4b55      	ldr	r3, [pc, #340]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004092:	f7fd f84f 	bl	8001134 <HAL_GetREVID>
 8004096:	4603      	mov	r3, r0
 8004098:	f241 0203 	movw	r2, #4099	@ 0x1003
 800409c:	4293      	cmp	r3, r2
 800409e:	d817      	bhi.n	80040d0 <HAL_RCC_OscConfig+0x3ec>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	2b20      	cmp	r3, #32
 80040a6:	d108      	bne.n	80040ba <HAL_RCC_OscConfig+0x3d6>
 80040a8:	4b4c      	ldr	r3, [pc, #304]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80040b0:	4a4a      	ldr	r2, [pc, #296]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 80040b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80040b6:	6053      	str	r3, [r2, #4]
 80040b8:	e02e      	b.n	8004118 <HAL_RCC_OscConfig+0x434>
 80040ba:	4b48      	ldr	r3, [pc, #288]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	069b      	lsls	r3, r3, #26
 80040c8:	4944      	ldr	r1, [pc, #272]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	604b      	str	r3, [r1, #4]
 80040ce:	e023      	b.n	8004118 <HAL_RCC_OscConfig+0x434>
 80040d0:	4b42      	ldr	r3, [pc, #264]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	061b      	lsls	r3, r3, #24
 80040de:	493f      	ldr	r1, [pc, #252]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60cb      	str	r3, [r1, #12]
 80040e4:	e018      	b.n	8004118 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80040e6:	4b3d      	ldr	r3, [pc, #244]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a3c      	ldr	r2, [pc, #240]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 80040ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f2:	f7fd f813 	bl	800111c <HAL_GetTick>
 80040f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80040fa:	f7fd f80f 	bl	800111c <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e23d      	b.n	8004588 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800410c:	4b33      	ldr	r3, [pc, #204]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1f0      	bne.n	80040fa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d036      	beq.n	8004192 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d019      	beq.n	8004160 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800412c:	4b2b      	ldr	r3, [pc, #172]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 800412e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004130:	4a2a      	ldr	r2, [pc, #168]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 8004132:	f043 0301 	orr.w	r3, r3, #1
 8004136:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004138:	f7fc fff0 	bl	800111c <HAL_GetTick>
 800413c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004140:	f7fc ffec 	bl	800111c <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e21a      	b.n	8004588 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004152:	4b22      	ldr	r3, [pc, #136]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 8004154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0x45c>
 800415e:	e018      	b.n	8004192 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004160:	4b1e      	ldr	r3, [pc, #120]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 8004162:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004164:	4a1d      	ldr	r2, [pc, #116]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 8004166:	f023 0301 	bic.w	r3, r3, #1
 800416a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416c:	f7fc ffd6 	bl	800111c <HAL_GetTick>
 8004170:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004174:	f7fc ffd2 	bl	800111c <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e200      	b.n	8004588 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004186:	4b15      	ldr	r3, [pc, #84]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 8004188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0320 	and.w	r3, r3, #32
 800419a:	2b00      	cmp	r3, #0
 800419c:	d039      	beq.n	8004212 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d01c      	beq.n	80041e0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041a6:	4b0d      	ldr	r3, [pc, #52]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a0c      	ldr	r2, [pc, #48]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 80041ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80041b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80041b2:	f7fc ffb3 	bl	800111c <HAL_GetTick>
 80041b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041ba:	f7fc ffaf 	bl	800111c <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e1dd      	b.n	8004588 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80041cc:	4b03      	ldr	r3, [pc, #12]	@ (80041dc <HAL_RCC_OscConfig+0x4f8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0f0      	beq.n	80041ba <HAL_RCC_OscConfig+0x4d6>
 80041d8:	e01b      	b.n	8004212 <HAL_RCC_OscConfig+0x52e>
 80041da:	bf00      	nop
 80041dc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041e0:	4b9b      	ldr	r3, [pc, #620]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a9a      	ldr	r2, [pc, #616]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 80041e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80041ec:	f7fc ff96 	bl	800111c <HAL_GetTick>
 80041f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041f4:	f7fc ff92 	bl	800111c <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e1c0      	b.n	8004588 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004206:	4b92      	ldr	r3, [pc, #584]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1f0      	bne.n	80041f4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0304 	and.w	r3, r3, #4
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 8081 	beq.w	8004322 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004220:	4b8c      	ldr	r3, [pc, #560]	@ (8004454 <HAL_RCC_OscConfig+0x770>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a8b      	ldr	r2, [pc, #556]	@ (8004454 <HAL_RCC_OscConfig+0x770>)
 8004226:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800422a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800422c:	f7fc ff76 	bl	800111c <HAL_GetTick>
 8004230:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004234:	f7fc ff72 	bl	800111c <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b64      	cmp	r3, #100	@ 0x64
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e1a0      	b.n	8004588 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004246:	4b83      	ldr	r3, [pc, #524]	@ (8004454 <HAL_RCC_OscConfig+0x770>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d106      	bne.n	8004268 <HAL_RCC_OscConfig+0x584>
 800425a:	4b7d      	ldr	r3, [pc, #500]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 800425c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800425e:	4a7c      	ldr	r2, [pc, #496]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	6713      	str	r3, [r2, #112]	@ 0x70
 8004266:	e02d      	b.n	80042c4 <HAL_RCC_OscConfig+0x5e0>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10c      	bne.n	800428a <HAL_RCC_OscConfig+0x5a6>
 8004270:	4b77      	ldr	r3, [pc, #476]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 8004272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004274:	4a76      	ldr	r2, [pc, #472]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 8004276:	f023 0301 	bic.w	r3, r3, #1
 800427a:	6713      	str	r3, [r2, #112]	@ 0x70
 800427c:	4b74      	ldr	r3, [pc, #464]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 800427e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004280:	4a73      	ldr	r2, [pc, #460]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 8004282:	f023 0304 	bic.w	r3, r3, #4
 8004286:	6713      	str	r3, [r2, #112]	@ 0x70
 8004288:	e01c      	b.n	80042c4 <HAL_RCC_OscConfig+0x5e0>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b05      	cmp	r3, #5
 8004290:	d10c      	bne.n	80042ac <HAL_RCC_OscConfig+0x5c8>
 8004292:	4b6f      	ldr	r3, [pc, #444]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 8004294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004296:	4a6e      	ldr	r2, [pc, #440]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 8004298:	f043 0304 	orr.w	r3, r3, #4
 800429c:	6713      	str	r3, [r2, #112]	@ 0x70
 800429e:	4b6c      	ldr	r3, [pc, #432]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 80042a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a2:	4a6b      	ldr	r2, [pc, #428]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80042aa:	e00b      	b.n	80042c4 <HAL_RCC_OscConfig+0x5e0>
 80042ac:	4b68      	ldr	r3, [pc, #416]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 80042ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b0:	4a67      	ldr	r2, [pc, #412]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 80042b2:	f023 0301 	bic.w	r3, r3, #1
 80042b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80042b8:	4b65      	ldr	r3, [pc, #404]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 80042ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042bc:	4a64      	ldr	r2, [pc, #400]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 80042be:	f023 0304 	bic.w	r3, r3, #4
 80042c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d015      	beq.n	80042f8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042cc:	f7fc ff26 	bl	800111c <HAL_GetTick>
 80042d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042d2:	e00a      	b.n	80042ea <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d4:	f7fc ff22 	bl	800111c <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e14e      	b.n	8004588 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042ea:	4b59      	ldr	r3, [pc, #356]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 80042ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0ee      	beq.n	80042d4 <HAL_RCC_OscConfig+0x5f0>
 80042f6:	e014      	b.n	8004322 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f8:	f7fc ff10 	bl	800111c <HAL_GetTick>
 80042fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042fe:	e00a      	b.n	8004316 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004300:	f7fc ff0c 	bl	800111c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800430e:	4293      	cmp	r3, r2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e138      	b.n	8004588 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004316:	4b4e      	ldr	r3, [pc, #312]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 8004318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1ee      	bne.n	8004300 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 812d 	beq.w	8004586 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800432c:	4b48      	ldr	r3, [pc, #288]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004334:	2b18      	cmp	r3, #24
 8004336:	f000 80bd 	beq.w	80044b4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433e:	2b02      	cmp	r3, #2
 8004340:	f040 809e 	bne.w	8004480 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004344:	4b42      	ldr	r3, [pc, #264]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a41      	ldr	r2, [pc, #260]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 800434a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800434e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7fc fee4 	bl	800111c <HAL_GetTick>
 8004354:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004358:	f7fc fee0 	bl	800111c <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e10e      	b.n	8004588 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800436a:	4b39      	ldr	r3, [pc, #228]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f0      	bne.n	8004358 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004376:	4b36      	ldr	r3, [pc, #216]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 8004378:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800437a:	4b37      	ldr	r3, [pc, #220]	@ (8004458 <HAL_RCC_OscConfig+0x774>)
 800437c:	4013      	ands	r3, r2
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004386:	0112      	lsls	r2, r2, #4
 8004388:	430a      	orrs	r2, r1
 800438a:	4931      	ldr	r1, [pc, #196]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 800438c:	4313      	orrs	r3, r2
 800438e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004394:	3b01      	subs	r3, #1
 8004396:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800439e:	3b01      	subs	r3, #1
 80043a0:	025b      	lsls	r3, r3, #9
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043aa:	3b01      	subs	r3, #1
 80043ac:	041b      	lsls	r3, r3, #16
 80043ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b8:	3b01      	subs	r3, #1
 80043ba:	061b      	lsls	r3, r3, #24
 80043bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80043c0:	4923      	ldr	r1, [pc, #140]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80043c6:	4b22      	ldr	r3, [pc, #136]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 80043c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ca:	4a21      	ldr	r2, [pc, #132]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 80043cc:	f023 0301 	bic.w	r3, r3, #1
 80043d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80043d2:	4b1f      	ldr	r3, [pc, #124]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 80043d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043d6:	4b21      	ldr	r3, [pc, #132]	@ (800445c <HAL_RCC_OscConfig+0x778>)
 80043d8:	4013      	ands	r3, r2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80043de:	00d2      	lsls	r2, r2, #3
 80043e0:	491b      	ldr	r1, [pc, #108]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80043e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 80043e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ea:	f023 020c 	bic.w	r2, r3, #12
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f2:	4917      	ldr	r1, [pc, #92]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80043f8:	4b15      	ldr	r3, [pc, #84]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 80043fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fc:	f023 0202 	bic.w	r2, r3, #2
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004404:	4912      	ldr	r1, [pc, #72]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 8004406:	4313      	orrs	r3, r2
 8004408:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800440a:	4b11      	ldr	r3, [pc, #68]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 800440c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440e:	4a10      	ldr	r2, [pc, #64]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 8004410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004414:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004416:	4b0e      	ldr	r3, [pc, #56]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 8004418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441a:	4a0d      	ldr	r2, [pc, #52]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 800441c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004420:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004422:	4b0b      	ldr	r3, [pc, #44]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 8004424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004426:	4a0a      	ldr	r2, [pc, #40]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 8004428:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800442c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800442e:	4b08      	ldr	r3, [pc, #32]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 8004430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004432:	4a07      	ldr	r2, [pc, #28]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 8004434:	f043 0301 	orr.w	r3, r3, #1
 8004438:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800443a:	4b05      	ldr	r3, [pc, #20]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a04      	ldr	r2, [pc, #16]	@ (8004450 <HAL_RCC_OscConfig+0x76c>)
 8004440:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004446:	f7fc fe69 	bl	800111c <HAL_GetTick>
 800444a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800444c:	e011      	b.n	8004472 <HAL_RCC_OscConfig+0x78e>
 800444e:	bf00      	nop
 8004450:	58024400 	.word	0x58024400
 8004454:	58024800 	.word	0x58024800
 8004458:	fffffc0c 	.word	0xfffffc0c
 800445c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004460:	f7fc fe5c 	bl	800111c <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e08a      	b.n	8004588 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004472:	4b47      	ldr	r3, [pc, #284]	@ (8004590 <HAL_RCC_OscConfig+0x8ac>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f0      	beq.n	8004460 <HAL_RCC_OscConfig+0x77c>
 800447e:	e082      	b.n	8004586 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004480:	4b43      	ldr	r3, [pc, #268]	@ (8004590 <HAL_RCC_OscConfig+0x8ac>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a42      	ldr	r2, [pc, #264]	@ (8004590 <HAL_RCC_OscConfig+0x8ac>)
 8004486:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800448a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448c:	f7fc fe46 	bl	800111c <HAL_GetTick>
 8004490:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004494:	f7fc fe42 	bl	800111c <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e070      	b.n	8004588 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044a6:	4b3a      	ldr	r3, [pc, #232]	@ (8004590 <HAL_RCC_OscConfig+0x8ac>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1f0      	bne.n	8004494 <HAL_RCC_OscConfig+0x7b0>
 80044b2:	e068      	b.n	8004586 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80044b4:	4b36      	ldr	r3, [pc, #216]	@ (8004590 <HAL_RCC_OscConfig+0x8ac>)
 80044b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80044ba:	4b35      	ldr	r3, [pc, #212]	@ (8004590 <HAL_RCC_OscConfig+0x8ac>)
 80044bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044be:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d031      	beq.n	800452c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f003 0203 	and.w	r2, r3, #3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d12a      	bne.n	800452c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	091b      	lsrs	r3, r3, #4
 80044da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d122      	bne.n	800452c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d11a      	bne.n	800452c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	0a5b      	lsrs	r3, r3, #9
 80044fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004502:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004504:	429a      	cmp	r2, r3
 8004506:	d111      	bne.n	800452c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	0c1b      	lsrs	r3, r3, #16
 800450c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004514:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004516:	429a      	cmp	r2, r3
 8004518:	d108      	bne.n	800452c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	0e1b      	lsrs	r3, r3, #24
 800451e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004526:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004528:	429a      	cmp	r2, r3
 800452a:	d001      	beq.n	8004530 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e02b      	b.n	8004588 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004530:	4b17      	ldr	r3, [pc, #92]	@ (8004590 <HAL_RCC_OscConfig+0x8ac>)
 8004532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004534:	08db      	lsrs	r3, r3, #3
 8004536:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800453a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	429a      	cmp	r2, r3
 8004544:	d01f      	beq.n	8004586 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004546:	4b12      	ldr	r3, [pc, #72]	@ (8004590 <HAL_RCC_OscConfig+0x8ac>)
 8004548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454a:	4a11      	ldr	r2, [pc, #68]	@ (8004590 <HAL_RCC_OscConfig+0x8ac>)
 800454c:	f023 0301 	bic.w	r3, r3, #1
 8004550:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004552:	f7fc fde3 	bl	800111c <HAL_GetTick>
 8004556:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004558:	bf00      	nop
 800455a:	f7fc fddf 	bl	800111c <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004562:	4293      	cmp	r3, r2
 8004564:	d0f9      	beq.n	800455a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004566:	4b0a      	ldr	r3, [pc, #40]	@ (8004590 <HAL_RCC_OscConfig+0x8ac>)
 8004568:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800456a:	4b0a      	ldr	r3, [pc, #40]	@ (8004594 <HAL_RCC_OscConfig+0x8b0>)
 800456c:	4013      	ands	r3, r2
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004572:	00d2      	lsls	r2, r2, #3
 8004574:	4906      	ldr	r1, [pc, #24]	@ (8004590 <HAL_RCC_OscConfig+0x8ac>)
 8004576:	4313      	orrs	r3, r2
 8004578:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800457a:	4b05      	ldr	r3, [pc, #20]	@ (8004590 <HAL_RCC_OscConfig+0x8ac>)
 800457c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457e:	4a04      	ldr	r2, [pc, #16]	@ (8004590 <HAL_RCC_OscConfig+0x8ac>)
 8004580:	f043 0301 	orr.w	r3, r3, #1
 8004584:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3730      	adds	r7, #48	@ 0x30
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	58024400 	.word	0x58024400
 8004594:	ffff0007 	.word	0xffff0007

08004598 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e19c      	b.n	80048e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045ac:	4b8a      	ldr	r3, [pc, #552]	@ (80047d8 <HAL_RCC_ClockConfig+0x240>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d910      	bls.n	80045dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ba:	4b87      	ldr	r3, [pc, #540]	@ (80047d8 <HAL_RCC_ClockConfig+0x240>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f023 020f 	bic.w	r2, r3, #15
 80045c2:	4985      	ldr	r1, [pc, #532]	@ (80047d8 <HAL_RCC_ClockConfig+0x240>)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ca:	4b83      	ldr	r3, [pc, #524]	@ (80047d8 <HAL_RCC_ClockConfig+0x240>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d001      	beq.n	80045dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e184      	b.n	80048e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d010      	beq.n	800460a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	4b7b      	ldr	r3, [pc, #492]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d908      	bls.n	800460a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045f8:	4b78      	ldr	r3, [pc, #480]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	4975      	ldr	r1, [pc, #468]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004606:	4313      	orrs	r3, r2
 8004608:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d010      	beq.n	8004638 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695a      	ldr	r2, [r3, #20]
 800461a:	4b70      	ldr	r3, [pc, #448]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004622:	429a      	cmp	r2, r3
 8004624:	d908      	bls.n	8004638 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004626:	4b6d      	ldr	r3, [pc, #436]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	496a      	ldr	r1, [pc, #424]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004634:	4313      	orrs	r3, r2
 8004636:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	2b00      	cmp	r3, #0
 8004642:	d010      	beq.n	8004666 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699a      	ldr	r2, [r3, #24]
 8004648:	4b64      	ldr	r3, [pc, #400]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004650:	429a      	cmp	r2, r3
 8004652:	d908      	bls.n	8004666 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004654:	4b61      	ldr	r3, [pc, #388]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	495e      	ldr	r1, [pc, #376]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004662:	4313      	orrs	r3, r2
 8004664:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b00      	cmp	r3, #0
 8004670:	d010      	beq.n	8004694 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69da      	ldr	r2, [r3, #28]
 8004676:	4b59      	ldr	r3, [pc, #356]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800467e:	429a      	cmp	r2, r3
 8004680:	d908      	bls.n	8004694 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004682:	4b56      	ldr	r3, [pc, #344]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	4953      	ldr	r1, [pc, #332]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004690:	4313      	orrs	r3, r2
 8004692:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d010      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	4b4d      	ldr	r3, [pc, #308]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d908      	bls.n	80046c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046b0:	4b4a      	ldr	r3, [pc, #296]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	f023 020f 	bic.w	r2, r3, #15
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	4947      	ldr	r1, [pc, #284]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d055      	beq.n	800477a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80046ce:	4b43      	ldr	r3, [pc, #268]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	4940      	ldr	r1, [pc, #256]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d107      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046e8:	4b3c      	ldr	r3, [pc, #240]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d121      	bne.n	8004738 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0f6      	b.n	80048e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d107      	bne.n	8004710 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004700:	4b36      	ldr	r3, [pc, #216]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d115      	bne.n	8004738 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e0ea      	b.n	80048e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d107      	bne.n	8004728 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004718:	4b30      	ldr	r3, [pc, #192]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004720:	2b00      	cmp	r3, #0
 8004722:	d109      	bne.n	8004738 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0de      	b.n	80048e6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004728:	4b2c      	ldr	r3, [pc, #176]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e0d6      	b.n	80048e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004738:	4b28      	ldr	r3, [pc, #160]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	f023 0207 	bic.w	r2, r3, #7
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	4925      	ldr	r1, [pc, #148]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004746:	4313      	orrs	r3, r2
 8004748:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800474a:	f7fc fce7 	bl	800111c <HAL_GetTick>
 800474e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004750:	e00a      	b.n	8004768 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004752:	f7fc fce3 	bl	800111c <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004760:	4293      	cmp	r3, r2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e0be      	b.n	80048e6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004768:	4b1c      	ldr	r3, [pc, #112]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	429a      	cmp	r2, r3
 8004778:	d1eb      	bne.n	8004752 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d010      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	4b14      	ldr	r3, [pc, #80]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	429a      	cmp	r2, r3
 8004794:	d208      	bcs.n	80047a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004796:	4b11      	ldr	r3, [pc, #68]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	f023 020f 	bic.w	r2, r3, #15
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	490e      	ldr	r1, [pc, #56]	@ (80047dc <HAL_RCC_ClockConfig+0x244>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047a8:	4b0b      	ldr	r3, [pc, #44]	@ (80047d8 <HAL_RCC_ClockConfig+0x240>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 030f 	and.w	r3, r3, #15
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d214      	bcs.n	80047e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b6:	4b08      	ldr	r3, [pc, #32]	@ (80047d8 <HAL_RCC_ClockConfig+0x240>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f023 020f 	bic.w	r2, r3, #15
 80047be:	4906      	ldr	r1, [pc, #24]	@ (80047d8 <HAL_RCC_ClockConfig+0x240>)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c6:	4b04      	ldr	r3, [pc, #16]	@ (80047d8 <HAL_RCC_ClockConfig+0x240>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d005      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e086      	b.n	80048e6 <HAL_RCC_ClockConfig+0x34e>
 80047d8:	52002000 	.word	0x52002000
 80047dc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d010      	beq.n	800480e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	4b3f      	ldr	r3, [pc, #252]	@ (80048f0 <HAL_RCC_ClockConfig+0x358>)
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d208      	bcs.n	800480e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047fc:	4b3c      	ldr	r3, [pc, #240]	@ (80048f0 <HAL_RCC_ClockConfig+0x358>)
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	4939      	ldr	r1, [pc, #228]	@ (80048f0 <HAL_RCC_ClockConfig+0x358>)
 800480a:	4313      	orrs	r3, r2
 800480c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d010      	beq.n	800483c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	4b34      	ldr	r3, [pc, #208]	@ (80048f0 <HAL_RCC_ClockConfig+0x358>)
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004826:	429a      	cmp	r2, r3
 8004828:	d208      	bcs.n	800483c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800482a:	4b31      	ldr	r3, [pc, #196]	@ (80048f0 <HAL_RCC_ClockConfig+0x358>)
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	492e      	ldr	r1, [pc, #184]	@ (80048f0 <HAL_RCC_ClockConfig+0x358>)
 8004838:	4313      	orrs	r3, r2
 800483a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	2b00      	cmp	r3, #0
 8004846:	d010      	beq.n	800486a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699a      	ldr	r2, [r3, #24]
 800484c:	4b28      	ldr	r3, [pc, #160]	@ (80048f0 <HAL_RCC_ClockConfig+0x358>)
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004854:	429a      	cmp	r2, r3
 8004856:	d208      	bcs.n	800486a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004858:	4b25      	ldr	r3, [pc, #148]	@ (80048f0 <HAL_RCC_ClockConfig+0x358>)
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	4922      	ldr	r1, [pc, #136]	@ (80048f0 <HAL_RCC_ClockConfig+0x358>)
 8004866:	4313      	orrs	r3, r2
 8004868:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b00      	cmp	r3, #0
 8004874:	d010      	beq.n	8004898 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69da      	ldr	r2, [r3, #28]
 800487a:	4b1d      	ldr	r3, [pc, #116]	@ (80048f0 <HAL_RCC_ClockConfig+0x358>)
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004882:	429a      	cmp	r2, r3
 8004884:	d208      	bcs.n	8004898 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004886:	4b1a      	ldr	r3, [pc, #104]	@ (80048f0 <HAL_RCC_ClockConfig+0x358>)
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	4917      	ldr	r1, [pc, #92]	@ (80048f0 <HAL_RCC_ClockConfig+0x358>)
 8004894:	4313      	orrs	r3, r2
 8004896:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004898:	f000 f834 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 800489c:	4602      	mov	r2, r0
 800489e:	4b14      	ldr	r3, [pc, #80]	@ (80048f0 <HAL_RCC_ClockConfig+0x358>)
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	0a1b      	lsrs	r3, r3, #8
 80048a4:	f003 030f 	and.w	r3, r3, #15
 80048a8:	4912      	ldr	r1, [pc, #72]	@ (80048f4 <HAL_RCC_ClockConfig+0x35c>)
 80048aa:	5ccb      	ldrb	r3, [r1, r3]
 80048ac:	f003 031f 	and.w	r3, r3, #31
 80048b0:	fa22 f303 	lsr.w	r3, r2, r3
 80048b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048b6:	4b0e      	ldr	r3, [pc, #56]	@ (80048f0 <HAL_RCC_ClockConfig+0x358>)
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	4a0d      	ldr	r2, [pc, #52]	@ (80048f4 <HAL_RCC_ClockConfig+0x35c>)
 80048c0:	5cd3      	ldrb	r3, [r2, r3]
 80048c2:	f003 031f 	and.w	r3, r3, #31
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	fa22 f303 	lsr.w	r3, r2, r3
 80048cc:	4a0a      	ldr	r2, [pc, #40]	@ (80048f8 <HAL_RCC_ClockConfig+0x360>)
 80048ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048d0:	4a0a      	ldr	r2, [pc, #40]	@ (80048fc <HAL_RCC_ClockConfig+0x364>)
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80048d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004900 <HAL_RCC_ClockConfig+0x368>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fc fbd4 	bl	8001088 <HAL_InitTick>
 80048e0:	4603      	mov	r3, r0
 80048e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	58024400 	.word	0x58024400
 80048f4:	080091d0 	.word	0x080091d0
 80048f8:	24000004 	.word	0x24000004
 80048fc:	24000000 	.word	0x24000000
 8004900:	24000008 	.word	0x24000008

08004904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004904:	b480      	push	{r7}
 8004906:	b089      	sub	sp, #36	@ 0x24
 8004908:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800490a:	4bb3      	ldr	r3, [pc, #716]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004912:	2b18      	cmp	r3, #24
 8004914:	f200 8155 	bhi.w	8004bc2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004918:	a201      	add	r2, pc, #4	@ (adr r2, 8004920 <HAL_RCC_GetSysClockFreq+0x1c>)
 800491a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491e:	bf00      	nop
 8004920:	08004985 	.word	0x08004985
 8004924:	08004bc3 	.word	0x08004bc3
 8004928:	08004bc3 	.word	0x08004bc3
 800492c:	08004bc3 	.word	0x08004bc3
 8004930:	08004bc3 	.word	0x08004bc3
 8004934:	08004bc3 	.word	0x08004bc3
 8004938:	08004bc3 	.word	0x08004bc3
 800493c:	08004bc3 	.word	0x08004bc3
 8004940:	080049ab 	.word	0x080049ab
 8004944:	08004bc3 	.word	0x08004bc3
 8004948:	08004bc3 	.word	0x08004bc3
 800494c:	08004bc3 	.word	0x08004bc3
 8004950:	08004bc3 	.word	0x08004bc3
 8004954:	08004bc3 	.word	0x08004bc3
 8004958:	08004bc3 	.word	0x08004bc3
 800495c:	08004bc3 	.word	0x08004bc3
 8004960:	080049b1 	.word	0x080049b1
 8004964:	08004bc3 	.word	0x08004bc3
 8004968:	08004bc3 	.word	0x08004bc3
 800496c:	08004bc3 	.word	0x08004bc3
 8004970:	08004bc3 	.word	0x08004bc3
 8004974:	08004bc3 	.word	0x08004bc3
 8004978:	08004bc3 	.word	0x08004bc3
 800497c:	08004bc3 	.word	0x08004bc3
 8004980:	080049b7 	.word	0x080049b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004984:	4b94      	ldr	r3, [pc, #592]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b00      	cmp	r3, #0
 800498e:	d009      	beq.n	80049a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004990:	4b91      	ldr	r3, [pc, #580]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	08db      	lsrs	r3, r3, #3
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	4a90      	ldr	r2, [pc, #576]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800499c:	fa22 f303 	lsr.w	r3, r2, r3
 80049a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80049a2:	e111      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80049a4:	4b8d      	ldr	r3, [pc, #564]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049a6:	61bb      	str	r3, [r7, #24]
      break;
 80049a8:	e10e      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80049aa:	4b8d      	ldr	r3, [pc, #564]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80049ac:	61bb      	str	r3, [r7, #24]
      break;
 80049ae:	e10b      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80049b0:	4b8c      	ldr	r3, [pc, #560]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80049b2:	61bb      	str	r3, [r7, #24]
      break;
 80049b4:	e108      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049b6:	4b88      	ldr	r3, [pc, #544]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80049c0:	4b85      	ldr	r3, [pc, #532]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c4:	091b      	lsrs	r3, r3, #4
 80049c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80049cc:	4b82      	ldr	r3, [pc, #520]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80049d6:	4b80      	ldr	r3, [pc, #512]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049da:	08db      	lsrs	r3, r3, #3
 80049dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	fb02 f303 	mul.w	r3, r2, r3
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 80e1 	beq.w	8004bbc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	f000 8083 	beq.w	8004b08 <HAL_RCC_GetSysClockFreq+0x204>
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	f200 80a1 	bhi.w	8004b4c <HAL_RCC_GetSysClockFreq+0x248>
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <HAL_RCC_GetSysClockFreq+0x114>
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d056      	beq.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004a16:	e099      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a18:	4b6f      	ldr	r3, [pc, #444]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0320 	and.w	r3, r3, #32
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d02d      	beq.n	8004a80 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a24:	4b6c      	ldr	r3, [pc, #432]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	08db      	lsrs	r3, r3, #3
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	4a6b      	ldr	r2, [pc, #428]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a30:	fa22 f303 	lsr.w	r3, r2, r3
 8004a34:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	ee07 3a90 	vmov	s15, r3
 8004a3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a4e:	4b62      	ldr	r3, [pc, #392]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a62:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004a7e:	e087      	b.n	8004b90 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	ee07 3a90 	vmov	s15, r3
 8004a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004bec <HAL_RCC_GetSysClockFreq+0x2e8>
 8004a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a92:	4b51      	ldr	r3, [pc, #324]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aa6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004abe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ac2:	e065      	b.n	8004b90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ace:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004bf0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad6:	4b40      	ldr	r3, [pc, #256]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aea:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b06:	e043      	b.n	8004b90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b12:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004bf4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b2e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b4a:	e021      	b.n	8004b90 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b56:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004bf0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b66:	ee07 3a90 	vmov	s15, r3
 8004b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b72:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b8e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004b90:	4b11      	ldr	r3, [pc, #68]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b94:	0a5b      	lsrs	r3, r3, #9
 8004b96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	ee07 3a90 	vmov	s15, r3
 8004ba4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ba8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bb4:	ee17 3a90 	vmov	r3, s15
 8004bb8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004bba:	e005      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	61bb      	str	r3, [r7, #24]
      break;
 8004bc0:	e002      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004bc2:	4b07      	ldr	r3, [pc, #28]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004bc4:	61bb      	str	r3, [r7, #24]
      break;
 8004bc6:	bf00      	nop
  }

  return sysclockfreq;
 8004bc8:	69bb      	ldr	r3, [r7, #24]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3724      	adds	r7, #36	@ 0x24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	58024400 	.word	0x58024400
 8004bdc:	03d09000 	.word	0x03d09000
 8004be0:	003d0900 	.word	0x003d0900
 8004be4:	017d7840 	.word	0x017d7840
 8004be8:	46000000 	.word	0x46000000
 8004bec:	4c742400 	.word	0x4c742400
 8004bf0:	4a742400 	.word	0x4a742400
 8004bf4:	4bbebc20 	.word	0x4bbebc20

08004bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004bfe:	f7ff fe81 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 8004c02:	4602      	mov	r2, r0
 8004c04:	4b10      	ldr	r3, [pc, #64]	@ (8004c48 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	0a1b      	lsrs	r3, r3, #8
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	490f      	ldr	r1, [pc, #60]	@ (8004c4c <HAL_RCC_GetHCLKFreq+0x54>)
 8004c10:	5ccb      	ldrb	r3, [r1, r3]
 8004c12:	f003 031f 	and.w	r3, r3, #31
 8004c16:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c48 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	f003 030f 	and.w	r3, r3, #15
 8004c24:	4a09      	ldr	r2, [pc, #36]	@ (8004c4c <HAL_RCC_GetHCLKFreq+0x54>)
 8004c26:	5cd3      	ldrb	r3, [r2, r3]
 8004c28:	f003 031f 	and.w	r3, r3, #31
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c32:	4a07      	ldr	r2, [pc, #28]	@ (8004c50 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c34:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c36:	4a07      	ldr	r2, [pc, #28]	@ (8004c54 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004c3c:	4b04      	ldr	r3, [pc, #16]	@ (8004c50 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	58024400 	.word	0x58024400
 8004c4c:	080091d0 	.word	0x080091d0
 8004c50:	24000004 	.word	0x24000004
 8004c54:	24000000 	.word	0x24000000

08004c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004c5c:	f7ff ffcc 	bl	8004bf8 <HAL_RCC_GetHCLKFreq>
 8004c60:	4602      	mov	r2, r0
 8004c62:	4b06      	ldr	r3, [pc, #24]	@ (8004c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	091b      	lsrs	r3, r3, #4
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	4904      	ldr	r1, [pc, #16]	@ (8004c80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c6e:	5ccb      	ldrb	r3, [r1, r3]
 8004c70:	f003 031f 	and.w	r3, r3, #31
 8004c74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	58024400 	.word	0x58024400
 8004c80:	080091d0 	.word	0x080091d0

08004c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004c88:	f7ff ffb6 	bl	8004bf8 <HAL_RCC_GetHCLKFreq>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	4b06      	ldr	r3, [pc, #24]	@ (8004ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	0a1b      	lsrs	r3, r3, #8
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	4904      	ldr	r1, [pc, #16]	@ (8004cac <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c9a:	5ccb      	ldrb	r3, [r1, r3]
 8004c9c:	f003 031f 	and.w	r3, r3, #31
 8004ca0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	58024400 	.word	0x58024400
 8004cac:	080091d0 	.word	0x080091d0

08004cb0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cb4:	b0ca      	sub	sp, #296	@ 0x128
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004cd4:	2500      	movs	r5, #0
 8004cd6:	ea54 0305 	orrs.w	r3, r4, r5
 8004cda:	d049      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ce2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ce6:	d02f      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004ce8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004cec:	d828      	bhi.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004cee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cf2:	d01a      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004cf4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cf8:	d822      	bhi.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004cfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d02:	d007      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d04:	e01c      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d06:	4bb8      	ldr	r3, [pc, #736]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0a:	4ab7      	ldr	r2, [pc, #732]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004d12:	e01a      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d18:	3308      	adds	r3, #8
 8004d1a:	2102      	movs	r1, #2
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f001 fc8f 	bl	8006640 <RCCEx_PLL2_Config>
 8004d22:	4603      	mov	r3, r0
 8004d24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004d28:	e00f      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d2e:	3328      	adds	r3, #40	@ 0x28
 8004d30:	2102      	movs	r1, #2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f001 fd36 	bl	80067a4 <RCCEx_PLL3_Config>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004d3e:	e004      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d46:	e000      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004d48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10a      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004d52:	4ba5      	ldr	r3, [pc, #660]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d56:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d60:	4aa1      	ldr	r2, [pc, #644]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d62:	430b      	orrs	r3, r1
 8004d64:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d66:	e003      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004d7c:	f04f 0900 	mov.w	r9, #0
 8004d80:	ea58 0309 	orrs.w	r3, r8, r9
 8004d84:	d047      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	d82a      	bhi.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004d90:	a201      	add	r2, pc, #4	@ (adr r2, 8004d98 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d96:	bf00      	nop
 8004d98:	08004dad 	.word	0x08004dad
 8004d9c:	08004dbb 	.word	0x08004dbb
 8004da0:	08004dd1 	.word	0x08004dd1
 8004da4:	08004def 	.word	0x08004def
 8004da8:	08004def 	.word	0x08004def
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dac:	4b8e      	ldr	r3, [pc, #568]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db0:	4a8d      	ldr	r2, [pc, #564]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004db6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004db8:	e01a      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dbe:	3308      	adds	r3, #8
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f001 fc3c 	bl	8006640 <RCCEx_PLL2_Config>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004dce:	e00f      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd4:	3328      	adds	r3, #40	@ 0x28
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f001 fce3 	bl	80067a4 <RCCEx_PLL3_Config>
 8004dde:	4603      	mov	r3, r0
 8004de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004de4:	e004      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dec:	e000      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004df0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10a      	bne.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004df8:	4b7b      	ldr	r3, [pc, #492]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dfc:	f023 0107 	bic.w	r1, r3, #7
 8004e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e06:	4a78      	ldr	r2, [pc, #480]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e0c:	e003      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004e22:	f04f 0b00 	mov.w	fp, #0
 8004e26:	ea5a 030b 	orrs.w	r3, sl, fp
 8004e2a:	d04c      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e36:	d030      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004e38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e3c:	d829      	bhi.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004e3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e40:	d02d      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004e42:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e44:	d825      	bhi.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004e46:	2b80      	cmp	r3, #128	@ 0x80
 8004e48:	d018      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004e4a:	2b80      	cmp	r3, #128	@ 0x80
 8004e4c:	d821      	bhi.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d002      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004e52:	2b40      	cmp	r3, #64	@ 0x40
 8004e54:	d007      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004e56:	e01c      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e58:	4b63      	ldr	r3, [pc, #396]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5c:	4a62      	ldr	r2, [pc, #392]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004e64:	e01c      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e6a:	3308      	adds	r3, #8
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f001 fbe6 	bl	8006640 <RCCEx_PLL2_Config>
 8004e74:	4603      	mov	r3, r0
 8004e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004e7a:	e011      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e80:	3328      	adds	r3, #40	@ 0x28
 8004e82:	2100      	movs	r1, #0
 8004e84:	4618      	mov	r0, r3
 8004e86:	f001 fc8d 	bl	80067a4 <RCCEx_PLL3_Config>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004e90:	e006      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e98:	e002      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004e9a:	bf00      	nop
 8004e9c:	e000      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004e9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10a      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004ea8:	4b4f      	ldr	r3, [pc, #316]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eac:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb6:	4a4c      	ldr	r2, [pc, #304]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004eb8:	430b      	orrs	r3, r1
 8004eba:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ebc:	e003      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ec2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ece:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004ed2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004edc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	d053      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004eee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ef2:	d035      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004ef4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ef8:	d82e      	bhi.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004efa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004efe:	d031      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004f00:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004f04:	d828      	bhi.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004f06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f0a:	d01a      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004f0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f10:	d822      	bhi.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004f16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f1a:	d007      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004f1c:	e01c      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f1e:	4b32      	ldr	r3, [pc, #200]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f22:	4a31      	ldr	r2, [pc, #196]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f2a:	e01c      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f30:	3308      	adds	r3, #8
 8004f32:	2100      	movs	r1, #0
 8004f34:	4618      	mov	r0, r3
 8004f36:	f001 fb83 	bl	8006640 <RCCEx_PLL2_Config>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004f40:	e011      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f46:	3328      	adds	r3, #40	@ 0x28
 8004f48:	2100      	movs	r1, #0
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f001 fc2a 	bl	80067a4 <RCCEx_PLL3_Config>
 8004f50:	4603      	mov	r3, r0
 8004f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f56:	e006      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f5e:	e002      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004f60:	bf00      	nop
 8004f62:	e000      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10b      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f72:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004f7e:	4a1a      	ldr	r2, [pc, #104]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f80:	430b      	orrs	r3, r1
 8004f82:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f84:	e003      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f96:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004f9a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004fa4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4313      	orrs	r3, r2
 8004fac:	d056      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fb2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004fb6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004fba:	d038      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004fbc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004fc0:	d831      	bhi.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004fc2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004fc6:	d034      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004fc8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004fcc:	d82b      	bhi.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004fce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fd2:	d01d      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004fd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fd8:	d825      	bhi.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d006      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004fde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fe2:	d00a      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004fe4:	e01f      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004fe6:	bf00      	nop
 8004fe8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fec:	4ba2      	ldr	r3, [pc, #648]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff0:	4aa1      	ldr	r2, [pc, #644]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ff2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ff6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ff8:	e01c      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ffe:	3308      	adds	r3, #8
 8005000:	2100      	movs	r1, #0
 8005002:	4618      	mov	r0, r3
 8005004:	f001 fb1c 	bl	8006640 <RCCEx_PLL2_Config>
 8005008:	4603      	mov	r3, r0
 800500a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800500e:	e011      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005014:	3328      	adds	r3, #40	@ 0x28
 8005016:	2100      	movs	r1, #0
 8005018:	4618      	mov	r0, r3
 800501a:	f001 fbc3 	bl	80067a4 <RCCEx_PLL3_Config>
 800501e:	4603      	mov	r3, r0
 8005020:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005024:	e006      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800502c:	e002      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800502e:	bf00      	nop
 8005030:	e000      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005032:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005034:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10b      	bne.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800503c:	4b8e      	ldr	r3, [pc, #568]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800503e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005040:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005048:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800504c:	4a8a      	ldr	r2, [pc, #552]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800504e:	430b      	orrs	r3, r1
 8005050:	6593      	str	r3, [r2, #88]	@ 0x58
 8005052:	e003      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005054:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005058:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800505c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005064:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005068:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800506c:	2300      	movs	r3, #0
 800506e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005072:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005076:	460b      	mov	r3, r1
 8005078:	4313      	orrs	r3, r2
 800507a:	d03a      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800507c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005082:	2b30      	cmp	r3, #48	@ 0x30
 8005084:	d01f      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005086:	2b30      	cmp	r3, #48	@ 0x30
 8005088:	d819      	bhi.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800508a:	2b20      	cmp	r3, #32
 800508c:	d00c      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800508e:	2b20      	cmp	r3, #32
 8005090:	d815      	bhi.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005092:	2b00      	cmp	r3, #0
 8005094:	d019      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005096:	2b10      	cmp	r3, #16
 8005098:	d111      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800509a:	4b77      	ldr	r3, [pc, #476]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800509c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509e:	4a76      	ldr	r2, [pc, #472]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80050a6:	e011      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ac:	3308      	adds	r3, #8
 80050ae:	2102      	movs	r1, #2
 80050b0:	4618      	mov	r0, r3
 80050b2:	f001 fac5 	bl	8006640 <RCCEx_PLL2_Config>
 80050b6:	4603      	mov	r3, r0
 80050b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80050bc:	e006      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050c4:	e002      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80050c6:	bf00      	nop
 80050c8:	e000      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80050ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10a      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80050d4:	4b68      	ldr	r3, [pc, #416]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050d8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80050dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050e2:	4a65      	ldr	r2, [pc, #404]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050e4:	430b      	orrs	r3, r1
 80050e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050e8:	e003      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80050f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80050fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005102:	2300      	movs	r3, #0
 8005104:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005108:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800510c:	460b      	mov	r3, r1
 800510e:	4313      	orrs	r3, r2
 8005110:	d051      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005118:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800511c:	d035      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800511e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005122:	d82e      	bhi.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005124:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005128:	d031      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800512a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800512e:	d828      	bhi.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005130:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005134:	d01a      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005136:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800513a:	d822      	bhi.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005140:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005144:	d007      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005146:	e01c      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005148:	4b4b      	ldr	r3, [pc, #300]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800514a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514c:	4a4a      	ldr	r2, [pc, #296]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800514e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005152:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005154:	e01c      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800515a:	3308      	adds	r3, #8
 800515c:	2100      	movs	r1, #0
 800515e:	4618      	mov	r0, r3
 8005160:	f001 fa6e 	bl	8006640 <RCCEx_PLL2_Config>
 8005164:	4603      	mov	r3, r0
 8005166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800516a:	e011      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800516c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005170:	3328      	adds	r3, #40	@ 0x28
 8005172:	2100      	movs	r1, #0
 8005174:	4618      	mov	r0, r3
 8005176:	f001 fb15 	bl	80067a4 <RCCEx_PLL3_Config>
 800517a:	4603      	mov	r3, r0
 800517c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005180:	e006      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005188:	e002      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800518a:	bf00      	nop
 800518c:	e000      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800518e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005190:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10a      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005198:	4b37      	ldr	r3, [pc, #220]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800519a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800519c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80051a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051a6:	4a34      	ldr	r2, [pc, #208]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051a8:	430b      	orrs	r3, r1
 80051aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80051ac:	e003      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80051b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051be:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80051c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80051c6:	2300      	movs	r3, #0
 80051c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80051cc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80051d0:	460b      	mov	r3, r1
 80051d2:	4313      	orrs	r3, r2
 80051d4:	d056      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80051d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051e0:	d033      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80051e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051e6:	d82c      	bhi.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80051e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051ec:	d02f      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80051ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051f2:	d826      	bhi.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80051f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80051f8:	d02b      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80051fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80051fe:	d820      	bhi.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005200:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005204:	d012      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005206:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800520a:	d81a      	bhi.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800520c:	2b00      	cmp	r3, #0
 800520e:	d022      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005214:	d115      	bne.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800521a:	3308      	adds	r3, #8
 800521c:	2101      	movs	r1, #1
 800521e:	4618      	mov	r0, r3
 8005220:	f001 fa0e 	bl	8006640 <RCCEx_PLL2_Config>
 8005224:	4603      	mov	r3, r0
 8005226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800522a:	e015      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800522c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005230:	3328      	adds	r3, #40	@ 0x28
 8005232:	2101      	movs	r1, #1
 8005234:	4618      	mov	r0, r3
 8005236:	f001 fab5 	bl	80067a4 <RCCEx_PLL3_Config>
 800523a:	4603      	mov	r3, r0
 800523c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005240:	e00a      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005248:	e006      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800524a:	bf00      	nop
 800524c:	e004      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800524e:	bf00      	nop
 8005250:	e002      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005252:	bf00      	nop
 8005254:	e000      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005256:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005258:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10d      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005260:	4b05      	ldr	r3, [pc, #20]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005264:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800526c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800526e:	4a02      	ldr	r2, [pc, #8]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005270:	430b      	orrs	r3, r1
 8005272:	6513      	str	r3, [r2, #80]	@ 0x50
 8005274:	e006      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005276:	bf00      	nop
 8005278:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800527c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005280:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005290:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005294:	2300      	movs	r3, #0
 8005296:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800529a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800529e:	460b      	mov	r3, r1
 80052a0:	4313      	orrs	r3, r2
 80052a2:	d055      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80052a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80052ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052b0:	d033      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80052b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052b6:	d82c      	bhi.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80052b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052bc:	d02f      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80052be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052c2:	d826      	bhi.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80052c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80052c8:	d02b      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80052ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80052ce:	d820      	bhi.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80052d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052d4:	d012      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80052d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052da:	d81a      	bhi.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d022      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80052e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052e4:	d115      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ea:	3308      	adds	r3, #8
 80052ec:	2101      	movs	r1, #1
 80052ee:	4618      	mov	r0, r3
 80052f0:	f001 f9a6 	bl	8006640 <RCCEx_PLL2_Config>
 80052f4:	4603      	mov	r3, r0
 80052f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80052fa:	e015      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005300:	3328      	adds	r3, #40	@ 0x28
 8005302:	2101      	movs	r1, #1
 8005304:	4618      	mov	r0, r3
 8005306:	f001 fa4d 	bl	80067a4 <RCCEx_PLL3_Config>
 800530a:	4603      	mov	r3, r0
 800530c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005310:	e00a      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005318:	e006      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800531a:	bf00      	nop
 800531c:	e004      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800531e:	bf00      	nop
 8005320:	e002      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005322:	bf00      	nop
 8005324:	e000      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005326:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005328:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10b      	bne.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005330:	4ba3      	ldr	r3, [pc, #652]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005334:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800533c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005340:	4a9f      	ldr	r2, [pc, #636]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005342:	430b      	orrs	r3, r1
 8005344:	6593      	str	r3, [r2, #88]	@ 0x58
 8005346:	e003      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800534c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005358:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800535c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005360:	2300      	movs	r3, #0
 8005362:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005366:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800536a:	460b      	mov	r3, r1
 800536c:	4313      	orrs	r3, r2
 800536e:	d037      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005376:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800537a:	d00e      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800537c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005380:	d816      	bhi.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005382:	2b00      	cmp	r3, #0
 8005384:	d018      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005386:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800538a:	d111      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800538c:	4b8c      	ldr	r3, [pc, #560]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800538e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005390:	4a8b      	ldr	r2, [pc, #556]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005392:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005396:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005398:	e00f      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800539a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800539e:	3308      	adds	r3, #8
 80053a0:	2101      	movs	r1, #1
 80053a2:	4618      	mov	r0, r3
 80053a4:	f001 f94c 	bl	8006640 <RCCEx_PLL2_Config>
 80053a8:	4603      	mov	r3, r0
 80053aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80053ae:	e004      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053b6:	e000      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80053b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10a      	bne.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80053c2:	4b7f      	ldr	r3, [pc, #508]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053c6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80053ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d0:	4a7b      	ldr	r2, [pc, #492]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053d2:	430b      	orrs	r3, r1
 80053d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80053d6:	e003      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80053e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80053ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053f0:	2300      	movs	r3, #0
 80053f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80053f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80053fa:	460b      	mov	r3, r1
 80053fc:	4313      	orrs	r3, r2
 80053fe:	d039      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005404:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005406:	2b03      	cmp	r3, #3
 8005408:	d81c      	bhi.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800540a:	a201      	add	r2, pc, #4	@ (adr r2, 8005410 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800540c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005410:	0800544d 	.word	0x0800544d
 8005414:	08005421 	.word	0x08005421
 8005418:	0800542f 	.word	0x0800542f
 800541c:	0800544d 	.word	0x0800544d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005420:	4b67      	ldr	r3, [pc, #412]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005424:	4a66      	ldr	r2, [pc, #408]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005426:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800542a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800542c:	e00f      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800542e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005432:	3308      	adds	r3, #8
 8005434:	2102      	movs	r1, #2
 8005436:	4618      	mov	r0, r3
 8005438:	f001 f902 	bl	8006640 <RCCEx_PLL2_Config>
 800543c:	4603      	mov	r3, r0
 800543e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005442:	e004      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800544a:	e000      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800544c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800544e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10a      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005456:	4b5a      	ldr	r3, [pc, #360]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800545a:	f023 0103 	bic.w	r1, r3, #3
 800545e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005464:	4a56      	ldr	r2, [pc, #344]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005466:	430b      	orrs	r3, r1
 8005468:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800546a:	e003      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800546c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005470:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005480:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005484:	2300      	movs	r3, #0
 8005486:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800548a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800548e:	460b      	mov	r3, r1
 8005490:	4313      	orrs	r3, r2
 8005492:	f000 809f 	beq.w	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005496:	4b4b      	ldr	r3, [pc, #300]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a4a      	ldr	r2, [pc, #296]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800549c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054a2:	f7fb fe3b 	bl	800111c <HAL_GetTick>
 80054a6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054aa:	e00b      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ac:	f7fb fe36 	bl	800111c <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b64      	cmp	r3, #100	@ 0x64
 80054ba:	d903      	bls.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054c2:	e005      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054c4:	4b3f      	ldr	r3, [pc, #252]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d0ed      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80054d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d179      	bne.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80054d8:	4b39      	ldr	r3, [pc, #228]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80054dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80054e4:	4053      	eors	r3, r2
 80054e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d015      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054ee:	4b34      	ldr	r3, [pc, #208]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054f6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054fa:	4b31      	ldr	r3, [pc, #196]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054fe:	4a30      	ldr	r2, [pc, #192]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005504:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005506:	4b2e      	ldr	r3, [pc, #184]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800550a:	4a2d      	ldr	r2, [pc, #180]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800550c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005510:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005512:	4a2b      	ldr	r2, [pc, #172]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005514:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005518:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800551a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800551e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005526:	d118      	bne.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005528:	f7fb fdf8 	bl	800111c <HAL_GetTick>
 800552c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005530:	e00d      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005532:	f7fb fdf3 	bl	800111c <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800553c:	1ad2      	subs	r2, r2, r3
 800553e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005542:	429a      	cmp	r2, r3
 8005544:	d903      	bls.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800554c:	e005      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800554e:	4b1c      	ldr	r3, [pc, #112]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0eb      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800555a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800555e:	2b00      	cmp	r3, #0
 8005560:	d129      	bne.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005566:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800556a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800556e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005572:	d10e      	bne.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005574:	4b12      	ldr	r3, [pc, #72]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800557c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005580:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005584:	091a      	lsrs	r2, r3, #4
 8005586:	4b10      	ldr	r3, [pc, #64]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005588:	4013      	ands	r3, r2
 800558a:	4a0d      	ldr	r2, [pc, #52]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800558c:	430b      	orrs	r3, r1
 800558e:	6113      	str	r3, [r2, #16]
 8005590:	e005      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005592:	4b0b      	ldr	r3, [pc, #44]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	4a0a      	ldr	r2, [pc, #40]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005598:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800559c:	6113      	str	r3, [r2, #16]
 800559e:	4b08      	ldr	r3, [pc, #32]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055a0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80055a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ae:	4a04      	ldr	r2, [pc, #16]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055b0:	430b      	orrs	r3, r1
 80055b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80055b4:	e00e      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80055be:	e009      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80055c0:	58024400 	.word	0x58024400
 80055c4:	58024800 	.word	0x58024800
 80055c8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80055d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055dc:	f002 0301 	and.w	r3, r2, #1
 80055e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055e4:	2300      	movs	r3, #0
 80055e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80055ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4313      	orrs	r3, r2
 80055f2:	f000 8089 	beq.w	8005708 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80055f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055fc:	2b28      	cmp	r3, #40	@ 0x28
 80055fe:	d86b      	bhi.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005600:	a201      	add	r2, pc, #4	@ (adr r2, 8005608 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005606:	bf00      	nop
 8005608:	080056e1 	.word	0x080056e1
 800560c:	080056d9 	.word	0x080056d9
 8005610:	080056d9 	.word	0x080056d9
 8005614:	080056d9 	.word	0x080056d9
 8005618:	080056d9 	.word	0x080056d9
 800561c:	080056d9 	.word	0x080056d9
 8005620:	080056d9 	.word	0x080056d9
 8005624:	080056d9 	.word	0x080056d9
 8005628:	080056ad 	.word	0x080056ad
 800562c:	080056d9 	.word	0x080056d9
 8005630:	080056d9 	.word	0x080056d9
 8005634:	080056d9 	.word	0x080056d9
 8005638:	080056d9 	.word	0x080056d9
 800563c:	080056d9 	.word	0x080056d9
 8005640:	080056d9 	.word	0x080056d9
 8005644:	080056d9 	.word	0x080056d9
 8005648:	080056c3 	.word	0x080056c3
 800564c:	080056d9 	.word	0x080056d9
 8005650:	080056d9 	.word	0x080056d9
 8005654:	080056d9 	.word	0x080056d9
 8005658:	080056d9 	.word	0x080056d9
 800565c:	080056d9 	.word	0x080056d9
 8005660:	080056d9 	.word	0x080056d9
 8005664:	080056d9 	.word	0x080056d9
 8005668:	080056e1 	.word	0x080056e1
 800566c:	080056d9 	.word	0x080056d9
 8005670:	080056d9 	.word	0x080056d9
 8005674:	080056d9 	.word	0x080056d9
 8005678:	080056d9 	.word	0x080056d9
 800567c:	080056d9 	.word	0x080056d9
 8005680:	080056d9 	.word	0x080056d9
 8005684:	080056d9 	.word	0x080056d9
 8005688:	080056e1 	.word	0x080056e1
 800568c:	080056d9 	.word	0x080056d9
 8005690:	080056d9 	.word	0x080056d9
 8005694:	080056d9 	.word	0x080056d9
 8005698:	080056d9 	.word	0x080056d9
 800569c:	080056d9 	.word	0x080056d9
 80056a0:	080056d9 	.word	0x080056d9
 80056a4:	080056d9 	.word	0x080056d9
 80056a8:	080056e1 	.word	0x080056e1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b0:	3308      	adds	r3, #8
 80056b2:	2101      	movs	r1, #1
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 ffc3 	bl	8006640 <RCCEx_PLL2_Config>
 80056ba:	4603      	mov	r3, r0
 80056bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80056c0:	e00f      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c6:	3328      	adds	r3, #40	@ 0x28
 80056c8:	2101      	movs	r1, #1
 80056ca:	4618      	mov	r0, r3
 80056cc:	f001 f86a 	bl	80067a4 <RCCEx_PLL3_Config>
 80056d0:	4603      	mov	r3, r0
 80056d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80056d6:	e004      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056de:	e000      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80056e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10a      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80056ea:	4bbf      	ldr	r3, [pc, #764]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ee:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80056f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056f8:	4abb      	ldr	r2, [pc, #748]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056fa:	430b      	orrs	r3, r1
 80056fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80056fe:	e003      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005704:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	f002 0302 	and.w	r3, r2, #2
 8005714:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005718:	2300      	movs	r3, #0
 800571a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800571e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005722:	460b      	mov	r3, r1
 8005724:	4313      	orrs	r3, r2
 8005726:	d041      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800572c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800572e:	2b05      	cmp	r3, #5
 8005730:	d824      	bhi.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005732:	a201      	add	r2, pc, #4	@ (adr r2, 8005738 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005738:	08005785 	.word	0x08005785
 800573c:	08005751 	.word	0x08005751
 8005740:	08005767 	.word	0x08005767
 8005744:	08005785 	.word	0x08005785
 8005748:	08005785 	.word	0x08005785
 800574c:	08005785 	.word	0x08005785
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005754:	3308      	adds	r3, #8
 8005756:	2101      	movs	r1, #1
 8005758:	4618      	mov	r0, r3
 800575a:	f000 ff71 	bl	8006640 <RCCEx_PLL2_Config>
 800575e:	4603      	mov	r3, r0
 8005760:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005764:	e00f      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576a:	3328      	adds	r3, #40	@ 0x28
 800576c:	2101      	movs	r1, #1
 800576e:	4618      	mov	r0, r3
 8005770:	f001 f818 	bl	80067a4 <RCCEx_PLL3_Config>
 8005774:	4603      	mov	r3, r0
 8005776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800577a:	e004      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005782:	e000      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10a      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800578e:	4b96      	ldr	r3, [pc, #600]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005792:	f023 0107 	bic.w	r1, r3, #7
 8005796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800579a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800579c:	4a92      	ldr	r2, [pc, #584]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800579e:	430b      	orrs	r3, r1
 80057a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80057a2:	e003      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b4:	f002 0304 	and.w	r3, r2, #4
 80057b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057bc:	2300      	movs	r3, #0
 80057be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057c2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80057c6:	460b      	mov	r3, r1
 80057c8:	4313      	orrs	r3, r2
 80057ca:	d044      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80057cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057d4:	2b05      	cmp	r3, #5
 80057d6:	d825      	bhi.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80057d8:	a201      	add	r2, pc, #4	@ (adr r2, 80057e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80057da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057de:	bf00      	nop
 80057e0:	0800582d 	.word	0x0800582d
 80057e4:	080057f9 	.word	0x080057f9
 80057e8:	0800580f 	.word	0x0800580f
 80057ec:	0800582d 	.word	0x0800582d
 80057f0:	0800582d 	.word	0x0800582d
 80057f4:	0800582d 	.word	0x0800582d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057fc:	3308      	adds	r3, #8
 80057fe:	2101      	movs	r1, #1
 8005800:	4618      	mov	r0, r3
 8005802:	f000 ff1d 	bl	8006640 <RCCEx_PLL2_Config>
 8005806:	4603      	mov	r3, r0
 8005808:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800580c:	e00f      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800580e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005812:	3328      	adds	r3, #40	@ 0x28
 8005814:	2101      	movs	r1, #1
 8005816:	4618      	mov	r0, r3
 8005818:	f000 ffc4 	bl	80067a4 <RCCEx_PLL3_Config>
 800581c:	4603      	mov	r3, r0
 800581e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005822:	e004      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800582a:	e000      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800582c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800582e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10b      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005836:	4b6c      	ldr	r3, [pc, #432]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800583a:	f023 0107 	bic.w	r1, r3, #7
 800583e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005842:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005846:	4a68      	ldr	r2, [pc, #416]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005848:	430b      	orrs	r3, r1
 800584a:	6593      	str	r3, [r2, #88]	@ 0x58
 800584c:	e003      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800584e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005852:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800585a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585e:	f002 0320 	and.w	r3, r2, #32
 8005862:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005866:	2300      	movs	r3, #0
 8005868:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800586c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005870:	460b      	mov	r3, r1
 8005872:	4313      	orrs	r3, r2
 8005874:	d055      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800587a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800587e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005882:	d033      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005884:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005888:	d82c      	bhi.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800588a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800588e:	d02f      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005894:	d826      	bhi.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005896:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800589a:	d02b      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800589c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80058a0:	d820      	bhi.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80058a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058a6:	d012      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80058a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058ac:	d81a      	bhi.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d022      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80058b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058b6:	d115      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058bc:	3308      	adds	r3, #8
 80058be:	2100      	movs	r1, #0
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 febd 	bl	8006640 <RCCEx_PLL2_Config>
 80058c6:	4603      	mov	r3, r0
 80058c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80058cc:	e015      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d2:	3328      	adds	r3, #40	@ 0x28
 80058d4:	2102      	movs	r1, #2
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 ff64 	bl	80067a4 <RCCEx_PLL3_Config>
 80058dc:	4603      	mov	r3, r0
 80058de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80058e2:	e00a      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058ea:	e006      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80058ec:	bf00      	nop
 80058ee:	e004      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80058f0:	bf00      	nop
 80058f2:	e002      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80058f4:	bf00      	nop
 80058f6:	e000      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80058f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10b      	bne.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005902:	4b39      	ldr	r3, [pc, #228]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005906:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800590a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005912:	4a35      	ldr	r2, [pc, #212]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005914:	430b      	orrs	r3, r1
 8005916:	6553      	str	r3, [r2, #84]	@ 0x54
 8005918:	e003      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800591e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800592e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005932:	2300      	movs	r3, #0
 8005934:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005938:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800593c:	460b      	mov	r3, r1
 800593e:	4313      	orrs	r3, r2
 8005940:	d058      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005946:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800594a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800594e:	d033      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005950:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005954:	d82c      	bhi.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005956:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800595a:	d02f      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800595c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005960:	d826      	bhi.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005962:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005966:	d02b      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005968:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800596c:	d820      	bhi.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800596e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005972:	d012      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005974:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005978:	d81a      	bhi.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800597a:	2b00      	cmp	r3, #0
 800597c:	d022      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800597e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005982:	d115      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005988:	3308      	adds	r3, #8
 800598a:	2100      	movs	r1, #0
 800598c:	4618      	mov	r0, r3
 800598e:	f000 fe57 	bl	8006640 <RCCEx_PLL2_Config>
 8005992:	4603      	mov	r3, r0
 8005994:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005998:	e015      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800599a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599e:	3328      	adds	r3, #40	@ 0x28
 80059a0:	2102      	movs	r1, #2
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 fefe 	bl	80067a4 <RCCEx_PLL3_Config>
 80059a8:	4603      	mov	r3, r0
 80059aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80059ae:	e00a      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059b6:	e006      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80059b8:	bf00      	nop
 80059ba:	e004      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80059bc:	bf00      	nop
 80059be:	e002      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80059c0:	bf00      	nop
 80059c2:	e000      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80059c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10e      	bne.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059ce:	4b06      	ldr	r3, [pc, #24]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80059d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059de:	4a02      	ldr	r2, [pc, #8]	@ (80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059e0:	430b      	orrs	r3, r1
 80059e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80059e4:	e006      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80059e6:	bf00      	nop
 80059e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80059f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005a00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a04:	2300      	movs	r3, #0
 8005a06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a0a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005a0e:	460b      	mov	r3, r1
 8005a10:	4313      	orrs	r3, r2
 8005a12:	d055      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005a1c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005a20:	d033      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005a22:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005a26:	d82c      	bhi.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005a28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a2c:	d02f      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005a2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a32:	d826      	bhi.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005a34:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005a38:	d02b      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005a3a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005a3e:	d820      	bhi.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005a40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a44:	d012      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005a46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a4a:	d81a      	bhi.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d022      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005a50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a54:	d115      	bne.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a5a:	3308      	adds	r3, #8
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 fdee 	bl	8006640 <RCCEx_PLL2_Config>
 8005a64:	4603      	mov	r3, r0
 8005a66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005a6a:	e015      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a70:	3328      	adds	r3, #40	@ 0x28
 8005a72:	2102      	movs	r1, #2
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 fe95 	bl	80067a4 <RCCEx_PLL3_Config>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005a80:	e00a      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a88:	e006      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005a8a:	bf00      	nop
 8005a8c:	e004      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005a8e:	bf00      	nop
 8005a90:	e002      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005a92:	bf00      	nop
 8005a94:	e000      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005a96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10b      	bne.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005aa0:	4ba1      	ldr	r3, [pc, #644]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aa4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ab0:	4a9d      	ldr	r2, [pc, #628]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ab2:	430b      	orrs	r3, r1
 8005ab4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ab6:	e003      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005abc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac8:	f002 0308 	and.w	r3, r2, #8
 8005acc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ad6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005ada:	460b      	mov	r3, r1
 8005adc:	4313      	orrs	r3, r2
 8005ade:	d01e      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ae8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aec:	d10c      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af2:	3328      	adds	r3, #40	@ 0x28
 8005af4:	2102      	movs	r1, #2
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fe54 	bl	80067a4 <RCCEx_PLL3_Config>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005b08:	4b87      	ldr	r3, [pc, #540]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b0c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b18:	4a83      	ldr	r2, [pc, #524]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b1a:	430b      	orrs	r3, r1
 8005b1c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b26:	f002 0310 	and.w	r3, r2, #16
 8005b2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b2e:	2300      	movs	r3, #0
 8005b30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005b34:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	d01e      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b4a:	d10c      	bne.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b50:	3328      	adds	r3, #40	@ 0x28
 8005b52:	2102      	movs	r1, #2
 8005b54:	4618      	mov	r0, r3
 8005b56:	f000 fe25 	bl	80067a4 <RCCEx_PLL3_Config>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d002      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b66:	4b70      	ldr	r3, [pc, #448]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b6a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b76:	4a6c      	ldr	r2, [pc, #432]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b84:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005b88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b92:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005b96:	460b      	mov	r3, r1
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	d03e      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ba4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ba8:	d022      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005baa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bae:	d81b      	bhi.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bb8:	d00b      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005bba:	e015      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc0:	3308      	adds	r3, #8
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 fd3b 	bl	8006640 <RCCEx_PLL2_Config>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005bd0:	e00f      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd6:	3328      	adds	r3, #40	@ 0x28
 8005bd8:	2102      	movs	r1, #2
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 fde2 	bl	80067a4 <RCCEx_PLL3_Config>
 8005be0:	4603      	mov	r3, r0
 8005be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005be6:	e004      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bee:	e000      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10b      	bne.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bfa:	4b4b      	ldr	r3, [pc, #300]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bfe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c0a:	4a47      	ldr	r2, [pc, #284]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c0c:	430b      	orrs	r3, r1
 8005c0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c10:	e003      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c22:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005c26:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c28:	2300      	movs	r3, #0
 8005c2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c2c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005c30:	460b      	mov	r3, r1
 8005c32:	4313      	orrs	r3, r2
 8005c34:	d03b      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c3e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c42:	d01f      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005c44:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c48:	d818      	bhi.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005c4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c4e:	d003      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005c50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c54:	d007      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005c56:	e011      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c58:	4b33      	ldr	r3, [pc, #204]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5c:	4a32      	ldr	r2, [pc, #200]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005c64:	e00f      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c6a:	3328      	adds	r3, #40	@ 0x28
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 fd98 	bl	80067a4 <RCCEx_PLL3_Config>
 8005c74:	4603      	mov	r3, r0
 8005c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005c7a:	e004      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c82:	e000      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10b      	bne.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c8e:	4b26      	ldr	r3, [pc, #152]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c92:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c9e:	4a22      	ldr	r2, [pc, #136]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ca0:	430b      	orrs	r3, r1
 8005ca2:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ca4:	e003      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005caa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005cba:	673b      	str	r3, [r7, #112]	@ 0x70
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	677b      	str	r3, [r7, #116]	@ 0x74
 8005cc0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	d034      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d003      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cd8:	d007      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005cda:	e011      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cdc:	4b12      	ldr	r3, [pc, #72]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce0:	4a11      	ldr	r2, [pc, #68]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ce6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005ce8:	e00e      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cee:	3308      	adds	r3, #8
 8005cf0:	2102      	movs	r1, #2
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fca4 	bl	8006640 <RCCEx_PLL2_Config>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005cfe:	e003      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10d      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005d10:	4b05      	ldr	r3, [pc, #20]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d14:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d1e:	4a02      	ldr	r2, [pc, #8]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d20:	430b      	orrs	r3, r1
 8005d22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d24:	e006      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005d26:	bf00      	nop
 8005d28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005d40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d42:	2300      	movs	r3, #0
 8005d44:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d46:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	d00c      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d54:	3328      	adds	r3, #40	@ 0x28
 8005d56:	2102      	movs	r1, #2
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 fd23 	bl	80067a4 <RCCEx_PLL3_Config>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d72:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005d76:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d78:	2300      	movs	r3, #0
 8005d7a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d7c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005d80:	460b      	mov	r3, r1
 8005d82:	4313      	orrs	r3, r2
 8005d84:	d038      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d92:	d018      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005d94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d98:	d811      	bhi.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005d9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d9e:	d014      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005da0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005da4:	d80b      	bhi.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d011      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005daa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dae:	d106      	bne.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005db0:	4bc3      	ldr	r3, [pc, #780]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db4:	4ac2      	ldr	r2, [pc, #776]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005db6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005dbc:	e008      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dc4:	e004      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005dc6:	bf00      	nop
 8005dc8:	e002      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005dca:	bf00      	nop
 8005dcc:	e000      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005dce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10b      	bne.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005dd8:	4bb9      	ldr	r3, [pc, #740]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ddc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005de8:	4ab5      	ldr	r2, [pc, #724]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005dea:	430b      	orrs	r3, r1
 8005dec:	6553      	str	r3, [r2, #84]	@ 0x54
 8005dee:	e003      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005df4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e00:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005e04:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e06:	2300      	movs	r3, #0
 8005e08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e0a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005e0e:	460b      	mov	r3, r1
 8005e10:	4313      	orrs	r3, r2
 8005e12:	d009      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005e14:	4baa      	ldr	r3, [pc, #680]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e18:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e22:	4aa7      	ldr	r2, [pc, #668]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e24:	430b      	orrs	r3, r1
 8005e26:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e30:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005e34:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e36:	2300      	movs	r3, #0
 8005e38:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e3a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4313      	orrs	r3, r2
 8005e42:	d00a      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005e44:	4b9e      	ldr	r3, [pc, #632]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e50:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005e54:	4a9a      	ldr	r2, [pc, #616]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e56:	430b      	orrs	r3, r1
 8005e58:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e62:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005e66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e68:	2300      	movs	r3, #0
 8005e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e6c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005e70:	460b      	mov	r3, r1
 8005e72:	4313      	orrs	r3, r2
 8005e74:	d009      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005e76:	4b92      	ldr	r3, [pc, #584]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e7a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e84:	4a8e      	ldr	r2, [pc, #568]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e86:	430b      	orrs	r3, r1
 8005e88:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e92:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005e96:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e98:	2300      	movs	r3, #0
 8005e9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e9c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	d00e      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ea6:	4b86      	ldr	r3, [pc, #536]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	4a85      	ldr	r2, [pc, #532]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005eac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005eb0:	6113      	str	r3, [r2, #16]
 8005eb2:	4b83      	ldr	r3, [pc, #524]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005eb4:	6919      	ldr	r1, [r3, #16]
 8005eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005ebe:	4a80      	ldr	r2, [pc, #512]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ec0:	430b      	orrs	r3, r1
 8005ec2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ecc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ed6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005eda:	460b      	mov	r3, r1
 8005edc:	4313      	orrs	r3, r2
 8005ede:	d009      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005ee0:	4b77      	ldr	r3, [pc, #476]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ee4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eee:	4a74      	ldr	r2, [pc, #464]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ef0:	430b      	orrs	r3, r1
 8005ef2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005f00:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f02:	2300      	movs	r3, #0
 8005f04:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f06:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	d00a      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005f10:	4b6b      	ldr	r3, [pc, #428]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f14:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f20:	4a67      	ldr	r2, [pc, #412]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f22:	430b      	orrs	r3, r1
 8005f24:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2e:	2100      	movs	r1, #0
 8005f30:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f38:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	d011      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f46:	3308      	adds	r3, #8
 8005f48:	2100      	movs	r1, #0
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 fb78 	bl	8006640 <RCCEx_PLL2_Config>
 8005f50:	4603      	mov	r3, r0
 8005f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6e:	2100      	movs	r1, #0
 8005f70:	6239      	str	r1, [r7, #32]
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f78:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	d011      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f86:	3308      	adds	r3, #8
 8005f88:	2101      	movs	r1, #1
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 fb58 	bl	8006640 <RCCEx_PLL2_Config>
 8005f90:	4603      	mov	r3, r0
 8005f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fae:	2100      	movs	r1, #0
 8005fb0:	61b9      	str	r1, [r7, #24]
 8005fb2:	f003 0304 	and.w	r3, r3, #4
 8005fb6:	61fb      	str	r3, [r7, #28]
 8005fb8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	d011      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc6:	3308      	adds	r3, #8
 8005fc8:	2102      	movs	r1, #2
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 fb38 	bl	8006640 <RCCEx_PLL2_Config>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fee:	2100      	movs	r1, #0
 8005ff0:	6139      	str	r1, [r7, #16]
 8005ff2:	f003 0308 	and.w	r3, r3, #8
 8005ff6:	617b      	str	r3, [r7, #20]
 8005ff8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4313      	orrs	r3, r2
 8006000:	d011      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006006:	3328      	adds	r3, #40	@ 0x28
 8006008:	2100      	movs	r1, #0
 800600a:	4618      	mov	r0, r3
 800600c:	f000 fbca 	bl	80067a4 <RCCEx_PLL3_Config>
 8006010:	4603      	mov	r3, r0
 8006012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800601e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006022:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602e:	2100      	movs	r1, #0
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	f003 0310 	and.w	r3, r3, #16
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800603c:	460b      	mov	r3, r1
 800603e:	4313      	orrs	r3, r2
 8006040:	d011      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006046:	3328      	adds	r3, #40	@ 0x28
 8006048:	2101      	movs	r1, #1
 800604a:	4618      	mov	r0, r3
 800604c:	f000 fbaa 	bl	80067a4 <RCCEx_PLL3_Config>
 8006050:	4603      	mov	r3, r0
 8006052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800605e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006062:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800606a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606e:	2100      	movs	r1, #0
 8006070:	6039      	str	r1, [r7, #0]
 8006072:	f003 0320 	and.w	r3, r3, #32
 8006076:	607b      	str	r3, [r7, #4]
 8006078:	e9d7 1200 	ldrd	r1, r2, [r7]
 800607c:	460b      	mov	r3, r1
 800607e:	4313      	orrs	r3, r2
 8006080:	d011      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006086:	3328      	adds	r3, #40	@ 0x28
 8006088:	2102      	movs	r1, #2
 800608a:	4618      	mov	r0, r3
 800608c:	f000 fb8a 	bl	80067a4 <RCCEx_PLL3_Config>
 8006090:	4603      	mov	r3, r0
 8006092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800609e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80060a6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	e000      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80060ba:	46bd      	mov	sp, r7
 80060bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060c0:	58024400 	.word	0x58024400

080060c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80060c8:	f7fe fd96 	bl	8004bf8 <HAL_RCC_GetHCLKFreq>
 80060cc:	4602      	mov	r2, r0
 80060ce:	4b06      	ldr	r3, [pc, #24]	@ (80060e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	091b      	lsrs	r3, r3, #4
 80060d4:	f003 0307 	and.w	r3, r3, #7
 80060d8:	4904      	ldr	r1, [pc, #16]	@ (80060ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80060da:	5ccb      	ldrb	r3, [r1, r3]
 80060dc:	f003 031f 	and.w	r3, r3, #31
 80060e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	58024400 	.word	0x58024400
 80060ec:	080091d0 	.word	0x080091d0

080060f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b089      	sub	sp, #36	@ 0x24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060f8:	4ba1      	ldr	r3, [pc, #644]	@ (8006380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060fc:	f003 0303 	and.w	r3, r3, #3
 8006100:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006102:	4b9f      	ldr	r3, [pc, #636]	@ (8006380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006106:	0b1b      	lsrs	r3, r3, #12
 8006108:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800610c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800610e:	4b9c      	ldr	r3, [pc, #624]	@ (8006380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006112:	091b      	lsrs	r3, r3, #4
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800611a:	4b99      	ldr	r3, [pc, #612]	@ (8006380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800611c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800611e:	08db      	lsrs	r3, r3, #3
 8006120:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	fb02 f303 	mul.w	r3, r2, r3
 800612a:	ee07 3a90 	vmov	s15, r3
 800612e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006132:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 8111 	beq.w	8006360 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	2b02      	cmp	r3, #2
 8006142:	f000 8083 	beq.w	800624c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	2b02      	cmp	r3, #2
 800614a:	f200 80a1 	bhi.w	8006290 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d056      	beq.n	8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800615a:	e099      	b.n	8006290 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800615c:	4b88      	ldr	r3, [pc, #544]	@ (8006380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0320 	and.w	r3, r3, #32
 8006164:	2b00      	cmp	r3, #0
 8006166:	d02d      	beq.n	80061c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006168:	4b85      	ldr	r3, [pc, #532]	@ (8006380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	08db      	lsrs	r3, r3, #3
 800616e:	f003 0303 	and.w	r3, r3, #3
 8006172:	4a84      	ldr	r2, [pc, #528]	@ (8006384 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006174:	fa22 f303 	lsr.w	r3, r2, r3
 8006178:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	ee07 3a90 	vmov	s15, r3
 8006180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	ee07 3a90 	vmov	s15, r3
 800618a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800618e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006192:	4b7b      	ldr	r3, [pc, #492]	@ (8006380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800619a:	ee07 3a90 	vmov	s15, r3
 800619e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80061a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006388 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80061c2:	e087      	b.n	80062d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	ee07 3a90 	vmov	s15, r3
 80061ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800638c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80061d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061d6:	4b6a      	ldr	r3, [pc, #424]	@ (8006380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061de:	ee07 3a90 	vmov	s15, r3
 80061e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80061ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006388 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006206:	e065      	b.n	80062d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	ee07 3a90 	vmov	s15, r3
 800620e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006212:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006390 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800621a:	4b59      	ldr	r3, [pc, #356]	@ (8006380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800621c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800621e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006222:	ee07 3a90 	vmov	s15, r3
 8006226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800622a:	ed97 6a03 	vldr	s12, [r7, #12]
 800622e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006388 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800623a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800623e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006246:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800624a:	e043      	b.n	80062d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	ee07 3a90 	vmov	s15, r3
 8006252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006256:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006394 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800625a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800625e:	4b48      	ldr	r3, [pc, #288]	@ (8006380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006266:	ee07 3a90 	vmov	s15, r3
 800626a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800626e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006272:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006388 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800627a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800627e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800628a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800628e:	e021      	b.n	80062d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	ee07 3a90 	vmov	s15, r3
 8006296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800629a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006390 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800629e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062a2:	4b37      	ldr	r3, [pc, #220]	@ (8006380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062aa:	ee07 3a90 	vmov	s15, r3
 80062ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80062b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006388 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80062d4:	4b2a      	ldr	r3, [pc, #168]	@ (8006380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d8:	0a5b      	lsrs	r3, r3, #9
 80062da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062de:	ee07 3a90 	vmov	s15, r3
 80062e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80062f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062fa:	ee17 2a90 	vmov	r2, s15
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006302:	4b1f      	ldr	r3, [pc, #124]	@ (8006380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006306:	0c1b      	lsrs	r3, r3, #16
 8006308:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800630c:	ee07 3a90 	vmov	s15, r3
 8006310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006314:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006318:	ee37 7a87 	vadd.f32	s14, s15, s14
 800631c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006320:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006328:	ee17 2a90 	vmov	r2, s15
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006330:	4b13      	ldr	r3, [pc, #76]	@ (8006380 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006334:	0e1b      	lsrs	r3, r3, #24
 8006336:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800633a:	ee07 3a90 	vmov	s15, r3
 800633e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006342:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006346:	ee37 7a87 	vadd.f32	s14, s15, s14
 800634a:	edd7 6a07 	vldr	s13, [r7, #28]
 800634e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006352:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006356:	ee17 2a90 	vmov	r2, s15
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800635e:	e008      	b.n	8006372 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	609a      	str	r2, [r3, #8]
}
 8006372:	bf00      	nop
 8006374:	3724      	adds	r7, #36	@ 0x24
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	58024400 	.word	0x58024400
 8006384:	03d09000 	.word	0x03d09000
 8006388:	46000000 	.word	0x46000000
 800638c:	4c742400 	.word	0x4c742400
 8006390:	4a742400 	.word	0x4a742400
 8006394:	4bbebc20 	.word	0x4bbebc20

08006398 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006398:	b480      	push	{r7}
 800639a:	b089      	sub	sp, #36	@ 0x24
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063a0:	4ba1      	ldr	r3, [pc, #644]	@ (8006628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a4:	f003 0303 	and.w	r3, r3, #3
 80063a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80063aa:	4b9f      	ldr	r3, [pc, #636]	@ (8006628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ae:	0d1b      	lsrs	r3, r3, #20
 80063b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80063b6:	4b9c      	ldr	r3, [pc, #624]	@ (8006628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ba:	0a1b      	lsrs	r3, r3, #8
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80063c2:	4b99      	ldr	r3, [pc, #612]	@ (8006628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063c6:	08db      	lsrs	r3, r3, #3
 80063c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	fb02 f303 	mul.w	r3, r2, r3
 80063d2:	ee07 3a90 	vmov	s15, r3
 80063d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 8111 	beq.w	8006608 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	f000 8083 	beq.w	80064f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	f200 80a1 	bhi.w	8006538 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d056      	beq.n	80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006402:	e099      	b.n	8006538 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006404:	4b88      	ldr	r3, [pc, #544]	@ (8006628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0320 	and.w	r3, r3, #32
 800640c:	2b00      	cmp	r3, #0
 800640e:	d02d      	beq.n	800646c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006410:	4b85      	ldr	r3, [pc, #532]	@ (8006628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	08db      	lsrs	r3, r3, #3
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	4a84      	ldr	r2, [pc, #528]	@ (800662c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800641c:	fa22 f303 	lsr.w	r3, r2, r3
 8006420:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	ee07 3a90 	vmov	s15, r3
 8006428:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	ee07 3a90 	vmov	s15, r3
 8006432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800643a:	4b7b      	ldr	r3, [pc, #492]	@ (8006628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800643c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006442:	ee07 3a90 	vmov	s15, r3
 8006446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800644a:	ed97 6a03 	vldr	s12, [r7, #12]
 800644e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006630 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800645a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800645e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006466:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800646a:	e087      	b.n	800657c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	ee07 3a90 	vmov	s15, r3
 8006472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006476:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006634 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800647a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800647e:	4b6a      	ldr	r3, [pc, #424]	@ (8006628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006486:	ee07 3a90 	vmov	s15, r3
 800648a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800648e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006492:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006630 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800649a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800649e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064ae:	e065      	b.n	800657c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	ee07 3a90 	vmov	s15, r3
 80064b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006638 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80064be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064c2:	4b59      	ldr	r3, [pc, #356]	@ (8006628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ca:	ee07 3a90 	vmov	s15, r3
 80064ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80064d6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006630 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064f2:	e043      	b.n	800657c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	ee07 3a90 	vmov	s15, r3
 80064fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800663c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006506:	4b48      	ldr	r3, [pc, #288]	@ (8006628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800650a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800650e:	ee07 3a90 	vmov	s15, r3
 8006512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006516:	ed97 6a03 	vldr	s12, [r7, #12]
 800651a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006630 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800651e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006526:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800652a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800652e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006532:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006536:	e021      	b.n	800657c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	ee07 3a90 	vmov	s15, r3
 800653e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006542:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006638 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800654a:	4b37      	ldr	r3, [pc, #220]	@ (8006628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800654c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800654e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006552:	ee07 3a90 	vmov	s15, r3
 8006556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800655a:	ed97 6a03 	vldr	s12, [r7, #12]
 800655e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006630 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800656a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800656e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006576:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800657a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800657c:	4b2a      	ldr	r3, [pc, #168]	@ (8006628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800657e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006580:	0a5b      	lsrs	r3, r3, #9
 8006582:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006586:	ee07 3a90 	vmov	s15, r3
 800658a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800658e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006592:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006596:	edd7 6a07 	vldr	s13, [r7, #28]
 800659a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800659e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065a2:	ee17 2a90 	vmov	r2, s15
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80065aa:	4b1f      	ldr	r3, [pc, #124]	@ (8006628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ae:	0c1b      	lsrs	r3, r3, #16
 80065b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065b4:	ee07 3a90 	vmov	s15, r3
 80065b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80065c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065d0:	ee17 2a90 	vmov	r2, s15
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80065d8:	4b13      	ldr	r3, [pc, #76]	@ (8006628 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065dc:	0e1b      	lsrs	r3, r3, #24
 80065de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065e2:	ee07 3a90 	vmov	s15, r3
 80065e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80065f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065fe:	ee17 2a90 	vmov	r2, s15
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006606:	e008      	b.n	800661a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	609a      	str	r2, [r3, #8]
}
 800661a:	bf00      	nop
 800661c:	3724      	adds	r7, #36	@ 0x24
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	58024400 	.word	0x58024400
 800662c:	03d09000 	.word	0x03d09000
 8006630:	46000000 	.word	0x46000000
 8006634:	4c742400 	.word	0x4c742400
 8006638:	4a742400 	.word	0x4a742400
 800663c:	4bbebc20 	.word	0x4bbebc20

08006640 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800664a:	2300      	movs	r3, #0
 800664c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800664e:	4b53      	ldr	r3, [pc, #332]	@ (800679c <RCCEx_PLL2_Config+0x15c>)
 8006650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	2b03      	cmp	r3, #3
 8006658:	d101      	bne.n	800665e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e099      	b.n	8006792 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800665e:	4b4f      	ldr	r3, [pc, #316]	@ (800679c <RCCEx_PLL2_Config+0x15c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a4e      	ldr	r2, [pc, #312]	@ (800679c <RCCEx_PLL2_Config+0x15c>)
 8006664:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006668:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800666a:	f7fa fd57 	bl	800111c <HAL_GetTick>
 800666e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006670:	e008      	b.n	8006684 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006672:	f7fa fd53 	bl	800111c <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	2b02      	cmp	r3, #2
 800667e:	d901      	bls.n	8006684 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e086      	b.n	8006792 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006684:	4b45      	ldr	r3, [pc, #276]	@ (800679c <RCCEx_PLL2_Config+0x15c>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1f0      	bne.n	8006672 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006690:	4b42      	ldr	r3, [pc, #264]	@ (800679c <RCCEx_PLL2_Config+0x15c>)
 8006692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006694:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	031b      	lsls	r3, r3, #12
 800669e:	493f      	ldr	r1, [pc, #252]	@ (800679c <RCCEx_PLL2_Config+0x15c>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	628b      	str	r3, [r1, #40]	@ 0x28
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	3b01      	subs	r3, #1
 80066aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	025b      	lsls	r3, r3, #9
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	431a      	orrs	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	3b01      	subs	r3, #1
 80066c0:	041b      	lsls	r3, r3, #16
 80066c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80066c6:	431a      	orrs	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	3b01      	subs	r3, #1
 80066ce:	061b      	lsls	r3, r3, #24
 80066d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80066d4:	4931      	ldr	r1, [pc, #196]	@ (800679c <RCCEx_PLL2_Config+0x15c>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80066da:	4b30      	ldr	r3, [pc, #192]	@ (800679c <RCCEx_PLL2_Config+0x15c>)
 80066dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	492d      	ldr	r1, [pc, #180]	@ (800679c <RCCEx_PLL2_Config+0x15c>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80066ec:	4b2b      	ldr	r3, [pc, #172]	@ (800679c <RCCEx_PLL2_Config+0x15c>)
 80066ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f0:	f023 0220 	bic.w	r2, r3, #32
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	4928      	ldr	r1, [pc, #160]	@ (800679c <RCCEx_PLL2_Config+0x15c>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80066fe:	4b27      	ldr	r3, [pc, #156]	@ (800679c <RCCEx_PLL2_Config+0x15c>)
 8006700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006702:	4a26      	ldr	r2, [pc, #152]	@ (800679c <RCCEx_PLL2_Config+0x15c>)
 8006704:	f023 0310 	bic.w	r3, r3, #16
 8006708:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800670a:	4b24      	ldr	r3, [pc, #144]	@ (800679c <RCCEx_PLL2_Config+0x15c>)
 800670c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800670e:	4b24      	ldr	r3, [pc, #144]	@ (80067a0 <RCCEx_PLL2_Config+0x160>)
 8006710:	4013      	ands	r3, r2
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	69d2      	ldr	r2, [r2, #28]
 8006716:	00d2      	lsls	r2, r2, #3
 8006718:	4920      	ldr	r1, [pc, #128]	@ (800679c <RCCEx_PLL2_Config+0x15c>)
 800671a:	4313      	orrs	r3, r2
 800671c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800671e:	4b1f      	ldr	r3, [pc, #124]	@ (800679c <RCCEx_PLL2_Config+0x15c>)
 8006720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006722:	4a1e      	ldr	r2, [pc, #120]	@ (800679c <RCCEx_PLL2_Config+0x15c>)
 8006724:	f043 0310 	orr.w	r3, r3, #16
 8006728:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d106      	bne.n	800673e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006730:	4b1a      	ldr	r3, [pc, #104]	@ (800679c <RCCEx_PLL2_Config+0x15c>)
 8006732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006734:	4a19      	ldr	r2, [pc, #100]	@ (800679c <RCCEx_PLL2_Config+0x15c>)
 8006736:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800673a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800673c:	e00f      	b.n	800675e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d106      	bne.n	8006752 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006744:	4b15      	ldr	r3, [pc, #84]	@ (800679c <RCCEx_PLL2_Config+0x15c>)
 8006746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006748:	4a14      	ldr	r2, [pc, #80]	@ (800679c <RCCEx_PLL2_Config+0x15c>)
 800674a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800674e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006750:	e005      	b.n	800675e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006752:	4b12      	ldr	r3, [pc, #72]	@ (800679c <RCCEx_PLL2_Config+0x15c>)
 8006754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006756:	4a11      	ldr	r2, [pc, #68]	@ (800679c <RCCEx_PLL2_Config+0x15c>)
 8006758:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800675c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800675e:	4b0f      	ldr	r3, [pc, #60]	@ (800679c <RCCEx_PLL2_Config+0x15c>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a0e      	ldr	r2, [pc, #56]	@ (800679c <RCCEx_PLL2_Config+0x15c>)
 8006764:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800676a:	f7fa fcd7 	bl	800111c <HAL_GetTick>
 800676e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006770:	e008      	b.n	8006784 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006772:	f7fa fcd3 	bl	800111c <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	2b02      	cmp	r3, #2
 800677e:	d901      	bls.n	8006784 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e006      	b.n	8006792 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006784:	4b05      	ldr	r3, [pc, #20]	@ (800679c <RCCEx_PLL2_Config+0x15c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d0f0      	beq.n	8006772 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006790:	7bfb      	ldrb	r3, [r7, #15]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	58024400 	.word	0x58024400
 80067a0:	ffff0007 	.word	0xffff0007

080067a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80067b2:	4b53      	ldr	r3, [pc, #332]	@ (8006900 <RCCEx_PLL3_Config+0x15c>)
 80067b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b6:	f003 0303 	and.w	r3, r3, #3
 80067ba:	2b03      	cmp	r3, #3
 80067bc:	d101      	bne.n	80067c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e099      	b.n	80068f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80067c2:	4b4f      	ldr	r3, [pc, #316]	@ (8006900 <RCCEx_PLL3_Config+0x15c>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a4e      	ldr	r2, [pc, #312]	@ (8006900 <RCCEx_PLL3_Config+0x15c>)
 80067c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067ce:	f7fa fca5 	bl	800111c <HAL_GetTick>
 80067d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80067d4:	e008      	b.n	80067e8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80067d6:	f7fa fca1 	bl	800111c <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d901      	bls.n	80067e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e086      	b.n	80068f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80067e8:	4b45      	ldr	r3, [pc, #276]	@ (8006900 <RCCEx_PLL3_Config+0x15c>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1f0      	bne.n	80067d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80067f4:	4b42      	ldr	r3, [pc, #264]	@ (8006900 <RCCEx_PLL3_Config+0x15c>)
 80067f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	051b      	lsls	r3, r3, #20
 8006802:	493f      	ldr	r1, [pc, #252]	@ (8006900 <RCCEx_PLL3_Config+0x15c>)
 8006804:	4313      	orrs	r3, r2
 8006806:	628b      	str	r3, [r1, #40]	@ 0x28
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	3b01      	subs	r3, #1
 800680e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	3b01      	subs	r3, #1
 8006818:	025b      	lsls	r3, r3, #9
 800681a:	b29b      	uxth	r3, r3
 800681c:	431a      	orrs	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	3b01      	subs	r3, #1
 8006824:	041b      	lsls	r3, r3, #16
 8006826:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800682a:	431a      	orrs	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	3b01      	subs	r3, #1
 8006832:	061b      	lsls	r3, r3, #24
 8006834:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006838:	4931      	ldr	r1, [pc, #196]	@ (8006900 <RCCEx_PLL3_Config+0x15c>)
 800683a:	4313      	orrs	r3, r2
 800683c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800683e:	4b30      	ldr	r3, [pc, #192]	@ (8006900 <RCCEx_PLL3_Config+0x15c>)
 8006840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006842:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	492d      	ldr	r1, [pc, #180]	@ (8006900 <RCCEx_PLL3_Config+0x15c>)
 800684c:	4313      	orrs	r3, r2
 800684e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006850:	4b2b      	ldr	r3, [pc, #172]	@ (8006900 <RCCEx_PLL3_Config+0x15c>)
 8006852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006854:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	4928      	ldr	r1, [pc, #160]	@ (8006900 <RCCEx_PLL3_Config+0x15c>)
 800685e:	4313      	orrs	r3, r2
 8006860:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006862:	4b27      	ldr	r3, [pc, #156]	@ (8006900 <RCCEx_PLL3_Config+0x15c>)
 8006864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006866:	4a26      	ldr	r2, [pc, #152]	@ (8006900 <RCCEx_PLL3_Config+0x15c>)
 8006868:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800686c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800686e:	4b24      	ldr	r3, [pc, #144]	@ (8006900 <RCCEx_PLL3_Config+0x15c>)
 8006870:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006872:	4b24      	ldr	r3, [pc, #144]	@ (8006904 <RCCEx_PLL3_Config+0x160>)
 8006874:	4013      	ands	r3, r2
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	69d2      	ldr	r2, [r2, #28]
 800687a:	00d2      	lsls	r2, r2, #3
 800687c:	4920      	ldr	r1, [pc, #128]	@ (8006900 <RCCEx_PLL3_Config+0x15c>)
 800687e:	4313      	orrs	r3, r2
 8006880:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006882:	4b1f      	ldr	r3, [pc, #124]	@ (8006900 <RCCEx_PLL3_Config+0x15c>)
 8006884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006886:	4a1e      	ldr	r2, [pc, #120]	@ (8006900 <RCCEx_PLL3_Config+0x15c>)
 8006888:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800688c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d106      	bne.n	80068a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006894:	4b1a      	ldr	r3, [pc, #104]	@ (8006900 <RCCEx_PLL3_Config+0x15c>)
 8006896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006898:	4a19      	ldr	r2, [pc, #100]	@ (8006900 <RCCEx_PLL3_Config+0x15c>)
 800689a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800689e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80068a0:	e00f      	b.n	80068c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d106      	bne.n	80068b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80068a8:	4b15      	ldr	r3, [pc, #84]	@ (8006900 <RCCEx_PLL3_Config+0x15c>)
 80068aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ac:	4a14      	ldr	r2, [pc, #80]	@ (8006900 <RCCEx_PLL3_Config+0x15c>)
 80068ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80068b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80068b4:	e005      	b.n	80068c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80068b6:	4b12      	ldr	r3, [pc, #72]	@ (8006900 <RCCEx_PLL3_Config+0x15c>)
 80068b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ba:	4a11      	ldr	r2, [pc, #68]	@ (8006900 <RCCEx_PLL3_Config+0x15c>)
 80068bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80068c2:	4b0f      	ldr	r3, [pc, #60]	@ (8006900 <RCCEx_PLL3_Config+0x15c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a0e      	ldr	r2, [pc, #56]	@ (8006900 <RCCEx_PLL3_Config+0x15c>)
 80068c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068ce:	f7fa fc25 	bl	800111c <HAL_GetTick>
 80068d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80068d4:	e008      	b.n	80068e8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80068d6:	f7fa fc21 	bl	800111c <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d901      	bls.n	80068e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e006      	b.n	80068f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80068e8:	4b05      	ldr	r3, [pc, #20]	@ (8006900 <RCCEx_PLL3_Config+0x15c>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d0f0      	beq.n	80068d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	58024400 	.word	0x58024400
 8006904:	ffff0007 	.word	0xffff0007

08006908 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e042      	b.n	80069a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006920:	2b00      	cmp	r3, #0
 8006922:	d106      	bne.n	8006932 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f7fa fa57 	bl	8000de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2224      	movs	r2, #36	@ 0x24
 8006936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 0201 	bic.w	r2, r2, #1
 8006948:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f001 fadc 	bl	8007f10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fd71 	bl	8007440 <UART_SetConfig>
 800695e:	4603      	mov	r3, r0
 8006960:	2b01      	cmp	r3, #1
 8006962:	d101      	bne.n	8006968 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e01b      	b.n	80069a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006976:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	689a      	ldr	r2, [r3, #8]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006986:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0201 	orr.w	r2, r2, #1
 8006996:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f001 fb5b 	bl	8008054 <UART_CheckIdleState>
 800699e:	4603      	mov	r3, r0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08a      	sub	sp, #40	@ 0x28
 80069ac:	af02      	add	r7, sp, #8
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	603b      	str	r3, [r7, #0]
 80069b4:	4613      	mov	r3, r2
 80069b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069be:	2b20      	cmp	r3, #32
 80069c0:	d17b      	bne.n	8006aba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d002      	beq.n	80069ce <HAL_UART_Transmit+0x26>
 80069c8:	88fb      	ldrh	r3, [r7, #6]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e074      	b.n	8006abc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2221      	movs	r2, #33	@ 0x21
 80069de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069e2:	f7fa fb9b 	bl	800111c <HAL_GetTick>
 80069e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	88fa      	ldrh	r2, [r7, #6]
 80069ec:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	88fa      	ldrh	r2, [r7, #6]
 80069f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a00:	d108      	bne.n	8006a14 <HAL_UART_Transmit+0x6c>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d104      	bne.n	8006a14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	61bb      	str	r3, [r7, #24]
 8006a12:	e003      	b.n	8006a1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a1c:	e030      	b.n	8006a80 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2200      	movs	r2, #0
 8006a26:	2180      	movs	r1, #128	@ 0x80
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f001 fbbd 	bl	80081a8 <UART_WaitOnFlagUntilTimeout>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d005      	beq.n	8006a40 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2220      	movs	r2, #32
 8006a38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e03d      	b.n	8006abc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10b      	bne.n	8006a5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	881b      	ldrh	r3, [r3, #0]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a54:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	3302      	adds	r3, #2
 8006a5a:	61bb      	str	r3, [r7, #24]
 8006a5c:	e007      	b.n	8006a6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	781a      	ldrb	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	3b01      	subs	r3, #1
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1c8      	bne.n	8006a1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	2200      	movs	r2, #0
 8006a94:	2140      	movs	r1, #64	@ 0x40
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f001 fb86 	bl	80081a8 <UART_WaitOnFlagUntilTimeout>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d005      	beq.n	8006aae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e006      	b.n	8006abc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	e000      	b.n	8006abc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006aba:	2302      	movs	r3, #2
  }
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3720      	adds	r7, #32
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b08a      	sub	sp, #40	@ 0x28
 8006ac8:	af02      	add	r7, sp, #8
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	603b      	str	r3, [r7, #0]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ada:	2b20      	cmp	r3, #32
 8006adc:	f040 80b5 	bne.w	8006c4a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d002      	beq.n	8006aec <HAL_UART_Receive+0x28>
 8006ae6:	88fb      	ldrh	r3, [r7, #6]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d101      	bne.n	8006af0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e0ad      	b.n	8006c4c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2222      	movs	r2, #34	@ 0x22
 8006afc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b06:	f7fa fb09 	bl	800111c <HAL_GetTick>
 8006b0a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	88fa      	ldrh	r2, [r7, #6]
 8006b10:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	88fa      	ldrh	r2, [r7, #6]
 8006b18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b24:	d10e      	bne.n	8006b44 <HAL_UART_Receive+0x80>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d105      	bne.n	8006b3a <HAL_UART_Receive+0x76>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006b34:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006b38:	e02d      	b.n	8006b96 <HAL_UART_Receive+0xd2>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	22ff      	movs	r2, #255	@ 0xff
 8006b3e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006b42:	e028      	b.n	8006b96 <HAL_UART_Receive+0xd2>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10d      	bne.n	8006b68 <HAL_UART_Receive+0xa4>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d104      	bne.n	8006b5e <HAL_UART_Receive+0x9a>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	22ff      	movs	r2, #255	@ 0xff
 8006b58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006b5c:	e01b      	b.n	8006b96 <HAL_UART_Receive+0xd2>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	227f      	movs	r2, #127	@ 0x7f
 8006b62:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006b66:	e016      	b.n	8006b96 <HAL_UART_Receive+0xd2>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b70:	d10d      	bne.n	8006b8e <HAL_UART_Receive+0xca>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d104      	bne.n	8006b84 <HAL_UART_Receive+0xc0>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	227f      	movs	r2, #127	@ 0x7f
 8006b7e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006b82:	e008      	b.n	8006b96 <HAL_UART_Receive+0xd2>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	223f      	movs	r2, #63	@ 0x3f
 8006b88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006b8c:	e003      	b.n	8006b96 <HAL_UART_Receive+0xd2>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006b9c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ba6:	d108      	bne.n	8006bba <HAL_UART_Receive+0xf6>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d104      	bne.n	8006bba <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	61bb      	str	r3, [r7, #24]
 8006bb8:	e003      	b.n	8006bc2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006bc2:	e036      	b.n	8006c32 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	2120      	movs	r1, #32
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f001 faea 	bl	80081a8 <UART_WaitOnFlagUntilTimeout>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d005      	beq.n	8006be6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e032      	b.n	8006c4c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10c      	bne.n	8006c06 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	8a7b      	ldrh	r3, [r7, #18]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	3302      	adds	r3, #2
 8006c02:	61bb      	str	r3, [r7, #24]
 8006c04:	e00c      	b.n	8006c20 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	8a7b      	ldrh	r3, [r7, #18]
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	4013      	ands	r3, r2
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1c2      	bne.n	8006bc4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2220      	movs	r2, #32
 8006c42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	e000      	b.n	8006c4c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8006c4a:	2302      	movs	r3, #2
  }
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3720      	adds	r7, #32
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b0ba      	sub	sp, #232	@ 0xe8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	69db      	ldr	r3, [r3, #28]
 8006c62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006c7e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006c82:	4013      	ands	r3, r2
 8006c84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006c88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d11b      	bne.n	8006cc8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c94:	f003 0320 	and.w	r3, r3, #32
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d015      	beq.n	8006cc8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ca0:	f003 0320 	and.w	r3, r3, #32
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d105      	bne.n	8006cb4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d009      	beq.n	8006cc8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 8393 	beq.w	80073e4 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	4798      	blx	r3
      }
      return;
 8006cc6:	e38d      	b.n	80073e4 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006cc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f000 8123 	beq.w	8006f18 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006cd2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006cd6:	4b8d      	ldr	r3, [pc, #564]	@ (8006f0c <HAL_UART_IRQHandler+0x2b8>)
 8006cd8:	4013      	ands	r3, r2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d106      	bne.n	8006cec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006cde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006ce2:	4b8b      	ldr	r3, [pc, #556]	@ (8006f10 <HAL_UART_IRQHandler+0x2bc>)
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f000 8116 	beq.w	8006f18 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d011      	beq.n	8006d1c <HAL_UART_IRQHandler+0xc8>
 8006cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00b      	beq.n	8006d1c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d12:	f043 0201 	orr.w	r2, r3, #1
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d20:	f003 0302 	and.w	r3, r3, #2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d011      	beq.n	8006d4c <HAL_UART_IRQHandler+0xf8>
 8006d28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00b      	beq.n	8006d4c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2202      	movs	r2, #2
 8006d3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d42:	f043 0204 	orr.w	r2, r3, #4
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d50:	f003 0304 	and.w	r3, r3, #4
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d011      	beq.n	8006d7c <HAL_UART_IRQHandler+0x128>
 8006d58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00b      	beq.n	8006d7c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2204      	movs	r2, #4
 8006d6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d72:	f043 0202 	orr.w	r2, r3, #2
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d80:	f003 0308 	and.w	r3, r3, #8
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d017      	beq.n	8006db8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d8c:	f003 0320 	and.w	r3, r3, #32
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d105      	bne.n	8006da0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d94:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006d98:	4b5c      	ldr	r3, [pc, #368]	@ (8006f0c <HAL_UART_IRQHandler+0x2b8>)
 8006d9a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00b      	beq.n	8006db8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2208      	movs	r2, #8
 8006da6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dae:	f043 0208 	orr.w	r2, r3, #8
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d012      	beq.n	8006dea <HAL_UART_IRQHandler+0x196>
 8006dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dc8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00c      	beq.n	8006dea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006dd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006de0:	f043 0220 	orr.w	r2, r3, #32
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 82f9 	beq.w	80073e8 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dfa:	f003 0320 	and.w	r3, r3, #32
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d013      	beq.n	8006e2a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e06:	f003 0320 	and.w	r3, r3, #32
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d105      	bne.n	8006e1a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d007      	beq.n	8006e2a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e30:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e3e:	2b40      	cmp	r3, #64	@ 0x40
 8006e40:	d005      	beq.n	8006e4e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e46:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d054      	beq.n	8006ef8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f001 fa18 	bl	8008284 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e5e:	2b40      	cmp	r3, #64	@ 0x40
 8006e60:	d146      	bne.n	8006ef0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3308      	adds	r3, #8
 8006e68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e70:	e853 3f00 	ldrex	r3, [r3]
 8006e74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006e78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	3308      	adds	r3, #8
 8006e8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006e8e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006e92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006e9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006e9e:	e841 2300 	strex	r3, r2, [r1]
 8006ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006ea6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1d9      	bne.n	8006e62 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d017      	beq.n	8006ee8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ebe:	4a15      	ldr	r2, [pc, #84]	@ (8006f14 <HAL_UART_IRQHandler+0x2c0>)
 8006ec0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fb f941 	bl	8002150 <HAL_DMA_Abort_IT>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d019      	beq.n	8006f08 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee6:	e00f      	b.n	8006f08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fa93 	bl	8007414 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eee:	e00b      	b.n	8006f08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fa8f 	bl	8007414 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef6:	e007      	b.n	8006f08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fa8b 	bl	8007414 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006f06:	e26f      	b.n	80073e8 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f08:	bf00      	nop
    return;
 8006f0a:	e26d      	b.n	80073e8 <HAL_UART_IRQHandler+0x794>
 8006f0c:	10000001 	.word	0x10000001
 8006f10:	04000120 	.word	0x04000120
 8006f14:	08008351 	.word	0x08008351

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	f040 8203 	bne.w	8007328 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f26:	f003 0310 	and.w	r3, r3, #16
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f000 81fc 	beq.w	8007328 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f34:	f003 0310 	and.w	r3, r3, #16
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f000 81f5 	beq.w	8007328 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2210      	movs	r2, #16
 8006f44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f50:	2b40      	cmp	r3, #64	@ 0x40
 8006f52:	f040 816d 	bne.w	8007230 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4aa4      	ldr	r2, [pc, #656]	@ (80071f0 <HAL_UART_IRQHandler+0x59c>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d068      	beq.n	8007036 <HAL_UART_IRQHandler+0x3e2>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4aa1      	ldr	r2, [pc, #644]	@ (80071f4 <HAL_UART_IRQHandler+0x5a0>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d061      	beq.n	8007036 <HAL_UART_IRQHandler+0x3e2>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a9f      	ldr	r2, [pc, #636]	@ (80071f8 <HAL_UART_IRQHandler+0x5a4>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d05a      	beq.n	8007036 <HAL_UART_IRQHandler+0x3e2>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a9c      	ldr	r2, [pc, #624]	@ (80071fc <HAL_UART_IRQHandler+0x5a8>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d053      	beq.n	8007036 <HAL_UART_IRQHandler+0x3e2>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a9a      	ldr	r2, [pc, #616]	@ (8007200 <HAL_UART_IRQHandler+0x5ac>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d04c      	beq.n	8007036 <HAL_UART_IRQHandler+0x3e2>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a97      	ldr	r2, [pc, #604]	@ (8007204 <HAL_UART_IRQHandler+0x5b0>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d045      	beq.n	8007036 <HAL_UART_IRQHandler+0x3e2>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a95      	ldr	r2, [pc, #596]	@ (8007208 <HAL_UART_IRQHandler+0x5b4>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d03e      	beq.n	8007036 <HAL_UART_IRQHandler+0x3e2>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a92      	ldr	r2, [pc, #584]	@ (800720c <HAL_UART_IRQHandler+0x5b8>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d037      	beq.n	8007036 <HAL_UART_IRQHandler+0x3e2>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a90      	ldr	r2, [pc, #576]	@ (8007210 <HAL_UART_IRQHandler+0x5bc>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d030      	beq.n	8007036 <HAL_UART_IRQHandler+0x3e2>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a8d      	ldr	r2, [pc, #564]	@ (8007214 <HAL_UART_IRQHandler+0x5c0>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d029      	beq.n	8007036 <HAL_UART_IRQHandler+0x3e2>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a8b      	ldr	r2, [pc, #556]	@ (8007218 <HAL_UART_IRQHandler+0x5c4>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d022      	beq.n	8007036 <HAL_UART_IRQHandler+0x3e2>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a88      	ldr	r2, [pc, #544]	@ (800721c <HAL_UART_IRQHandler+0x5c8>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d01b      	beq.n	8007036 <HAL_UART_IRQHandler+0x3e2>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a86      	ldr	r2, [pc, #536]	@ (8007220 <HAL_UART_IRQHandler+0x5cc>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d014      	beq.n	8007036 <HAL_UART_IRQHandler+0x3e2>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a83      	ldr	r2, [pc, #524]	@ (8007224 <HAL_UART_IRQHandler+0x5d0>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d00d      	beq.n	8007036 <HAL_UART_IRQHandler+0x3e2>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a81      	ldr	r2, [pc, #516]	@ (8007228 <HAL_UART_IRQHandler+0x5d4>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d006      	beq.n	8007036 <HAL_UART_IRQHandler+0x3e2>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a7e      	ldr	r2, [pc, #504]	@ (800722c <HAL_UART_IRQHandler+0x5d8>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d106      	bne.n	8007044 <HAL_UART_IRQHandler+0x3f0>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	b29b      	uxth	r3, r3
 8007042:	e005      	b.n	8007050 <HAL_UART_IRQHandler+0x3fc>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	b29b      	uxth	r3, r3
 8007050:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007054:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 80ad 	beq.w	80071b8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007064:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007068:	429a      	cmp	r2, r3
 800706a:	f080 80a5 	bcs.w	80071b8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007074:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007084:	f000 8087 	beq.w	8007196 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007090:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007094:	e853 3f00 	ldrex	r3, [r3]
 8007098:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800709c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	461a      	mov	r2, r3
 80070ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80070b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80070b6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80070be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80070c2:	e841 2300 	strex	r3, r2, [r1]
 80070c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80070ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1da      	bne.n	8007088 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	3308      	adds	r3, #8
 80070d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80070dc:	e853 3f00 	ldrex	r3, [r3]
 80070e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80070e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80070e4:	f023 0301 	bic.w	r3, r3, #1
 80070e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	3308      	adds	r3, #8
 80070f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80070f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80070fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80070fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007102:	e841 2300 	strex	r3, r2, [r1]
 8007106:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007108:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1e1      	bne.n	80070d2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	3308      	adds	r3, #8
 8007114:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007116:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007118:	e853 3f00 	ldrex	r3, [r3]
 800711c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800711e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007120:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007124:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	3308      	adds	r3, #8
 800712e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007132:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007134:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007136:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007138:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800713a:	e841 2300 	strex	r3, r2, [r1]
 800713e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007140:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1e3      	bne.n	800710e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2220      	movs	r2, #32
 800714a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800715c:	e853 3f00 	ldrex	r3, [r3]
 8007160:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007164:	f023 0310 	bic.w	r3, r3, #16
 8007168:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	461a      	mov	r2, r3
 8007172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007176:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007178:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800717c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800717e:	e841 2300 	strex	r3, r2, [r1]
 8007182:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007184:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1e4      	bne.n	8007154 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007190:	4618      	mov	r0, r3
 8007192:	f7fa fcbf 	bl	8001b14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2202      	movs	r2, #2
 800719a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	4619      	mov	r1, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f939 	bl	8007428 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80071b6:	e119      	b.n	80073ec <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80071be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071c2:	429a      	cmp	r2, r3
 80071c4:	f040 8112 	bne.w	80073ec <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071ce:	69db      	ldr	r3, [r3, #28]
 80071d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071d4:	f040 810a 	bne.w	80073ec <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2202      	movs	r2, #2
 80071dc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80071e4:	4619      	mov	r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f91e 	bl	8007428 <HAL_UARTEx_RxEventCallback>
      return;
 80071ec:	e0fe      	b.n	80073ec <HAL_UART_IRQHandler+0x798>
 80071ee:	bf00      	nop
 80071f0:	40020010 	.word	0x40020010
 80071f4:	40020028 	.word	0x40020028
 80071f8:	40020040 	.word	0x40020040
 80071fc:	40020058 	.word	0x40020058
 8007200:	40020070 	.word	0x40020070
 8007204:	40020088 	.word	0x40020088
 8007208:	400200a0 	.word	0x400200a0
 800720c:	400200b8 	.word	0x400200b8
 8007210:	40020410 	.word	0x40020410
 8007214:	40020428 	.word	0x40020428
 8007218:	40020440 	.word	0x40020440
 800721c:	40020458 	.word	0x40020458
 8007220:	40020470 	.word	0x40020470
 8007224:	40020488 	.word	0x40020488
 8007228:	400204a0 	.word	0x400204a0
 800722c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800723c:	b29b      	uxth	r3, r3
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800724a:	b29b      	uxth	r3, r3
 800724c:	2b00      	cmp	r3, #0
 800724e:	f000 80cf 	beq.w	80073f0 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8007252:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007256:	2b00      	cmp	r3, #0
 8007258:	f000 80ca 	beq.w	80073f0 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007264:	e853 3f00 	ldrex	r3, [r3]
 8007268:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800726a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800726c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007270:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	461a      	mov	r2, r3
 800727a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800727e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007280:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007282:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007284:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007286:	e841 2300 	strex	r3, r2, [r1]
 800728a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800728c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1e4      	bne.n	800725c <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3308      	adds	r3, #8
 8007298:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729c:	e853 3f00 	ldrex	r3, [r3]
 80072a0:	623b      	str	r3, [r7, #32]
   return(result);
 80072a2:	6a3a      	ldr	r2, [r7, #32]
 80072a4:	4b55      	ldr	r3, [pc, #340]	@ (80073fc <HAL_UART_IRQHandler+0x7a8>)
 80072a6:	4013      	ands	r3, r2
 80072a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	3308      	adds	r3, #8
 80072b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80072b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80072b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072be:	e841 2300 	strex	r3, r2, [r1]
 80072c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1e3      	bne.n	8007292 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2220      	movs	r2, #32
 80072ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	e853 3f00 	ldrex	r3, [r3]
 80072ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f023 0310 	bic.w	r3, r3, #16
 80072f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	461a      	mov	r2, r3
 80072fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007300:	61fb      	str	r3, [r7, #28]
 8007302:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007304:	69b9      	ldr	r1, [r7, #24]
 8007306:	69fa      	ldr	r2, [r7, #28]
 8007308:	e841 2300 	strex	r3, r2, [r1]
 800730c:	617b      	str	r3, [r7, #20]
   return(result);
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e4      	bne.n	80072de <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2202      	movs	r2, #2
 8007318:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800731a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800731e:	4619      	mov	r1, r3
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f881 	bl	8007428 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007326:	e063      	b.n	80073f0 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800732c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00e      	beq.n	8007352 <HAL_UART_IRQHandler+0x6fe>
 8007334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007338:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d008      	beq.n	8007352 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007348:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f001 f83d 	bl	80083ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007350:	e051      	b.n	80073f6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800735a:	2b00      	cmp	r3, #0
 800735c:	d014      	beq.n	8007388 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800735e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007366:	2b00      	cmp	r3, #0
 8007368:	d105      	bne.n	8007376 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800736a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800736e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d008      	beq.n	8007388 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800737a:	2b00      	cmp	r3, #0
 800737c:	d03a      	beq.n	80073f4 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	4798      	blx	r3
    }
    return;
 8007386:	e035      	b.n	80073f4 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800738c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007390:	2b00      	cmp	r3, #0
 8007392:	d009      	beq.n	80073a8 <HAL_UART_IRQHandler+0x754>
 8007394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800739c:	2b00      	cmp	r3, #0
 800739e:	d003      	beq.n	80073a8 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 ffe7 	bl	8008374 <UART_EndTransmit_IT>
    return;
 80073a6:	e026      	b.n	80073f6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80073a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d009      	beq.n	80073c8 <HAL_UART_IRQHandler+0x774>
 80073b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073b8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d003      	beq.n	80073c8 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f001 f816 	bl	80083f2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80073c6:	e016      	b.n	80073f6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80073c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d010      	beq.n	80073f6 <HAL_UART_IRQHandler+0x7a2>
 80073d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	da0c      	bge.n	80073f6 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fffe 	bl	80083de <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80073e2:	e008      	b.n	80073f6 <HAL_UART_IRQHandler+0x7a2>
      return;
 80073e4:	bf00      	nop
 80073e6:	e006      	b.n	80073f6 <HAL_UART_IRQHandler+0x7a2>
    return;
 80073e8:	bf00      	nop
 80073ea:	e004      	b.n	80073f6 <HAL_UART_IRQHandler+0x7a2>
      return;
 80073ec:	bf00      	nop
 80073ee:	e002      	b.n	80073f6 <HAL_UART_IRQHandler+0x7a2>
      return;
 80073f0:	bf00      	nop
 80073f2:	e000      	b.n	80073f6 <HAL_UART_IRQHandler+0x7a2>
    return;
 80073f4:	bf00      	nop
  }
}
 80073f6:	37e8      	adds	r7, #232	@ 0xe8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	effffffe 	.word	0xeffffffe

08007400 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007444:	b092      	sub	sp, #72	@ 0x48
 8007446:	af00      	add	r7, sp, #0
 8007448:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	689a      	ldr	r2, [r3, #8]
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	431a      	orrs	r2, r3
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	431a      	orrs	r2, r3
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	69db      	ldr	r3, [r3, #28]
 8007464:	4313      	orrs	r3, r2
 8007466:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	4bbe      	ldr	r3, [pc, #760]	@ (8007768 <UART_SetConfig+0x328>)
 8007470:	4013      	ands	r3, r2
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	6812      	ldr	r2, [r2, #0]
 8007476:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007478:	430b      	orrs	r3, r1
 800747a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	68da      	ldr	r2, [r3, #12]
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	430a      	orrs	r2, r1
 8007490:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	699b      	ldr	r3, [r3, #24]
 8007496:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4ab3      	ldr	r2, [pc, #716]	@ (800776c <UART_SetConfig+0x32c>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d004      	beq.n	80074ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074a8:	4313      	orrs	r3, r2
 80074aa:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	689a      	ldr	r2, [r3, #8]
 80074b2:	4baf      	ldr	r3, [pc, #700]	@ (8007770 <UART_SetConfig+0x330>)
 80074b4:	4013      	ands	r3, r2
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	6812      	ldr	r2, [r2, #0]
 80074ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80074bc:	430b      	orrs	r3, r1
 80074be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c6:	f023 010f 	bic.w	r1, r3, #15
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4aa6      	ldr	r2, [pc, #664]	@ (8007774 <UART_SetConfig+0x334>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d177      	bne.n	80075d0 <UART_SetConfig+0x190>
 80074e0:	4ba5      	ldr	r3, [pc, #660]	@ (8007778 <UART_SetConfig+0x338>)
 80074e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074e8:	2b28      	cmp	r3, #40	@ 0x28
 80074ea:	d86d      	bhi.n	80075c8 <UART_SetConfig+0x188>
 80074ec:	a201      	add	r2, pc, #4	@ (adr r2, 80074f4 <UART_SetConfig+0xb4>)
 80074ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f2:	bf00      	nop
 80074f4:	08007599 	.word	0x08007599
 80074f8:	080075c9 	.word	0x080075c9
 80074fc:	080075c9 	.word	0x080075c9
 8007500:	080075c9 	.word	0x080075c9
 8007504:	080075c9 	.word	0x080075c9
 8007508:	080075c9 	.word	0x080075c9
 800750c:	080075c9 	.word	0x080075c9
 8007510:	080075c9 	.word	0x080075c9
 8007514:	080075a1 	.word	0x080075a1
 8007518:	080075c9 	.word	0x080075c9
 800751c:	080075c9 	.word	0x080075c9
 8007520:	080075c9 	.word	0x080075c9
 8007524:	080075c9 	.word	0x080075c9
 8007528:	080075c9 	.word	0x080075c9
 800752c:	080075c9 	.word	0x080075c9
 8007530:	080075c9 	.word	0x080075c9
 8007534:	080075a9 	.word	0x080075a9
 8007538:	080075c9 	.word	0x080075c9
 800753c:	080075c9 	.word	0x080075c9
 8007540:	080075c9 	.word	0x080075c9
 8007544:	080075c9 	.word	0x080075c9
 8007548:	080075c9 	.word	0x080075c9
 800754c:	080075c9 	.word	0x080075c9
 8007550:	080075c9 	.word	0x080075c9
 8007554:	080075b1 	.word	0x080075b1
 8007558:	080075c9 	.word	0x080075c9
 800755c:	080075c9 	.word	0x080075c9
 8007560:	080075c9 	.word	0x080075c9
 8007564:	080075c9 	.word	0x080075c9
 8007568:	080075c9 	.word	0x080075c9
 800756c:	080075c9 	.word	0x080075c9
 8007570:	080075c9 	.word	0x080075c9
 8007574:	080075b9 	.word	0x080075b9
 8007578:	080075c9 	.word	0x080075c9
 800757c:	080075c9 	.word	0x080075c9
 8007580:	080075c9 	.word	0x080075c9
 8007584:	080075c9 	.word	0x080075c9
 8007588:	080075c9 	.word	0x080075c9
 800758c:	080075c9 	.word	0x080075c9
 8007590:	080075c9 	.word	0x080075c9
 8007594:	080075c1 	.word	0x080075c1
 8007598:	2301      	movs	r3, #1
 800759a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800759e:	e222      	b.n	80079e6 <UART_SetConfig+0x5a6>
 80075a0:	2304      	movs	r3, #4
 80075a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075a6:	e21e      	b.n	80079e6 <UART_SetConfig+0x5a6>
 80075a8:	2308      	movs	r3, #8
 80075aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ae:	e21a      	b.n	80079e6 <UART_SetConfig+0x5a6>
 80075b0:	2310      	movs	r3, #16
 80075b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075b6:	e216      	b.n	80079e6 <UART_SetConfig+0x5a6>
 80075b8:	2320      	movs	r3, #32
 80075ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075be:	e212      	b.n	80079e6 <UART_SetConfig+0x5a6>
 80075c0:	2340      	movs	r3, #64	@ 0x40
 80075c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075c6:	e20e      	b.n	80079e6 <UART_SetConfig+0x5a6>
 80075c8:	2380      	movs	r3, #128	@ 0x80
 80075ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ce:	e20a      	b.n	80079e6 <UART_SetConfig+0x5a6>
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a69      	ldr	r2, [pc, #420]	@ (800777c <UART_SetConfig+0x33c>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d130      	bne.n	800763c <UART_SetConfig+0x1fc>
 80075da:	4b67      	ldr	r3, [pc, #412]	@ (8007778 <UART_SetConfig+0x338>)
 80075dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075de:	f003 0307 	and.w	r3, r3, #7
 80075e2:	2b05      	cmp	r3, #5
 80075e4:	d826      	bhi.n	8007634 <UART_SetConfig+0x1f4>
 80075e6:	a201      	add	r2, pc, #4	@ (adr r2, 80075ec <UART_SetConfig+0x1ac>)
 80075e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ec:	08007605 	.word	0x08007605
 80075f0:	0800760d 	.word	0x0800760d
 80075f4:	08007615 	.word	0x08007615
 80075f8:	0800761d 	.word	0x0800761d
 80075fc:	08007625 	.word	0x08007625
 8007600:	0800762d 	.word	0x0800762d
 8007604:	2300      	movs	r3, #0
 8007606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800760a:	e1ec      	b.n	80079e6 <UART_SetConfig+0x5a6>
 800760c:	2304      	movs	r3, #4
 800760e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007612:	e1e8      	b.n	80079e6 <UART_SetConfig+0x5a6>
 8007614:	2308      	movs	r3, #8
 8007616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800761a:	e1e4      	b.n	80079e6 <UART_SetConfig+0x5a6>
 800761c:	2310      	movs	r3, #16
 800761e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007622:	e1e0      	b.n	80079e6 <UART_SetConfig+0x5a6>
 8007624:	2320      	movs	r3, #32
 8007626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800762a:	e1dc      	b.n	80079e6 <UART_SetConfig+0x5a6>
 800762c:	2340      	movs	r3, #64	@ 0x40
 800762e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007632:	e1d8      	b.n	80079e6 <UART_SetConfig+0x5a6>
 8007634:	2380      	movs	r3, #128	@ 0x80
 8007636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800763a:	e1d4      	b.n	80079e6 <UART_SetConfig+0x5a6>
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a4f      	ldr	r2, [pc, #316]	@ (8007780 <UART_SetConfig+0x340>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d130      	bne.n	80076a8 <UART_SetConfig+0x268>
 8007646:	4b4c      	ldr	r3, [pc, #304]	@ (8007778 <UART_SetConfig+0x338>)
 8007648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800764a:	f003 0307 	and.w	r3, r3, #7
 800764e:	2b05      	cmp	r3, #5
 8007650:	d826      	bhi.n	80076a0 <UART_SetConfig+0x260>
 8007652:	a201      	add	r2, pc, #4	@ (adr r2, 8007658 <UART_SetConfig+0x218>)
 8007654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007658:	08007671 	.word	0x08007671
 800765c:	08007679 	.word	0x08007679
 8007660:	08007681 	.word	0x08007681
 8007664:	08007689 	.word	0x08007689
 8007668:	08007691 	.word	0x08007691
 800766c:	08007699 	.word	0x08007699
 8007670:	2300      	movs	r3, #0
 8007672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007676:	e1b6      	b.n	80079e6 <UART_SetConfig+0x5a6>
 8007678:	2304      	movs	r3, #4
 800767a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800767e:	e1b2      	b.n	80079e6 <UART_SetConfig+0x5a6>
 8007680:	2308      	movs	r3, #8
 8007682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007686:	e1ae      	b.n	80079e6 <UART_SetConfig+0x5a6>
 8007688:	2310      	movs	r3, #16
 800768a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800768e:	e1aa      	b.n	80079e6 <UART_SetConfig+0x5a6>
 8007690:	2320      	movs	r3, #32
 8007692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007696:	e1a6      	b.n	80079e6 <UART_SetConfig+0x5a6>
 8007698:	2340      	movs	r3, #64	@ 0x40
 800769a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800769e:	e1a2      	b.n	80079e6 <UART_SetConfig+0x5a6>
 80076a0:	2380      	movs	r3, #128	@ 0x80
 80076a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076a6:	e19e      	b.n	80079e6 <UART_SetConfig+0x5a6>
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a35      	ldr	r2, [pc, #212]	@ (8007784 <UART_SetConfig+0x344>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d130      	bne.n	8007714 <UART_SetConfig+0x2d4>
 80076b2:	4b31      	ldr	r3, [pc, #196]	@ (8007778 <UART_SetConfig+0x338>)
 80076b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076b6:	f003 0307 	and.w	r3, r3, #7
 80076ba:	2b05      	cmp	r3, #5
 80076bc:	d826      	bhi.n	800770c <UART_SetConfig+0x2cc>
 80076be:	a201      	add	r2, pc, #4	@ (adr r2, 80076c4 <UART_SetConfig+0x284>)
 80076c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c4:	080076dd 	.word	0x080076dd
 80076c8:	080076e5 	.word	0x080076e5
 80076cc:	080076ed 	.word	0x080076ed
 80076d0:	080076f5 	.word	0x080076f5
 80076d4:	080076fd 	.word	0x080076fd
 80076d8:	08007705 	.word	0x08007705
 80076dc:	2300      	movs	r3, #0
 80076de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076e2:	e180      	b.n	80079e6 <UART_SetConfig+0x5a6>
 80076e4:	2304      	movs	r3, #4
 80076e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ea:	e17c      	b.n	80079e6 <UART_SetConfig+0x5a6>
 80076ec:	2308      	movs	r3, #8
 80076ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076f2:	e178      	b.n	80079e6 <UART_SetConfig+0x5a6>
 80076f4:	2310      	movs	r3, #16
 80076f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076fa:	e174      	b.n	80079e6 <UART_SetConfig+0x5a6>
 80076fc:	2320      	movs	r3, #32
 80076fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007702:	e170      	b.n	80079e6 <UART_SetConfig+0x5a6>
 8007704:	2340      	movs	r3, #64	@ 0x40
 8007706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800770a:	e16c      	b.n	80079e6 <UART_SetConfig+0x5a6>
 800770c:	2380      	movs	r3, #128	@ 0x80
 800770e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007712:	e168      	b.n	80079e6 <UART_SetConfig+0x5a6>
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a1b      	ldr	r2, [pc, #108]	@ (8007788 <UART_SetConfig+0x348>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d142      	bne.n	80077a4 <UART_SetConfig+0x364>
 800771e:	4b16      	ldr	r3, [pc, #88]	@ (8007778 <UART_SetConfig+0x338>)
 8007720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007722:	f003 0307 	and.w	r3, r3, #7
 8007726:	2b05      	cmp	r3, #5
 8007728:	d838      	bhi.n	800779c <UART_SetConfig+0x35c>
 800772a:	a201      	add	r2, pc, #4	@ (adr r2, 8007730 <UART_SetConfig+0x2f0>)
 800772c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007730:	08007749 	.word	0x08007749
 8007734:	08007751 	.word	0x08007751
 8007738:	08007759 	.word	0x08007759
 800773c:	08007761 	.word	0x08007761
 8007740:	0800778d 	.word	0x0800778d
 8007744:	08007795 	.word	0x08007795
 8007748:	2300      	movs	r3, #0
 800774a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800774e:	e14a      	b.n	80079e6 <UART_SetConfig+0x5a6>
 8007750:	2304      	movs	r3, #4
 8007752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007756:	e146      	b.n	80079e6 <UART_SetConfig+0x5a6>
 8007758:	2308      	movs	r3, #8
 800775a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800775e:	e142      	b.n	80079e6 <UART_SetConfig+0x5a6>
 8007760:	2310      	movs	r3, #16
 8007762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007766:	e13e      	b.n	80079e6 <UART_SetConfig+0x5a6>
 8007768:	cfff69f3 	.word	0xcfff69f3
 800776c:	58000c00 	.word	0x58000c00
 8007770:	11fff4ff 	.word	0x11fff4ff
 8007774:	40011000 	.word	0x40011000
 8007778:	58024400 	.word	0x58024400
 800777c:	40004400 	.word	0x40004400
 8007780:	40004800 	.word	0x40004800
 8007784:	40004c00 	.word	0x40004c00
 8007788:	40005000 	.word	0x40005000
 800778c:	2320      	movs	r3, #32
 800778e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007792:	e128      	b.n	80079e6 <UART_SetConfig+0x5a6>
 8007794:	2340      	movs	r3, #64	@ 0x40
 8007796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800779a:	e124      	b.n	80079e6 <UART_SetConfig+0x5a6>
 800779c:	2380      	movs	r3, #128	@ 0x80
 800779e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077a2:	e120      	b.n	80079e6 <UART_SetConfig+0x5a6>
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4acb      	ldr	r2, [pc, #812]	@ (8007ad8 <UART_SetConfig+0x698>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d176      	bne.n	800789c <UART_SetConfig+0x45c>
 80077ae:	4bcb      	ldr	r3, [pc, #812]	@ (8007adc <UART_SetConfig+0x69c>)
 80077b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077b6:	2b28      	cmp	r3, #40	@ 0x28
 80077b8:	d86c      	bhi.n	8007894 <UART_SetConfig+0x454>
 80077ba:	a201      	add	r2, pc, #4	@ (adr r2, 80077c0 <UART_SetConfig+0x380>)
 80077bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c0:	08007865 	.word	0x08007865
 80077c4:	08007895 	.word	0x08007895
 80077c8:	08007895 	.word	0x08007895
 80077cc:	08007895 	.word	0x08007895
 80077d0:	08007895 	.word	0x08007895
 80077d4:	08007895 	.word	0x08007895
 80077d8:	08007895 	.word	0x08007895
 80077dc:	08007895 	.word	0x08007895
 80077e0:	0800786d 	.word	0x0800786d
 80077e4:	08007895 	.word	0x08007895
 80077e8:	08007895 	.word	0x08007895
 80077ec:	08007895 	.word	0x08007895
 80077f0:	08007895 	.word	0x08007895
 80077f4:	08007895 	.word	0x08007895
 80077f8:	08007895 	.word	0x08007895
 80077fc:	08007895 	.word	0x08007895
 8007800:	08007875 	.word	0x08007875
 8007804:	08007895 	.word	0x08007895
 8007808:	08007895 	.word	0x08007895
 800780c:	08007895 	.word	0x08007895
 8007810:	08007895 	.word	0x08007895
 8007814:	08007895 	.word	0x08007895
 8007818:	08007895 	.word	0x08007895
 800781c:	08007895 	.word	0x08007895
 8007820:	0800787d 	.word	0x0800787d
 8007824:	08007895 	.word	0x08007895
 8007828:	08007895 	.word	0x08007895
 800782c:	08007895 	.word	0x08007895
 8007830:	08007895 	.word	0x08007895
 8007834:	08007895 	.word	0x08007895
 8007838:	08007895 	.word	0x08007895
 800783c:	08007895 	.word	0x08007895
 8007840:	08007885 	.word	0x08007885
 8007844:	08007895 	.word	0x08007895
 8007848:	08007895 	.word	0x08007895
 800784c:	08007895 	.word	0x08007895
 8007850:	08007895 	.word	0x08007895
 8007854:	08007895 	.word	0x08007895
 8007858:	08007895 	.word	0x08007895
 800785c:	08007895 	.word	0x08007895
 8007860:	0800788d 	.word	0x0800788d
 8007864:	2301      	movs	r3, #1
 8007866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800786a:	e0bc      	b.n	80079e6 <UART_SetConfig+0x5a6>
 800786c:	2304      	movs	r3, #4
 800786e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007872:	e0b8      	b.n	80079e6 <UART_SetConfig+0x5a6>
 8007874:	2308      	movs	r3, #8
 8007876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800787a:	e0b4      	b.n	80079e6 <UART_SetConfig+0x5a6>
 800787c:	2310      	movs	r3, #16
 800787e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007882:	e0b0      	b.n	80079e6 <UART_SetConfig+0x5a6>
 8007884:	2320      	movs	r3, #32
 8007886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800788a:	e0ac      	b.n	80079e6 <UART_SetConfig+0x5a6>
 800788c:	2340      	movs	r3, #64	@ 0x40
 800788e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007892:	e0a8      	b.n	80079e6 <UART_SetConfig+0x5a6>
 8007894:	2380      	movs	r3, #128	@ 0x80
 8007896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800789a:	e0a4      	b.n	80079e6 <UART_SetConfig+0x5a6>
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a8f      	ldr	r2, [pc, #572]	@ (8007ae0 <UART_SetConfig+0x6a0>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d130      	bne.n	8007908 <UART_SetConfig+0x4c8>
 80078a6:	4b8d      	ldr	r3, [pc, #564]	@ (8007adc <UART_SetConfig+0x69c>)
 80078a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078aa:	f003 0307 	and.w	r3, r3, #7
 80078ae:	2b05      	cmp	r3, #5
 80078b0:	d826      	bhi.n	8007900 <UART_SetConfig+0x4c0>
 80078b2:	a201      	add	r2, pc, #4	@ (adr r2, 80078b8 <UART_SetConfig+0x478>)
 80078b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b8:	080078d1 	.word	0x080078d1
 80078bc:	080078d9 	.word	0x080078d9
 80078c0:	080078e1 	.word	0x080078e1
 80078c4:	080078e9 	.word	0x080078e9
 80078c8:	080078f1 	.word	0x080078f1
 80078cc:	080078f9 	.word	0x080078f9
 80078d0:	2300      	movs	r3, #0
 80078d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078d6:	e086      	b.n	80079e6 <UART_SetConfig+0x5a6>
 80078d8:	2304      	movs	r3, #4
 80078da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078de:	e082      	b.n	80079e6 <UART_SetConfig+0x5a6>
 80078e0:	2308      	movs	r3, #8
 80078e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078e6:	e07e      	b.n	80079e6 <UART_SetConfig+0x5a6>
 80078e8:	2310      	movs	r3, #16
 80078ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ee:	e07a      	b.n	80079e6 <UART_SetConfig+0x5a6>
 80078f0:	2320      	movs	r3, #32
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f6:	e076      	b.n	80079e6 <UART_SetConfig+0x5a6>
 80078f8:	2340      	movs	r3, #64	@ 0x40
 80078fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078fe:	e072      	b.n	80079e6 <UART_SetConfig+0x5a6>
 8007900:	2380      	movs	r3, #128	@ 0x80
 8007902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007906:	e06e      	b.n	80079e6 <UART_SetConfig+0x5a6>
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a75      	ldr	r2, [pc, #468]	@ (8007ae4 <UART_SetConfig+0x6a4>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d130      	bne.n	8007974 <UART_SetConfig+0x534>
 8007912:	4b72      	ldr	r3, [pc, #456]	@ (8007adc <UART_SetConfig+0x69c>)
 8007914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007916:	f003 0307 	and.w	r3, r3, #7
 800791a:	2b05      	cmp	r3, #5
 800791c:	d826      	bhi.n	800796c <UART_SetConfig+0x52c>
 800791e:	a201      	add	r2, pc, #4	@ (adr r2, 8007924 <UART_SetConfig+0x4e4>)
 8007920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007924:	0800793d 	.word	0x0800793d
 8007928:	08007945 	.word	0x08007945
 800792c:	0800794d 	.word	0x0800794d
 8007930:	08007955 	.word	0x08007955
 8007934:	0800795d 	.word	0x0800795d
 8007938:	08007965 	.word	0x08007965
 800793c:	2300      	movs	r3, #0
 800793e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007942:	e050      	b.n	80079e6 <UART_SetConfig+0x5a6>
 8007944:	2304      	movs	r3, #4
 8007946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800794a:	e04c      	b.n	80079e6 <UART_SetConfig+0x5a6>
 800794c:	2308      	movs	r3, #8
 800794e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007952:	e048      	b.n	80079e6 <UART_SetConfig+0x5a6>
 8007954:	2310      	movs	r3, #16
 8007956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795a:	e044      	b.n	80079e6 <UART_SetConfig+0x5a6>
 800795c:	2320      	movs	r3, #32
 800795e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007962:	e040      	b.n	80079e6 <UART_SetConfig+0x5a6>
 8007964:	2340      	movs	r3, #64	@ 0x40
 8007966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800796a:	e03c      	b.n	80079e6 <UART_SetConfig+0x5a6>
 800796c:	2380      	movs	r3, #128	@ 0x80
 800796e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007972:	e038      	b.n	80079e6 <UART_SetConfig+0x5a6>
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a5b      	ldr	r2, [pc, #364]	@ (8007ae8 <UART_SetConfig+0x6a8>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d130      	bne.n	80079e0 <UART_SetConfig+0x5a0>
 800797e:	4b57      	ldr	r3, [pc, #348]	@ (8007adc <UART_SetConfig+0x69c>)
 8007980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007982:	f003 0307 	and.w	r3, r3, #7
 8007986:	2b05      	cmp	r3, #5
 8007988:	d826      	bhi.n	80079d8 <UART_SetConfig+0x598>
 800798a:	a201      	add	r2, pc, #4	@ (adr r2, 8007990 <UART_SetConfig+0x550>)
 800798c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007990:	080079a9 	.word	0x080079a9
 8007994:	080079b1 	.word	0x080079b1
 8007998:	080079b9 	.word	0x080079b9
 800799c:	080079c1 	.word	0x080079c1
 80079a0:	080079c9 	.word	0x080079c9
 80079a4:	080079d1 	.word	0x080079d1
 80079a8:	2302      	movs	r3, #2
 80079aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ae:	e01a      	b.n	80079e6 <UART_SetConfig+0x5a6>
 80079b0:	2304      	movs	r3, #4
 80079b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079b6:	e016      	b.n	80079e6 <UART_SetConfig+0x5a6>
 80079b8:	2308      	movs	r3, #8
 80079ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079be:	e012      	b.n	80079e6 <UART_SetConfig+0x5a6>
 80079c0:	2310      	movs	r3, #16
 80079c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079c6:	e00e      	b.n	80079e6 <UART_SetConfig+0x5a6>
 80079c8:	2320      	movs	r3, #32
 80079ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ce:	e00a      	b.n	80079e6 <UART_SetConfig+0x5a6>
 80079d0:	2340      	movs	r3, #64	@ 0x40
 80079d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079d6:	e006      	b.n	80079e6 <UART_SetConfig+0x5a6>
 80079d8:	2380      	movs	r3, #128	@ 0x80
 80079da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079de:	e002      	b.n	80079e6 <UART_SetConfig+0x5a6>
 80079e0:	2380      	movs	r3, #128	@ 0x80
 80079e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a3f      	ldr	r2, [pc, #252]	@ (8007ae8 <UART_SetConfig+0x6a8>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	f040 80f8 	bne.w	8007be2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079f2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80079f6:	2b20      	cmp	r3, #32
 80079f8:	dc46      	bgt.n	8007a88 <UART_SetConfig+0x648>
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	f2c0 8082 	blt.w	8007b04 <UART_SetConfig+0x6c4>
 8007a00:	3b02      	subs	r3, #2
 8007a02:	2b1e      	cmp	r3, #30
 8007a04:	d87e      	bhi.n	8007b04 <UART_SetConfig+0x6c4>
 8007a06:	a201      	add	r2, pc, #4	@ (adr r2, 8007a0c <UART_SetConfig+0x5cc>)
 8007a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0c:	08007a8f 	.word	0x08007a8f
 8007a10:	08007b05 	.word	0x08007b05
 8007a14:	08007a97 	.word	0x08007a97
 8007a18:	08007b05 	.word	0x08007b05
 8007a1c:	08007b05 	.word	0x08007b05
 8007a20:	08007b05 	.word	0x08007b05
 8007a24:	08007aa7 	.word	0x08007aa7
 8007a28:	08007b05 	.word	0x08007b05
 8007a2c:	08007b05 	.word	0x08007b05
 8007a30:	08007b05 	.word	0x08007b05
 8007a34:	08007b05 	.word	0x08007b05
 8007a38:	08007b05 	.word	0x08007b05
 8007a3c:	08007b05 	.word	0x08007b05
 8007a40:	08007b05 	.word	0x08007b05
 8007a44:	08007ab7 	.word	0x08007ab7
 8007a48:	08007b05 	.word	0x08007b05
 8007a4c:	08007b05 	.word	0x08007b05
 8007a50:	08007b05 	.word	0x08007b05
 8007a54:	08007b05 	.word	0x08007b05
 8007a58:	08007b05 	.word	0x08007b05
 8007a5c:	08007b05 	.word	0x08007b05
 8007a60:	08007b05 	.word	0x08007b05
 8007a64:	08007b05 	.word	0x08007b05
 8007a68:	08007b05 	.word	0x08007b05
 8007a6c:	08007b05 	.word	0x08007b05
 8007a70:	08007b05 	.word	0x08007b05
 8007a74:	08007b05 	.word	0x08007b05
 8007a78:	08007b05 	.word	0x08007b05
 8007a7c:	08007b05 	.word	0x08007b05
 8007a80:	08007b05 	.word	0x08007b05
 8007a84:	08007af7 	.word	0x08007af7
 8007a88:	2b40      	cmp	r3, #64	@ 0x40
 8007a8a:	d037      	beq.n	8007afc <UART_SetConfig+0x6bc>
 8007a8c:	e03a      	b.n	8007b04 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007a8e:	f7fe fb19 	bl	80060c4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007a92:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a94:	e03c      	b.n	8007b10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fe fb28 	bl	80060f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aa4:	e034      	b.n	8007b10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007aa6:	f107 0318 	add.w	r3, r7, #24
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fe fc74 	bl	8006398 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ab4:	e02c      	b.n	8007b10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ab6:	4b09      	ldr	r3, [pc, #36]	@ (8007adc <UART_SetConfig+0x69c>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0320 	and.w	r3, r3, #32
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d016      	beq.n	8007af0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ac2:	4b06      	ldr	r3, [pc, #24]	@ (8007adc <UART_SetConfig+0x69c>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	08db      	lsrs	r3, r3, #3
 8007ac8:	f003 0303 	and.w	r3, r3, #3
 8007acc:	4a07      	ldr	r2, [pc, #28]	@ (8007aec <UART_SetConfig+0x6ac>)
 8007ace:	fa22 f303 	lsr.w	r3, r2, r3
 8007ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ad4:	e01c      	b.n	8007b10 <UART_SetConfig+0x6d0>
 8007ad6:	bf00      	nop
 8007ad8:	40011400 	.word	0x40011400
 8007adc:	58024400 	.word	0x58024400
 8007ae0:	40007800 	.word	0x40007800
 8007ae4:	40007c00 	.word	0x40007c00
 8007ae8:	58000c00 	.word	0x58000c00
 8007aec:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007af0:	4b9d      	ldr	r3, [pc, #628]	@ (8007d68 <UART_SetConfig+0x928>)
 8007af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007af4:	e00c      	b.n	8007b10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007af6:	4b9d      	ldr	r3, [pc, #628]	@ (8007d6c <UART_SetConfig+0x92c>)
 8007af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007afa:	e009      	b.n	8007b10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007afc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b02:	e005      	b.n	8007b10 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007b04:	2300      	movs	r3, #0
 8007b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007b0e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f000 81de 	beq.w	8007ed4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b1c:	4a94      	ldr	r2, [pc, #592]	@ (8007d70 <UART_SetConfig+0x930>)
 8007b1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b22:	461a      	mov	r2, r3
 8007b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b26:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b2a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	685a      	ldr	r2, [r3, #4]
 8007b30:	4613      	mov	r3, r2
 8007b32:	005b      	lsls	r3, r3, #1
 8007b34:	4413      	add	r3, r2
 8007b36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d305      	bcc.n	8007b48 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d903      	bls.n	8007b50 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007b4e:	e1c1      	b.n	8007ed4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b52:	2200      	movs	r2, #0
 8007b54:	60bb      	str	r3, [r7, #8]
 8007b56:	60fa      	str	r2, [r7, #12]
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b5c:	4a84      	ldr	r2, [pc, #528]	@ (8007d70 <UART_SetConfig+0x930>)
 8007b5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	2200      	movs	r2, #0
 8007b66:	603b      	str	r3, [r7, #0]
 8007b68:	607a      	str	r2, [r7, #4]
 8007b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b72:	f7f8 fbb1 	bl	80002d8 <__aeabi_uldivmod>
 8007b76:	4602      	mov	r2, r0
 8007b78:	460b      	mov	r3, r1
 8007b7a:	4610      	mov	r0, r2
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	f04f 0200 	mov.w	r2, #0
 8007b82:	f04f 0300 	mov.w	r3, #0
 8007b86:	020b      	lsls	r3, r1, #8
 8007b88:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b8c:	0202      	lsls	r2, r0, #8
 8007b8e:	6979      	ldr	r1, [r7, #20]
 8007b90:	6849      	ldr	r1, [r1, #4]
 8007b92:	0849      	lsrs	r1, r1, #1
 8007b94:	2000      	movs	r0, #0
 8007b96:	460c      	mov	r4, r1
 8007b98:	4605      	mov	r5, r0
 8007b9a:	eb12 0804 	adds.w	r8, r2, r4
 8007b9e:	eb43 0905 	adc.w	r9, r3, r5
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	469a      	mov	sl, r3
 8007baa:	4693      	mov	fp, r2
 8007bac:	4652      	mov	r2, sl
 8007bae:	465b      	mov	r3, fp
 8007bb0:	4640      	mov	r0, r8
 8007bb2:	4649      	mov	r1, r9
 8007bb4:	f7f8 fb90 	bl	80002d8 <__aeabi_uldivmod>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	460b      	mov	r3, r1
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bc6:	d308      	bcc.n	8007bda <UART_SetConfig+0x79a>
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bce:	d204      	bcs.n	8007bda <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007bd6:	60da      	str	r2, [r3, #12]
 8007bd8:	e17c      	b.n	8007ed4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007be0:	e178      	b.n	8007ed4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	69db      	ldr	r3, [r3, #28]
 8007be6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bea:	f040 80c5 	bne.w	8007d78 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007bee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007bf2:	2b20      	cmp	r3, #32
 8007bf4:	dc48      	bgt.n	8007c88 <UART_SetConfig+0x848>
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	db7b      	blt.n	8007cf2 <UART_SetConfig+0x8b2>
 8007bfa:	2b20      	cmp	r3, #32
 8007bfc:	d879      	bhi.n	8007cf2 <UART_SetConfig+0x8b2>
 8007bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8007c04 <UART_SetConfig+0x7c4>)
 8007c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c04:	08007c8f 	.word	0x08007c8f
 8007c08:	08007c97 	.word	0x08007c97
 8007c0c:	08007cf3 	.word	0x08007cf3
 8007c10:	08007cf3 	.word	0x08007cf3
 8007c14:	08007c9f 	.word	0x08007c9f
 8007c18:	08007cf3 	.word	0x08007cf3
 8007c1c:	08007cf3 	.word	0x08007cf3
 8007c20:	08007cf3 	.word	0x08007cf3
 8007c24:	08007caf 	.word	0x08007caf
 8007c28:	08007cf3 	.word	0x08007cf3
 8007c2c:	08007cf3 	.word	0x08007cf3
 8007c30:	08007cf3 	.word	0x08007cf3
 8007c34:	08007cf3 	.word	0x08007cf3
 8007c38:	08007cf3 	.word	0x08007cf3
 8007c3c:	08007cf3 	.word	0x08007cf3
 8007c40:	08007cf3 	.word	0x08007cf3
 8007c44:	08007cbf 	.word	0x08007cbf
 8007c48:	08007cf3 	.word	0x08007cf3
 8007c4c:	08007cf3 	.word	0x08007cf3
 8007c50:	08007cf3 	.word	0x08007cf3
 8007c54:	08007cf3 	.word	0x08007cf3
 8007c58:	08007cf3 	.word	0x08007cf3
 8007c5c:	08007cf3 	.word	0x08007cf3
 8007c60:	08007cf3 	.word	0x08007cf3
 8007c64:	08007cf3 	.word	0x08007cf3
 8007c68:	08007cf3 	.word	0x08007cf3
 8007c6c:	08007cf3 	.word	0x08007cf3
 8007c70:	08007cf3 	.word	0x08007cf3
 8007c74:	08007cf3 	.word	0x08007cf3
 8007c78:	08007cf3 	.word	0x08007cf3
 8007c7c:	08007cf3 	.word	0x08007cf3
 8007c80:	08007cf3 	.word	0x08007cf3
 8007c84:	08007ce5 	.word	0x08007ce5
 8007c88:	2b40      	cmp	r3, #64	@ 0x40
 8007c8a:	d02e      	beq.n	8007cea <UART_SetConfig+0x8aa>
 8007c8c:	e031      	b.n	8007cf2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c8e:	f7fc ffe3 	bl	8004c58 <HAL_RCC_GetPCLK1Freq>
 8007c92:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c94:	e033      	b.n	8007cfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c96:	f7fc fff5 	bl	8004c84 <HAL_RCC_GetPCLK2Freq>
 8007c9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c9c:	e02f      	b.n	8007cfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fe fa24 	bl	80060f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cac:	e027      	b.n	8007cfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cae:	f107 0318 	add.w	r3, r7, #24
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fe fb70 	bl	8006398 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cbc:	e01f      	b.n	8007cfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cbe:	4b2d      	ldr	r3, [pc, #180]	@ (8007d74 <UART_SetConfig+0x934>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0320 	and.w	r3, r3, #32
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d009      	beq.n	8007cde <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cca:	4b2a      	ldr	r3, [pc, #168]	@ (8007d74 <UART_SetConfig+0x934>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	08db      	lsrs	r3, r3, #3
 8007cd0:	f003 0303 	and.w	r3, r3, #3
 8007cd4:	4a24      	ldr	r2, [pc, #144]	@ (8007d68 <UART_SetConfig+0x928>)
 8007cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8007cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007cdc:	e00f      	b.n	8007cfe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007cde:	4b22      	ldr	r3, [pc, #136]	@ (8007d68 <UART_SetConfig+0x928>)
 8007ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ce2:	e00c      	b.n	8007cfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ce4:	4b21      	ldr	r3, [pc, #132]	@ (8007d6c <UART_SetConfig+0x92c>)
 8007ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ce8:	e009      	b.n	8007cfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cf0:	e005      	b.n	8007cfe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007cfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 80e7 	beq.w	8007ed4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d0a:	4a19      	ldr	r2, [pc, #100]	@ (8007d70 <UART_SetConfig+0x930>)
 8007d0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d10:	461a      	mov	r2, r3
 8007d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d14:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d18:	005a      	lsls	r2, r3, #1
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	085b      	lsrs	r3, r3, #1
 8007d20:	441a      	add	r2, r3
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d2e:	2b0f      	cmp	r3, #15
 8007d30:	d916      	bls.n	8007d60 <UART_SetConfig+0x920>
 8007d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d38:	d212      	bcs.n	8007d60 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	f023 030f 	bic.w	r3, r3, #15
 8007d42:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d46:	085b      	lsrs	r3, r3, #1
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	f003 0307 	and.w	r3, r3, #7
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d52:	4313      	orrs	r3, r2
 8007d54:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007d5c:	60da      	str	r2, [r3, #12]
 8007d5e:	e0b9      	b.n	8007ed4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007d66:	e0b5      	b.n	8007ed4 <UART_SetConfig+0xa94>
 8007d68:	03d09000 	.word	0x03d09000
 8007d6c:	003d0900 	.word	0x003d0900
 8007d70:	080091e8 	.word	0x080091e8
 8007d74:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d78:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007d7c:	2b20      	cmp	r3, #32
 8007d7e:	dc49      	bgt.n	8007e14 <UART_SetConfig+0x9d4>
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	db7c      	blt.n	8007e7e <UART_SetConfig+0xa3e>
 8007d84:	2b20      	cmp	r3, #32
 8007d86:	d87a      	bhi.n	8007e7e <UART_SetConfig+0xa3e>
 8007d88:	a201      	add	r2, pc, #4	@ (adr r2, 8007d90 <UART_SetConfig+0x950>)
 8007d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8e:	bf00      	nop
 8007d90:	08007e1b 	.word	0x08007e1b
 8007d94:	08007e23 	.word	0x08007e23
 8007d98:	08007e7f 	.word	0x08007e7f
 8007d9c:	08007e7f 	.word	0x08007e7f
 8007da0:	08007e2b 	.word	0x08007e2b
 8007da4:	08007e7f 	.word	0x08007e7f
 8007da8:	08007e7f 	.word	0x08007e7f
 8007dac:	08007e7f 	.word	0x08007e7f
 8007db0:	08007e3b 	.word	0x08007e3b
 8007db4:	08007e7f 	.word	0x08007e7f
 8007db8:	08007e7f 	.word	0x08007e7f
 8007dbc:	08007e7f 	.word	0x08007e7f
 8007dc0:	08007e7f 	.word	0x08007e7f
 8007dc4:	08007e7f 	.word	0x08007e7f
 8007dc8:	08007e7f 	.word	0x08007e7f
 8007dcc:	08007e7f 	.word	0x08007e7f
 8007dd0:	08007e4b 	.word	0x08007e4b
 8007dd4:	08007e7f 	.word	0x08007e7f
 8007dd8:	08007e7f 	.word	0x08007e7f
 8007ddc:	08007e7f 	.word	0x08007e7f
 8007de0:	08007e7f 	.word	0x08007e7f
 8007de4:	08007e7f 	.word	0x08007e7f
 8007de8:	08007e7f 	.word	0x08007e7f
 8007dec:	08007e7f 	.word	0x08007e7f
 8007df0:	08007e7f 	.word	0x08007e7f
 8007df4:	08007e7f 	.word	0x08007e7f
 8007df8:	08007e7f 	.word	0x08007e7f
 8007dfc:	08007e7f 	.word	0x08007e7f
 8007e00:	08007e7f 	.word	0x08007e7f
 8007e04:	08007e7f 	.word	0x08007e7f
 8007e08:	08007e7f 	.word	0x08007e7f
 8007e0c:	08007e7f 	.word	0x08007e7f
 8007e10:	08007e71 	.word	0x08007e71
 8007e14:	2b40      	cmp	r3, #64	@ 0x40
 8007e16:	d02e      	beq.n	8007e76 <UART_SetConfig+0xa36>
 8007e18:	e031      	b.n	8007e7e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e1a:	f7fc ff1d 	bl	8004c58 <HAL_RCC_GetPCLK1Freq>
 8007e1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e20:	e033      	b.n	8007e8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e22:	f7fc ff2f 	bl	8004c84 <HAL_RCC_GetPCLK2Freq>
 8007e26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e28:	e02f      	b.n	8007e8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7fe f95e 	bl	80060f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e38:	e027      	b.n	8007e8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e3a:	f107 0318 	add.w	r3, r7, #24
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7fe faaa 	bl	8006398 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e48:	e01f      	b.n	8007e8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e4a:	4b2d      	ldr	r3, [pc, #180]	@ (8007f00 <UART_SetConfig+0xac0>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 0320 	and.w	r3, r3, #32
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d009      	beq.n	8007e6a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e56:	4b2a      	ldr	r3, [pc, #168]	@ (8007f00 <UART_SetConfig+0xac0>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	08db      	lsrs	r3, r3, #3
 8007e5c:	f003 0303 	and.w	r3, r3, #3
 8007e60:	4a28      	ldr	r2, [pc, #160]	@ (8007f04 <UART_SetConfig+0xac4>)
 8007e62:	fa22 f303 	lsr.w	r3, r2, r3
 8007e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e68:	e00f      	b.n	8007e8a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007e6a:	4b26      	ldr	r3, [pc, #152]	@ (8007f04 <UART_SetConfig+0xac4>)
 8007e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e6e:	e00c      	b.n	8007e8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e70:	4b25      	ldr	r3, [pc, #148]	@ (8007f08 <UART_SetConfig+0xac8>)
 8007e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e74:	e009      	b.n	8007e8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e7c:	e005      	b.n	8007e8a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007e88:	bf00      	nop
    }

    if (pclk != 0U)
 8007e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d021      	beq.n	8007ed4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e94:	4a1d      	ldr	r2, [pc, #116]	@ (8007f0c <UART_SetConfig+0xacc>)
 8007e96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	085b      	lsrs	r3, r3, #1
 8007ea8:	441a      	add	r2, r3
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb6:	2b0f      	cmp	r3, #15
 8007eb8:	d909      	bls.n	8007ece <UART_SetConfig+0xa8e>
 8007eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ec0:	d205      	bcs.n	8007ece <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	60da      	str	r2, [r3, #12]
 8007ecc:	e002      	b.n	8007ed4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	2200      	movs	r2, #0
 8007eee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007ef0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3748      	adds	r7, #72	@ 0x48
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007efe:	bf00      	nop
 8007f00:	58024400 	.word	0x58024400
 8007f04:	03d09000 	.word	0x03d09000
 8007f08:	003d0900 	.word	0x003d0900
 8007f0c:	080091e8 	.word	0x080091e8

08007f10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f1c:	f003 0308 	and.w	r3, r3, #8
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00a      	beq.n	8007f3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00a      	beq.n	8007f5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f60:	f003 0302 	and.w	r3, r3, #2
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00a      	beq.n	8007f7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f82:	f003 0304 	and.w	r3, r3, #4
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00a      	beq.n	8007fa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	430a      	orrs	r2, r1
 8007f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa4:	f003 0310 	and.w	r3, r3, #16
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00a      	beq.n	8007fc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc6:	f003 0320 	and.w	r3, r3, #32
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00a      	beq.n	8007fe4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d01a      	beq.n	8008026 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	430a      	orrs	r2, r1
 8008004:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800800a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800800e:	d10a      	bne.n	8008026 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	430a      	orrs	r2, r1
 8008024:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800802a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00a      	beq.n	8008048 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	430a      	orrs	r2, r1
 8008046:	605a      	str	r2, [r3, #4]
  }
}
 8008048:	bf00      	nop
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b098      	sub	sp, #96	@ 0x60
 8008058:	af02      	add	r7, sp, #8
 800805a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008064:	f7f9 f85a 	bl	800111c <HAL_GetTick>
 8008068:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0308 	and.w	r3, r3, #8
 8008074:	2b08      	cmp	r3, #8
 8008076:	d12f      	bne.n	80080d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008078:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800807c:	9300      	str	r3, [sp, #0]
 800807e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008080:	2200      	movs	r2, #0
 8008082:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f88e 	bl	80081a8 <UART_WaitOnFlagUntilTimeout>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d022      	beq.n	80080d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800809a:	e853 3f00 	ldrex	r3, [r3]
 800809e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	461a      	mov	r2, r3
 80080ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80080b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080b8:	e841 2300 	strex	r3, r2, [r1]
 80080bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1e6      	bne.n	8008092 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2220      	movs	r2, #32
 80080c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080d4:	2303      	movs	r3, #3
 80080d6:	e063      	b.n	80081a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 0304 	and.w	r3, r3, #4
 80080e2:	2b04      	cmp	r3, #4
 80080e4:	d149      	bne.n	800817a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080ea:	9300      	str	r3, [sp, #0]
 80080ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080ee:	2200      	movs	r2, #0
 80080f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f857 	bl	80081a8 <UART_WaitOnFlagUntilTimeout>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d03c      	beq.n	800817a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008108:	e853 3f00 	ldrex	r3, [r3]
 800810c:	623b      	str	r3, [r7, #32]
   return(result);
 800810e:	6a3b      	ldr	r3, [r7, #32]
 8008110:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008114:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	461a      	mov	r2, r3
 800811c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800811e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008120:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008122:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008124:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008126:	e841 2300 	strex	r3, r2, [r1]
 800812a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800812c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1e6      	bne.n	8008100 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	3308      	adds	r3, #8
 8008138:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	e853 3f00 	ldrex	r3, [r3]
 8008140:	60fb      	str	r3, [r7, #12]
   return(result);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f023 0301 	bic.w	r3, r3, #1
 8008148:	64bb      	str	r3, [r7, #72]	@ 0x48
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	3308      	adds	r3, #8
 8008150:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008152:	61fa      	str	r2, [r7, #28]
 8008154:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008156:	69b9      	ldr	r1, [r7, #24]
 8008158:	69fa      	ldr	r2, [r7, #28]
 800815a:	e841 2300 	strex	r3, r2, [r1]
 800815e:	617b      	str	r3, [r7, #20]
   return(result);
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1e5      	bne.n	8008132 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2220      	movs	r2, #32
 800816a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e012      	b.n	80081a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2220      	movs	r2, #32
 800817e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2220      	movs	r2, #32
 8008186:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3758      	adds	r7, #88	@ 0x58
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	603b      	str	r3, [r7, #0]
 80081b4:	4613      	mov	r3, r2
 80081b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081b8:	e04f      	b.n	800825a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c0:	d04b      	beq.n	800825a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081c2:	f7f8 ffab 	bl	800111c <HAL_GetTick>
 80081c6:	4602      	mov	r2, r0
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	69ba      	ldr	r2, [r7, #24]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d302      	bcc.n	80081d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d101      	bne.n	80081dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081d8:	2303      	movs	r3, #3
 80081da:	e04e      	b.n	800827a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0304 	and.w	r3, r3, #4
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d037      	beq.n	800825a <UART_WaitOnFlagUntilTimeout+0xb2>
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	2b80      	cmp	r3, #128	@ 0x80
 80081ee:	d034      	beq.n	800825a <UART_WaitOnFlagUntilTimeout+0xb2>
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	2b40      	cmp	r3, #64	@ 0x40
 80081f4:	d031      	beq.n	800825a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	69db      	ldr	r3, [r3, #28]
 80081fc:	f003 0308 	and.w	r3, r3, #8
 8008200:	2b08      	cmp	r3, #8
 8008202:	d110      	bne.n	8008226 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2208      	movs	r2, #8
 800820a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f000 f839 	bl	8008284 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2208      	movs	r2, #8
 8008216:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	e029      	b.n	800827a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	69db      	ldr	r3, [r3, #28]
 800822c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008230:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008234:	d111      	bne.n	800825a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800823e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f000 f81f 	bl	8008284 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2220      	movs	r2, #32
 800824a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e00f      	b.n	800827a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	69da      	ldr	r2, [r3, #28]
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	4013      	ands	r3, r2
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	429a      	cmp	r2, r3
 8008268:	bf0c      	ite	eq
 800826a:	2301      	moveq	r3, #1
 800826c:	2300      	movne	r3, #0
 800826e:	b2db      	uxtb	r3, r3
 8008270:	461a      	mov	r2, r3
 8008272:	79fb      	ldrb	r3, [r7, #7]
 8008274:	429a      	cmp	r2, r3
 8008276:	d0a0      	beq.n	80081ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
	...

08008284 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008284:	b480      	push	{r7}
 8008286:	b095      	sub	sp, #84	@ 0x54
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008294:	e853 3f00 	ldrex	r3, [r3]
 8008298:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800829a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800829c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80082ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80082b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80082b2:	e841 2300 	strex	r3, r2, [r1]
 80082b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80082b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1e6      	bne.n	800828c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3308      	adds	r3, #8
 80082c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c6:	6a3b      	ldr	r3, [r7, #32]
 80082c8:	e853 3f00 	ldrex	r3, [r3]
 80082cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80082ce:	69fa      	ldr	r2, [r7, #28]
 80082d0:	4b1e      	ldr	r3, [pc, #120]	@ (800834c <UART_EndRxTransfer+0xc8>)
 80082d2:	4013      	ands	r3, r2
 80082d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	3308      	adds	r3, #8
 80082dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80082e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082e6:	e841 2300 	strex	r3, r2, [r1]
 80082ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1e5      	bne.n	80082be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d118      	bne.n	800832c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	e853 3f00 	ldrex	r3, [r3]
 8008306:	60bb      	str	r3, [r7, #8]
   return(result);
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	f023 0310 	bic.w	r3, r3, #16
 800830e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	461a      	mov	r2, r3
 8008316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008318:	61bb      	str	r3, [r7, #24]
 800831a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831c:	6979      	ldr	r1, [r7, #20]
 800831e:	69ba      	ldr	r2, [r7, #24]
 8008320:	e841 2300 	strex	r3, r2, [r1]
 8008324:	613b      	str	r3, [r7, #16]
   return(result);
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1e6      	bne.n	80082fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2220      	movs	r2, #32
 8008330:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008340:	bf00      	nop
 8008342:	3754      	adds	r7, #84	@ 0x54
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	effffffe 	.word	0xeffffffe

08008350 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800835c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2200      	movs	r2, #0
 8008362:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f7ff f854 	bl	8007414 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800836c:	bf00      	nop
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b088      	sub	sp, #32
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	e853 3f00 	ldrex	r3, [r3]
 8008388:	60bb      	str	r3, [r7, #8]
   return(result);
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008390:	61fb      	str	r3, [r7, #28]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	461a      	mov	r2, r3
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	61bb      	str	r3, [r7, #24]
 800839c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839e:	6979      	ldr	r1, [r7, #20]
 80083a0:	69ba      	ldr	r2, [r7, #24]
 80083a2:	e841 2300 	strex	r3, r2, [r1]
 80083a6:	613b      	str	r3, [r7, #16]
   return(result);
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1e6      	bne.n	800837c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2220      	movs	r2, #32
 80083b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f7ff f81f 	bl	8007400 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083c2:	bf00      	nop
 80083c4:	3720      	adds	r7, #32
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b083      	sub	sp, #12
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80083d2:	bf00      	nop
 80083d4:	370c      	adds	r7, #12
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80083de:	b480      	push	{r7}
 80083e0:	b083      	sub	sp, #12
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80083e6:	bf00      	nop
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b083      	sub	sp, #12
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80083fa:	bf00      	nop
 80083fc:	370c      	adds	r7, #12
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008406:	b480      	push	{r7}
 8008408:	b085      	sub	sp, #20
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008414:	2b01      	cmp	r3, #1
 8008416:	d101      	bne.n	800841c <HAL_UARTEx_DisableFifoMode+0x16>
 8008418:	2302      	movs	r3, #2
 800841a:	e027      	b.n	800846c <HAL_UARTEx_DisableFifoMode+0x66>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2224      	movs	r2, #36	@ 0x24
 8008428:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f022 0201 	bic.w	r2, r2, #1
 8008442:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800844a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2220      	movs	r2, #32
 800845e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3714      	adds	r7, #20
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008488:	2b01      	cmp	r3, #1
 800848a:	d101      	bne.n	8008490 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800848c:	2302      	movs	r3, #2
 800848e:	e02d      	b.n	80084ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2224      	movs	r2, #36	@ 0x24
 800849c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f022 0201 	bic.w	r2, r2, #1
 80084b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	430a      	orrs	r2, r1
 80084ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f84f 	bl	8008570 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2220      	movs	r2, #32
 80084de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008504:	2b01      	cmp	r3, #1
 8008506:	d101      	bne.n	800850c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008508:	2302      	movs	r3, #2
 800850a:	e02d      	b.n	8008568 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2224      	movs	r2, #36	@ 0x24
 8008518:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f022 0201 	bic.w	r2, r2, #1
 8008532:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	430a      	orrs	r2, r1
 8008546:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f811 	bl	8008570 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2220      	movs	r2, #32
 800855a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800857c:	2b00      	cmp	r3, #0
 800857e:	d108      	bne.n	8008592 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008590:	e031      	b.n	80085f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008592:	2310      	movs	r3, #16
 8008594:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008596:	2310      	movs	r3, #16
 8008598:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	0e5b      	lsrs	r3, r3, #25
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	f003 0307 	and.w	r3, r3, #7
 80085a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	0f5b      	lsrs	r3, r3, #29
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	f003 0307 	and.w	r3, r3, #7
 80085b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085ba:	7bbb      	ldrb	r3, [r7, #14]
 80085bc:	7b3a      	ldrb	r2, [r7, #12]
 80085be:	4911      	ldr	r1, [pc, #68]	@ (8008604 <UARTEx_SetNbDataToProcess+0x94>)
 80085c0:	5c8a      	ldrb	r2, [r1, r2]
 80085c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80085c6:	7b3a      	ldrb	r2, [r7, #12]
 80085c8:	490f      	ldr	r1, [pc, #60]	@ (8008608 <UARTEx_SetNbDataToProcess+0x98>)
 80085ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
 80085da:	7b7a      	ldrb	r2, [r7, #13]
 80085dc:	4909      	ldr	r1, [pc, #36]	@ (8008604 <UARTEx_SetNbDataToProcess+0x94>)
 80085de:	5c8a      	ldrb	r2, [r1, r2]
 80085e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80085e4:	7b7a      	ldrb	r2, [r7, #13]
 80085e6:	4908      	ldr	r1, [pc, #32]	@ (8008608 <UARTEx_SetNbDataToProcess+0x98>)
 80085e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80085f6:	bf00      	nop
 80085f8:	3714      	adds	r7, #20
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	08009200 	.word	0x08009200
 8008608:	08009208 	.word	0x08009208

0800860c <std>:
 800860c:	2300      	movs	r3, #0
 800860e:	b510      	push	{r4, lr}
 8008610:	4604      	mov	r4, r0
 8008612:	e9c0 3300 	strd	r3, r3, [r0]
 8008616:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800861a:	6083      	str	r3, [r0, #8]
 800861c:	8181      	strh	r1, [r0, #12]
 800861e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008620:	81c2      	strh	r2, [r0, #14]
 8008622:	6183      	str	r3, [r0, #24]
 8008624:	4619      	mov	r1, r3
 8008626:	2208      	movs	r2, #8
 8008628:	305c      	adds	r0, #92	@ 0x5c
 800862a:	f000 f9e7 	bl	80089fc <memset>
 800862e:	4b0d      	ldr	r3, [pc, #52]	@ (8008664 <std+0x58>)
 8008630:	6263      	str	r3, [r4, #36]	@ 0x24
 8008632:	4b0d      	ldr	r3, [pc, #52]	@ (8008668 <std+0x5c>)
 8008634:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008636:	4b0d      	ldr	r3, [pc, #52]	@ (800866c <std+0x60>)
 8008638:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800863a:	4b0d      	ldr	r3, [pc, #52]	@ (8008670 <std+0x64>)
 800863c:	6323      	str	r3, [r4, #48]	@ 0x30
 800863e:	4b0d      	ldr	r3, [pc, #52]	@ (8008674 <std+0x68>)
 8008640:	6224      	str	r4, [r4, #32]
 8008642:	429c      	cmp	r4, r3
 8008644:	d006      	beq.n	8008654 <std+0x48>
 8008646:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800864a:	4294      	cmp	r4, r2
 800864c:	d002      	beq.n	8008654 <std+0x48>
 800864e:	33d0      	adds	r3, #208	@ 0xd0
 8008650:	429c      	cmp	r4, r3
 8008652:	d105      	bne.n	8008660 <std+0x54>
 8008654:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800865c:	f000 ba46 	b.w	8008aec <__retarget_lock_init_recursive>
 8008660:	bd10      	pop	{r4, pc}
 8008662:	bf00      	nop
 8008664:	0800884d 	.word	0x0800884d
 8008668:	0800886f 	.word	0x0800886f
 800866c:	080088a7 	.word	0x080088a7
 8008670:	080088cb 	.word	0x080088cb
 8008674:	2400021c 	.word	0x2400021c

08008678 <stdio_exit_handler>:
 8008678:	4a02      	ldr	r2, [pc, #8]	@ (8008684 <stdio_exit_handler+0xc>)
 800867a:	4903      	ldr	r1, [pc, #12]	@ (8008688 <stdio_exit_handler+0x10>)
 800867c:	4803      	ldr	r0, [pc, #12]	@ (800868c <stdio_exit_handler+0x14>)
 800867e:	f000 b869 	b.w	8008754 <_fwalk_sglue>
 8008682:	bf00      	nop
 8008684:	24000010 	.word	0x24000010
 8008688:	08008ded 	.word	0x08008ded
 800868c:	24000020 	.word	0x24000020

08008690 <cleanup_stdio>:
 8008690:	6841      	ldr	r1, [r0, #4]
 8008692:	4b0c      	ldr	r3, [pc, #48]	@ (80086c4 <cleanup_stdio+0x34>)
 8008694:	4299      	cmp	r1, r3
 8008696:	b510      	push	{r4, lr}
 8008698:	4604      	mov	r4, r0
 800869a:	d001      	beq.n	80086a0 <cleanup_stdio+0x10>
 800869c:	f000 fba6 	bl	8008dec <_fflush_r>
 80086a0:	68a1      	ldr	r1, [r4, #8]
 80086a2:	4b09      	ldr	r3, [pc, #36]	@ (80086c8 <cleanup_stdio+0x38>)
 80086a4:	4299      	cmp	r1, r3
 80086a6:	d002      	beq.n	80086ae <cleanup_stdio+0x1e>
 80086a8:	4620      	mov	r0, r4
 80086aa:	f000 fb9f 	bl	8008dec <_fflush_r>
 80086ae:	68e1      	ldr	r1, [r4, #12]
 80086b0:	4b06      	ldr	r3, [pc, #24]	@ (80086cc <cleanup_stdio+0x3c>)
 80086b2:	4299      	cmp	r1, r3
 80086b4:	d004      	beq.n	80086c0 <cleanup_stdio+0x30>
 80086b6:	4620      	mov	r0, r4
 80086b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086bc:	f000 bb96 	b.w	8008dec <_fflush_r>
 80086c0:	bd10      	pop	{r4, pc}
 80086c2:	bf00      	nop
 80086c4:	2400021c 	.word	0x2400021c
 80086c8:	24000284 	.word	0x24000284
 80086cc:	240002ec 	.word	0x240002ec

080086d0 <global_stdio_init.part.0>:
 80086d0:	b510      	push	{r4, lr}
 80086d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008700 <global_stdio_init.part.0+0x30>)
 80086d4:	4c0b      	ldr	r4, [pc, #44]	@ (8008704 <global_stdio_init.part.0+0x34>)
 80086d6:	4a0c      	ldr	r2, [pc, #48]	@ (8008708 <global_stdio_init.part.0+0x38>)
 80086d8:	601a      	str	r2, [r3, #0]
 80086da:	4620      	mov	r0, r4
 80086dc:	2200      	movs	r2, #0
 80086de:	2104      	movs	r1, #4
 80086e0:	f7ff ff94 	bl	800860c <std>
 80086e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80086e8:	2201      	movs	r2, #1
 80086ea:	2109      	movs	r1, #9
 80086ec:	f7ff ff8e 	bl	800860c <std>
 80086f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80086f4:	2202      	movs	r2, #2
 80086f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086fa:	2112      	movs	r1, #18
 80086fc:	f7ff bf86 	b.w	800860c <std>
 8008700:	24000354 	.word	0x24000354
 8008704:	2400021c 	.word	0x2400021c
 8008708:	08008679 	.word	0x08008679

0800870c <__sfp_lock_acquire>:
 800870c:	4801      	ldr	r0, [pc, #4]	@ (8008714 <__sfp_lock_acquire+0x8>)
 800870e:	f000 b9ee 	b.w	8008aee <__retarget_lock_acquire_recursive>
 8008712:	bf00      	nop
 8008714:	2400035d 	.word	0x2400035d

08008718 <__sfp_lock_release>:
 8008718:	4801      	ldr	r0, [pc, #4]	@ (8008720 <__sfp_lock_release+0x8>)
 800871a:	f000 b9e9 	b.w	8008af0 <__retarget_lock_release_recursive>
 800871e:	bf00      	nop
 8008720:	2400035d 	.word	0x2400035d

08008724 <__sinit>:
 8008724:	b510      	push	{r4, lr}
 8008726:	4604      	mov	r4, r0
 8008728:	f7ff fff0 	bl	800870c <__sfp_lock_acquire>
 800872c:	6a23      	ldr	r3, [r4, #32]
 800872e:	b11b      	cbz	r3, 8008738 <__sinit+0x14>
 8008730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008734:	f7ff bff0 	b.w	8008718 <__sfp_lock_release>
 8008738:	4b04      	ldr	r3, [pc, #16]	@ (800874c <__sinit+0x28>)
 800873a:	6223      	str	r3, [r4, #32]
 800873c:	4b04      	ldr	r3, [pc, #16]	@ (8008750 <__sinit+0x2c>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1f5      	bne.n	8008730 <__sinit+0xc>
 8008744:	f7ff ffc4 	bl	80086d0 <global_stdio_init.part.0>
 8008748:	e7f2      	b.n	8008730 <__sinit+0xc>
 800874a:	bf00      	nop
 800874c:	08008691 	.word	0x08008691
 8008750:	24000354 	.word	0x24000354

08008754 <_fwalk_sglue>:
 8008754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008758:	4607      	mov	r7, r0
 800875a:	4688      	mov	r8, r1
 800875c:	4614      	mov	r4, r2
 800875e:	2600      	movs	r6, #0
 8008760:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008764:	f1b9 0901 	subs.w	r9, r9, #1
 8008768:	d505      	bpl.n	8008776 <_fwalk_sglue+0x22>
 800876a:	6824      	ldr	r4, [r4, #0]
 800876c:	2c00      	cmp	r4, #0
 800876e:	d1f7      	bne.n	8008760 <_fwalk_sglue+0xc>
 8008770:	4630      	mov	r0, r6
 8008772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008776:	89ab      	ldrh	r3, [r5, #12]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d907      	bls.n	800878c <_fwalk_sglue+0x38>
 800877c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008780:	3301      	adds	r3, #1
 8008782:	d003      	beq.n	800878c <_fwalk_sglue+0x38>
 8008784:	4629      	mov	r1, r5
 8008786:	4638      	mov	r0, r7
 8008788:	47c0      	blx	r8
 800878a:	4306      	orrs	r6, r0
 800878c:	3568      	adds	r5, #104	@ 0x68
 800878e:	e7e9      	b.n	8008764 <_fwalk_sglue+0x10>

08008790 <_puts_r>:
 8008790:	6a03      	ldr	r3, [r0, #32]
 8008792:	b570      	push	{r4, r5, r6, lr}
 8008794:	6884      	ldr	r4, [r0, #8]
 8008796:	4605      	mov	r5, r0
 8008798:	460e      	mov	r6, r1
 800879a:	b90b      	cbnz	r3, 80087a0 <_puts_r+0x10>
 800879c:	f7ff ffc2 	bl	8008724 <__sinit>
 80087a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087a2:	07db      	lsls	r3, r3, #31
 80087a4:	d405      	bmi.n	80087b2 <_puts_r+0x22>
 80087a6:	89a3      	ldrh	r3, [r4, #12]
 80087a8:	0598      	lsls	r0, r3, #22
 80087aa:	d402      	bmi.n	80087b2 <_puts_r+0x22>
 80087ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087ae:	f000 f99e 	bl	8008aee <__retarget_lock_acquire_recursive>
 80087b2:	89a3      	ldrh	r3, [r4, #12]
 80087b4:	0719      	lsls	r1, r3, #28
 80087b6:	d502      	bpl.n	80087be <_puts_r+0x2e>
 80087b8:	6923      	ldr	r3, [r4, #16]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d135      	bne.n	800882a <_puts_r+0x9a>
 80087be:	4621      	mov	r1, r4
 80087c0:	4628      	mov	r0, r5
 80087c2:	f000 f8c5 	bl	8008950 <__swsetup_r>
 80087c6:	b380      	cbz	r0, 800882a <_puts_r+0x9a>
 80087c8:	f04f 35ff 	mov.w	r5, #4294967295
 80087cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087ce:	07da      	lsls	r2, r3, #31
 80087d0:	d405      	bmi.n	80087de <_puts_r+0x4e>
 80087d2:	89a3      	ldrh	r3, [r4, #12]
 80087d4:	059b      	lsls	r3, r3, #22
 80087d6:	d402      	bmi.n	80087de <_puts_r+0x4e>
 80087d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087da:	f000 f989 	bl	8008af0 <__retarget_lock_release_recursive>
 80087de:	4628      	mov	r0, r5
 80087e0:	bd70      	pop	{r4, r5, r6, pc}
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	da04      	bge.n	80087f0 <_puts_r+0x60>
 80087e6:	69a2      	ldr	r2, [r4, #24]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	dc17      	bgt.n	800881c <_puts_r+0x8c>
 80087ec:	290a      	cmp	r1, #10
 80087ee:	d015      	beq.n	800881c <_puts_r+0x8c>
 80087f0:	6823      	ldr	r3, [r4, #0]
 80087f2:	1c5a      	adds	r2, r3, #1
 80087f4:	6022      	str	r2, [r4, #0]
 80087f6:	7019      	strb	r1, [r3, #0]
 80087f8:	68a3      	ldr	r3, [r4, #8]
 80087fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80087fe:	3b01      	subs	r3, #1
 8008800:	60a3      	str	r3, [r4, #8]
 8008802:	2900      	cmp	r1, #0
 8008804:	d1ed      	bne.n	80087e2 <_puts_r+0x52>
 8008806:	2b00      	cmp	r3, #0
 8008808:	da11      	bge.n	800882e <_puts_r+0x9e>
 800880a:	4622      	mov	r2, r4
 800880c:	210a      	movs	r1, #10
 800880e:	4628      	mov	r0, r5
 8008810:	f000 f85f 	bl	80088d2 <__swbuf_r>
 8008814:	3001      	adds	r0, #1
 8008816:	d0d7      	beq.n	80087c8 <_puts_r+0x38>
 8008818:	250a      	movs	r5, #10
 800881a:	e7d7      	b.n	80087cc <_puts_r+0x3c>
 800881c:	4622      	mov	r2, r4
 800881e:	4628      	mov	r0, r5
 8008820:	f000 f857 	bl	80088d2 <__swbuf_r>
 8008824:	3001      	adds	r0, #1
 8008826:	d1e7      	bne.n	80087f8 <_puts_r+0x68>
 8008828:	e7ce      	b.n	80087c8 <_puts_r+0x38>
 800882a:	3e01      	subs	r6, #1
 800882c:	e7e4      	b.n	80087f8 <_puts_r+0x68>
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	1c5a      	adds	r2, r3, #1
 8008832:	6022      	str	r2, [r4, #0]
 8008834:	220a      	movs	r2, #10
 8008836:	701a      	strb	r2, [r3, #0]
 8008838:	e7ee      	b.n	8008818 <_puts_r+0x88>
	...

0800883c <puts>:
 800883c:	4b02      	ldr	r3, [pc, #8]	@ (8008848 <puts+0xc>)
 800883e:	4601      	mov	r1, r0
 8008840:	6818      	ldr	r0, [r3, #0]
 8008842:	f7ff bfa5 	b.w	8008790 <_puts_r>
 8008846:	bf00      	nop
 8008848:	2400001c 	.word	0x2400001c

0800884c <__sread>:
 800884c:	b510      	push	{r4, lr}
 800884e:	460c      	mov	r4, r1
 8008850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008854:	f000 f8fc 	bl	8008a50 <_read_r>
 8008858:	2800      	cmp	r0, #0
 800885a:	bfab      	itete	ge
 800885c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800885e:	89a3      	ldrhlt	r3, [r4, #12]
 8008860:	181b      	addge	r3, r3, r0
 8008862:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008866:	bfac      	ite	ge
 8008868:	6563      	strge	r3, [r4, #84]	@ 0x54
 800886a:	81a3      	strhlt	r3, [r4, #12]
 800886c:	bd10      	pop	{r4, pc}

0800886e <__swrite>:
 800886e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008872:	461f      	mov	r7, r3
 8008874:	898b      	ldrh	r3, [r1, #12]
 8008876:	05db      	lsls	r3, r3, #23
 8008878:	4605      	mov	r5, r0
 800887a:	460c      	mov	r4, r1
 800887c:	4616      	mov	r6, r2
 800887e:	d505      	bpl.n	800888c <__swrite+0x1e>
 8008880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008884:	2302      	movs	r3, #2
 8008886:	2200      	movs	r2, #0
 8008888:	f000 f8d0 	bl	8008a2c <_lseek_r>
 800888c:	89a3      	ldrh	r3, [r4, #12]
 800888e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008892:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008896:	81a3      	strh	r3, [r4, #12]
 8008898:	4632      	mov	r2, r6
 800889a:	463b      	mov	r3, r7
 800889c:	4628      	mov	r0, r5
 800889e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088a2:	f000 b8e7 	b.w	8008a74 <_write_r>

080088a6 <__sseek>:
 80088a6:	b510      	push	{r4, lr}
 80088a8:	460c      	mov	r4, r1
 80088aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ae:	f000 f8bd 	bl	8008a2c <_lseek_r>
 80088b2:	1c43      	adds	r3, r0, #1
 80088b4:	89a3      	ldrh	r3, [r4, #12]
 80088b6:	bf15      	itete	ne
 80088b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80088ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80088be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80088c2:	81a3      	strheq	r3, [r4, #12]
 80088c4:	bf18      	it	ne
 80088c6:	81a3      	strhne	r3, [r4, #12]
 80088c8:	bd10      	pop	{r4, pc}

080088ca <__sclose>:
 80088ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ce:	f000 b89d 	b.w	8008a0c <_close_r>

080088d2 <__swbuf_r>:
 80088d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d4:	460e      	mov	r6, r1
 80088d6:	4614      	mov	r4, r2
 80088d8:	4605      	mov	r5, r0
 80088da:	b118      	cbz	r0, 80088e4 <__swbuf_r+0x12>
 80088dc:	6a03      	ldr	r3, [r0, #32]
 80088de:	b90b      	cbnz	r3, 80088e4 <__swbuf_r+0x12>
 80088e0:	f7ff ff20 	bl	8008724 <__sinit>
 80088e4:	69a3      	ldr	r3, [r4, #24]
 80088e6:	60a3      	str	r3, [r4, #8]
 80088e8:	89a3      	ldrh	r3, [r4, #12]
 80088ea:	071a      	lsls	r2, r3, #28
 80088ec:	d501      	bpl.n	80088f2 <__swbuf_r+0x20>
 80088ee:	6923      	ldr	r3, [r4, #16]
 80088f0:	b943      	cbnz	r3, 8008904 <__swbuf_r+0x32>
 80088f2:	4621      	mov	r1, r4
 80088f4:	4628      	mov	r0, r5
 80088f6:	f000 f82b 	bl	8008950 <__swsetup_r>
 80088fa:	b118      	cbz	r0, 8008904 <__swbuf_r+0x32>
 80088fc:	f04f 37ff 	mov.w	r7, #4294967295
 8008900:	4638      	mov	r0, r7
 8008902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008904:	6823      	ldr	r3, [r4, #0]
 8008906:	6922      	ldr	r2, [r4, #16]
 8008908:	1a98      	subs	r0, r3, r2
 800890a:	6963      	ldr	r3, [r4, #20]
 800890c:	b2f6      	uxtb	r6, r6
 800890e:	4283      	cmp	r3, r0
 8008910:	4637      	mov	r7, r6
 8008912:	dc05      	bgt.n	8008920 <__swbuf_r+0x4e>
 8008914:	4621      	mov	r1, r4
 8008916:	4628      	mov	r0, r5
 8008918:	f000 fa68 	bl	8008dec <_fflush_r>
 800891c:	2800      	cmp	r0, #0
 800891e:	d1ed      	bne.n	80088fc <__swbuf_r+0x2a>
 8008920:	68a3      	ldr	r3, [r4, #8]
 8008922:	3b01      	subs	r3, #1
 8008924:	60a3      	str	r3, [r4, #8]
 8008926:	6823      	ldr	r3, [r4, #0]
 8008928:	1c5a      	adds	r2, r3, #1
 800892a:	6022      	str	r2, [r4, #0]
 800892c:	701e      	strb	r6, [r3, #0]
 800892e:	6962      	ldr	r2, [r4, #20]
 8008930:	1c43      	adds	r3, r0, #1
 8008932:	429a      	cmp	r2, r3
 8008934:	d004      	beq.n	8008940 <__swbuf_r+0x6e>
 8008936:	89a3      	ldrh	r3, [r4, #12]
 8008938:	07db      	lsls	r3, r3, #31
 800893a:	d5e1      	bpl.n	8008900 <__swbuf_r+0x2e>
 800893c:	2e0a      	cmp	r6, #10
 800893e:	d1df      	bne.n	8008900 <__swbuf_r+0x2e>
 8008940:	4621      	mov	r1, r4
 8008942:	4628      	mov	r0, r5
 8008944:	f000 fa52 	bl	8008dec <_fflush_r>
 8008948:	2800      	cmp	r0, #0
 800894a:	d0d9      	beq.n	8008900 <__swbuf_r+0x2e>
 800894c:	e7d6      	b.n	80088fc <__swbuf_r+0x2a>
	...

08008950 <__swsetup_r>:
 8008950:	b538      	push	{r3, r4, r5, lr}
 8008952:	4b29      	ldr	r3, [pc, #164]	@ (80089f8 <__swsetup_r+0xa8>)
 8008954:	4605      	mov	r5, r0
 8008956:	6818      	ldr	r0, [r3, #0]
 8008958:	460c      	mov	r4, r1
 800895a:	b118      	cbz	r0, 8008964 <__swsetup_r+0x14>
 800895c:	6a03      	ldr	r3, [r0, #32]
 800895e:	b90b      	cbnz	r3, 8008964 <__swsetup_r+0x14>
 8008960:	f7ff fee0 	bl	8008724 <__sinit>
 8008964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008968:	0719      	lsls	r1, r3, #28
 800896a:	d422      	bmi.n	80089b2 <__swsetup_r+0x62>
 800896c:	06da      	lsls	r2, r3, #27
 800896e:	d407      	bmi.n	8008980 <__swsetup_r+0x30>
 8008970:	2209      	movs	r2, #9
 8008972:	602a      	str	r2, [r5, #0]
 8008974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008978:	81a3      	strh	r3, [r4, #12]
 800897a:	f04f 30ff 	mov.w	r0, #4294967295
 800897e:	e033      	b.n	80089e8 <__swsetup_r+0x98>
 8008980:	0758      	lsls	r0, r3, #29
 8008982:	d512      	bpl.n	80089aa <__swsetup_r+0x5a>
 8008984:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008986:	b141      	cbz	r1, 800899a <__swsetup_r+0x4a>
 8008988:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800898c:	4299      	cmp	r1, r3
 800898e:	d002      	beq.n	8008996 <__swsetup_r+0x46>
 8008990:	4628      	mov	r0, r5
 8008992:	f000 f8af 	bl	8008af4 <_free_r>
 8008996:	2300      	movs	r3, #0
 8008998:	6363      	str	r3, [r4, #52]	@ 0x34
 800899a:	89a3      	ldrh	r3, [r4, #12]
 800899c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80089a0:	81a3      	strh	r3, [r4, #12]
 80089a2:	2300      	movs	r3, #0
 80089a4:	6063      	str	r3, [r4, #4]
 80089a6:	6923      	ldr	r3, [r4, #16]
 80089a8:	6023      	str	r3, [r4, #0]
 80089aa:	89a3      	ldrh	r3, [r4, #12]
 80089ac:	f043 0308 	orr.w	r3, r3, #8
 80089b0:	81a3      	strh	r3, [r4, #12]
 80089b2:	6923      	ldr	r3, [r4, #16]
 80089b4:	b94b      	cbnz	r3, 80089ca <__swsetup_r+0x7a>
 80089b6:	89a3      	ldrh	r3, [r4, #12]
 80089b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80089bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089c0:	d003      	beq.n	80089ca <__swsetup_r+0x7a>
 80089c2:	4621      	mov	r1, r4
 80089c4:	4628      	mov	r0, r5
 80089c6:	f000 fa5f 	bl	8008e88 <__smakebuf_r>
 80089ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089ce:	f013 0201 	ands.w	r2, r3, #1
 80089d2:	d00a      	beq.n	80089ea <__swsetup_r+0x9a>
 80089d4:	2200      	movs	r2, #0
 80089d6:	60a2      	str	r2, [r4, #8]
 80089d8:	6962      	ldr	r2, [r4, #20]
 80089da:	4252      	negs	r2, r2
 80089dc:	61a2      	str	r2, [r4, #24]
 80089de:	6922      	ldr	r2, [r4, #16]
 80089e0:	b942      	cbnz	r2, 80089f4 <__swsetup_r+0xa4>
 80089e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80089e6:	d1c5      	bne.n	8008974 <__swsetup_r+0x24>
 80089e8:	bd38      	pop	{r3, r4, r5, pc}
 80089ea:	0799      	lsls	r1, r3, #30
 80089ec:	bf58      	it	pl
 80089ee:	6962      	ldrpl	r2, [r4, #20]
 80089f0:	60a2      	str	r2, [r4, #8]
 80089f2:	e7f4      	b.n	80089de <__swsetup_r+0x8e>
 80089f4:	2000      	movs	r0, #0
 80089f6:	e7f7      	b.n	80089e8 <__swsetup_r+0x98>
 80089f8:	2400001c 	.word	0x2400001c

080089fc <memset>:
 80089fc:	4402      	add	r2, r0
 80089fe:	4603      	mov	r3, r0
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d100      	bne.n	8008a06 <memset+0xa>
 8008a04:	4770      	bx	lr
 8008a06:	f803 1b01 	strb.w	r1, [r3], #1
 8008a0a:	e7f9      	b.n	8008a00 <memset+0x4>

08008a0c <_close_r>:
 8008a0c:	b538      	push	{r3, r4, r5, lr}
 8008a0e:	4d06      	ldr	r5, [pc, #24]	@ (8008a28 <_close_r+0x1c>)
 8008a10:	2300      	movs	r3, #0
 8008a12:	4604      	mov	r4, r0
 8008a14:	4608      	mov	r0, r1
 8008a16:	602b      	str	r3, [r5, #0]
 8008a18:	f7f8 f873 	bl	8000b02 <_close>
 8008a1c:	1c43      	adds	r3, r0, #1
 8008a1e:	d102      	bne.n	8008a26 <_close_r+0x1a>
 8008a20:	682b      	ldr	r3, [r5, #0]
 8008a22:	b103      	cbz	r3, 8008a26 <_close_r+0x1a>
 8008a24:	6023      	str	r3, [r4, #0]
 8008a26:	bd38      	pop	{r3, r4, r5, pc}
 8008a28:	24000358 	.word	0x24000358

08008a2c <_lseek_r>:
 8008a2c:	b538      	push	{r3, r4, r5, lr}
 8008a2e:	4d07      	ldr	r5, [pc, #28]	@ (8008a4c <_lseek_r+0x20>)
 8008a30:	4604      	mov	r4, r0
 8008a32:	4608      	mov	r0, r1
 8008a34:	4611      	mov	r1, r2
 8008a36:	2200      	movs	r2, #0
 8008a38:	602a      	str	r2, [r5, #0]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	f7f8 f888 	bl	8000b50 <_lseek>
 8008a40:	1c43      	adds	r3, r0, #1
 8008a42:	d102      	bne.n	8008a4a <_lseek_r+0x1e>
 8008a44:	682b      	ldr	r3, [r5, #0]
 8008a46:	b103      	cbz	r3, 8008a4a <_lseek_r+0x1e>
 8008a48:	6023      	str	r3, [r4, #0]
 8008a4a:	bd38      	pop	{r3, r4, r5, pc}
 8008a4c:	24000358 	.word	0x24000358

08008a50 <_read_r>:
 8008a50:	b538      	push	{r3, r4, r5, lr}
 8008a52:	4d07      	ldr	r5, [pc, #28]	@ (8008a70 <_read_r+0x20>)
 8008a54:	4604      	mov	r4, r0
 8008a56:	4608      	mov	r0, r1
 8008a58:	4611      	mov	r1, r2
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	602a      	str	r2, [r5, #0]
 8008a5e:	461a      	mov	r2, r3
 8008a60:	f7f8 f832 	bl	8000ac8 <_read>
 8008a64:	1c43      	adds	r3, r0, #1
 8008a66:	d102      	bne.n	8008a6e <_read_r+0x1e>
 8008a68:	682b      	ldr	r3, [r5, #0]
 8008a6a:	b103      	cbz	r3, 8008a6e <_read_r+0x1e>
 8008a6c:	6023      	str	r3, [r4, #0]
 8008a6e:	bd38      	pop	{r3, r4, r5, pc}
 8008a70:	24000358 	.word	0x24000358

08008a74 <_write_r>:
 8008a74:	b538      	push	{r3, r4, r5, lr}
 8008a76:	4d07      	ldr	r5, [pc, #28]	@ (8008a94 <_write_r+0x20>)
 8008a78:	4604      	mov	r4, r0
 8008a7a:	4608      	mov	r0, r1
 8008a7c:	4611      	mov	r1, r2
 8008a7e:	2200      	movs	r2, #0
 8008a80:	602a      	str	r2, [r5, #0]
 8008a82:	461a      	mov	r2, r3
 8008a84:	f7f8 fa82 	bl	8000f8c <_write>
 8008a88:	1c43      	adds	r3, r0, #1
 8008a8a:	d102      	bne.n	8008a92 <_write_r+0x1e>
 8008a8c:	682b      	ldr	r3, [r5, #0]
 8008a8e:	b103      	cbz	r3, 8008a92 <_write_r+0x1e>
 8008a90:	6023      	str	r3, [r4, #0]
 8008a92:	bd38      	pop	{r3, r4, r5, pc}
 8008a94:	24000358 	.word	0x24000358

08008a98 <__errno>:
 8008a98:	4b01      	ldr	r3, [pc, #4]	@ (8008aa0 <__errno+0x8>)
 8008a9a:	6818      	ldr	r0, [r3, #0]
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	2400001c 	.word	0x2400001c

08008aa4 <__libc_init_array>:
 8008aa4:	b570      	push	{r4, r5, r6, lr}
 8008aa6:	4d0d      	ldr	r5, [pc, #52]	@ (8008adc <__libc_init_array+0x38>)
 8008aa8:	4c0d      	ldr	r4, [pc, #52]	@ (8008ae0 <__libc_init_array+0x3c>)
 8008aaa:	1b64      	subs	r4, r4, r5
 8008aac:	10a4      	asrs	r4, r4, #2
 8008aae:	2600      	movs	r6, #0
 8008ab0:	42a6      	cmp	r6, r4
 8008ab2:	d109      	bne.n	8008ac8 <__libc_init_array+0x24>
 8008ab4:	4d0b      	ldr	r5, [pc, #44]	@ (8008ae4 <__libc_init_array+0x40>)
 8008ab6:	4c0c      	ldr	r4, [pc, #48]	@ (8008ae8 <__libc_init_array+0x44>)
 8008ab8:	f000 fa54 	bl	8008f64 <_init>
 8008abc:	1b64      	subs	r4, r4, r5
 8008abe:	10a4      	asrs	r4, r4, #2
 8008ac0:	2600      	movs	r6, #0
 8008ac2:	42a6      	cmp	r6, r4
 8008ac4:	d105      	bne.n	8008ad2 <__libc_init_array+0x2e>
 8008ac6:	bd70      	pop	{r4, r5, r6, pc}
 8008ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008acc:	4798      	blx	r3
 8008ace:	3601      	adds	r6, #1
 8008ad0:	e7ee      	b.n	8008ab0 <__libc_init_array+0xc>
 8008ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ad6:	4798      	blx	r3
 8008ad8:	3601      	adds	r6, #1
 8008ada:	e7f2      	b.n	8008ac2 <__libc_init_array+0x1e>
 8008adc:	08009218 	.word	0x08009218
 8008ae0:	08009218 	.word	0x08009218
 8008ae4:	08009218 	.word	0x08009218
 8008ae8:	0800921c 	.word	0x0800921c

08008aec <__retarget_lock_init_recursive>:
 8008aec:	4770      	bx	lr

08008aee <__retarget_lock_acquire_recursive>:
 8008aee:	4770      	bx	lr

08008af0 <__retarget_lock_release_recursive>:
 8008af0:	4770      	bx	lr
	...

08008af4 <_free_r>:
 8008af4:	b538      	push	{r3, r4, r5, lr}
 8008af6:	4605      	mov	r5, r0
 8008af8:	2900      	cmp	r1, #0
 8008afa:	d041      	beq.n	8008b80 <_free_r+0x8c>
 8008afc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b00:	1f0c      	subs	r4, r1, #4
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	bfb8      	it	lt
 8008b06:	18e4      	addlt	r4, r4, r3
 8008b08:	f000 f8e0 	bl	8008ccc <__malloc_lock>
 8008b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8008b84 <_free_r+0x90>)
 8008b0e:	6813      	ldr	r3, [r2, #0]
 8008b10:	b933      	cbnz	r3, 8008b20 <_free_r+0x2c>
 8008b12:	6063      	str	r3, [r4, #4]
 8008b14:	6014      	str	r4, [r2, #0]
 8008b16:	4628      	mov	r0, r5
 8008b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b1c:	f000 b8dc 	b.w	8008cd8 <__malloc_unlock>
 8008b20:	42a3      	cmp	r3, r4
 8008b22:	d908      	bls.n	8008b36 <_free_r+0x42>
 8008b24:	6820      	ldr	r0, [r4, #0]
 8008b26:	1821      	adds	r1, r4, r0
 8008b28:	428b      	cmp	r3, r1
 8008b2a:	bf01      	itttt	eq
 8008b2c:	6819      	ldreq	r1, [r3, #0]
 8008b2e:	685b      	ldreq	r3, [r3, #4]
 8008b30:	1809      	addeq	r1, r1, r0
 8008b32:	6021      	streq	r1, [r4, #0]
 8008b34:	e7ed      	b.n	8008b12 <_free_r+0x1e>
 8008b36:	461a      	mov	r2, r3
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	b10b      	cbz	r3, 8008b40 <_free_r+0x4c>
 8008b3c:	42a3      	cmp	r3, r4
 8008b3e:	d9fa      	bls.n	8008b36 <_free_r+0x42>
 8008b40:	6811      	ldr	r1, [r2, #0]
 8008b42:	1850      	adds	r0, r2, r1
 8008b44:	42a0      	cmp	r0, r4
 8008b46:	d10b      	bne.n	8008b60 <_free_r+0x6c>
 8008b48:	6820      	ldr	r0, [r4, #0]
 8008b4a:	4401      	add	r1, r0
 8008b4c:	1850      	adds	r0, r2, r1
 8008b4e:	4283      	cmp	r3, r0
 8008b50:	6011      	str	r1, [r2, #0]
 8008b52:	d1e0      	bne.n	8008b16 <_free_r+0x22>
 8008b54:	6818      	ldr	r0, [r3, #0]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	6053      	str	r3, [r2, #4]
 8008b5a:	4408      	add	r0, r1
 8008b5c:	6010      	str	r0, [r2, #0]
 8008b5e:	e7da      	b.n	8008b16 <_free_r+0x22>
 8008b60:	d902      	bls.n	8008b68 <_free_r+0x74>
 8008b62:	230c      	movs	r3, #12
 8008b64:	602b      	str	r3, [r5, #0]
 8008b66:	e7d6      	b.n	8008b16 <_free_r+0x22>
 8008b68:	6820      	ldr	r0, [r4, #0]
 8008b6a:	1821      	adds	r1, r4, r0
 8008b6c:	428b      	cmp	r3, r1
 8008b6e:	bf04      	itt	eq
 8008b70:	6819      	ldreq	r1, [r3, #0]
 8008b72:	685b      	ldreq	r3, [r3, #4]
 8008b74:	6063      	str	r3, [r4, #4]
 8008b76:	bf04      	itt	eq
 8008b78:	1809      	addeq	r1, r1, r0
 8008b7a:	6021      	streq	r1, [r4, #0]
 8008b7c:	6054      	str	r4, [r2, #4]
 8008b7e:	e7ca      	b.n	8008b16 <_free_r+0x22>
 8008b80:	bd38      	pop	{r3, r4, r5, pc}
 8008b82:	bf00      	nop
 8008b84:	24000364 	.word	0x24000364

08008b88 <sbrk_aligned>:
 8008b88:	b570      	push	{r4, r5, r6, lr}
 8008b8a:	4e0f      	ldr	r6, [pc, #60]	@ (8008bc8 <sbrk_aligned+0x40>)
 8008b8c:	460c      	mov	r4, r1
 8008b8e:	6831      	ldr	r1, [r6, #0]
 8008b90:	4605      	mov	r5, r0
 8008b92:	b911      	cbnz	r1, 8008b9a <sbrk_aligned+0x12>
 8008b94:	f000 f9d6 	bl	8008f44 <_sbrk_r>
 8008b98:	6030      	str	r0, [r6, #0]
 8008b9a:	4621      	mov	r1, r4
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	f000 f9d1 	bl	8008f44 <_sbrk_r>
 8008ba2:	1c43      	adds	r3, r0, #1
 8008ba4:	d103      	bne.n	8008bae <sbrk_aligned+0x26>
 8008ba6:	f04f 34ff 	mov.w	r4, #4294967295
 8008baa:	4620      	mov	r0, r4
 8008bac:	bd70      	pop	{r4, r5, r6, pc}
 8008bae:	1cc4      	adds	r4, r0, #3
 8008bb0:	f024 0403 	bic.w	r4, r4, #3
 8008bb4:	42a0      	cmp	r0, r4
 8008bb6:	d0f8      	beq.n	8008baa <sbrk_aligned+0x22>
 8008bb8:	1a21      	subs	r1, r4, r0
 8008bba:	4628      	mov	r0, r5
 8008bbc:	f000 f9c2 	bl	8008f44 <_sbrk_r>
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	d1f2      	bne.n	8008baa <sbrk_aligned+0x22>
 8008bc4:	e7ef      	b.n	8008ba6 <sbrk_aligned+0x1e>
 8008bc6:	bf00      	nop
 8008bc8:	24000360 	.word	0x24000360

08008bcc <_malloc_r>:
 8008bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bd0:	1ccd      	adds	r5, r1, #3
 8008bd2:	f025 0503 	bic.w	r5, r5, #3
 8008bd6:	3508      	adds	r5, #8
 8008bd8:	2d0c      	cmp	r5, #12
 8008bda:	bf38      	it	cc
 8008bdc:	250c      	movcc	r5, #12
 8008bde:	2d00      	cmp	r5, #0
 8008be0:	4606      	mov	r6, r0
 8008be2:	db01      	blt.n	8008be8 <_malloc_r+0x1c>
 8008be4:	42a9      	cmp	r1, r5
 8008be6:	d904      	bls.n	8008bf2 <_malloc_r+0x26>
 8008be8:	230c      	movs	r3, #12
 8008bea:	6033      	str	r3, [r6, #0]
 8008bec:	2000      	movs	r0, #0
 8008bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bf2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008cc8 <_malloc_r+0xfc>
 8008bf6:	f000 f869 	bl	8008ccc <__malloc_lock>
 8008bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8008bfe:	461c      	mov	r4, r3
 8008c00:	bb44      	cbnz	r4, 8008c54 <_malloc_r+0x88>
 8008c02:	4629      	mov	r1, r5
 8008c04:	4630      	mov	r0, r6
 8008c06:	f7ff ffbf 	bl	8008b88 <sbrk_aligned>
 8008c0a:	1c43      	adds	r3, r0, #1
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	d158      	bne.n	8008cc2 <_malloc_r+0xf6>
 8008c10:	f8d8 4000 	ldr.w	r4, [r8]
 8008c14:	4627      	mov	r7, r4
 8008c16:	2f00      	cmp	r7, #0
 8008c18:	d143      	bne.n	8008ca2 <_malloc_r+0xd6>
 8008c1a:	2c00      	cmp	r4, #0
 8008c1c:	d04b      	beq.n	8008cb6 <_malloc_r+0xea>
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	4639      	mov	r1, r7
 8008c22:	4630      	mov	r0, r6
 8008c24:	eb04 0903 	add.w	r9, r4, r3
 8008c28:	f000 f98c 	bl	8008f44 <_sbrk_r>
 8008c2c:	4581      	cmp	r9, r0
 8008c2e:	d142      	bne.n	8008cb6 <_malloc_r+0xea>
 8008c30:	6821      	ldr	r1, [r4, #0]
 8008c32:	1a6d      	subs	r5, r5, r1
 8008c34:	4629      	mov	r1, r5
 8008c36:	4630      	mov	r0, r6
 8008c38:	f7ff ffa6 	bl	8008b88 <sbrk_aligned>
 8008c3c:	3001      	adds	r0, #1
 8008c3e:	d03a      	beq.n	8008cb6 <_malloc_r+0xea>
 8008c40:	6823      	ldr	r3, [r4, #0]
 8008c42:	442b      	add	r3, r5
 8008c44:	6023      	str	r3, [r4, #0]
 8008c46:	f8d8 3000 	ldr.w	r3, [r8]
 8008c4a:	685a      	ldr	r2, [r3, #4]
 8008c4c:	bb62      	cbnz	r2, 8008ca8 <_malloc_r+0xdc>
 8008c4e:	f8c8 7000 	str.w	r7, [r8]
 8008c52:	e00f      	b.n	8008c74 <_malloc_r+0xa8>
 8008c54:	6822      	ldr	r2, [r4, #0]
 8008c56:	1b52      	subs	r2, r2, r5
 8008c58:	d420      	bmi.n	8008c9c <_malloc_r+0xd0>
 8008c5a:	2a0b      	cmp	r2, #11
 8008c5c:	d917      	bls.n	8008c8e <_malloc_r+0xc2>
 8008c5e:	1961      	adds	r1, r4, r5
 8008c60:	42a3      	cmp	r3, r4
 8008c62:	6025      	str	r5, [r4, #0]
 8008c64:	bf18      	it	ne
 8008c66:	6059      	strne	r1, [r3, #4]
 8008c68:	6863      	ldr	r3, [r4, #4]
 8008c6a:	bf08      	it	eq
 8008c6c:	f8c8 1000 	streq.w	r1, [r8]
 8008c70:	5162      	str	r2, [r4, r5]
 8008c72:	604b      	str	r3, [r1, #4]
 8008c74:	4630      	mov	r0, r6
 8008c76:	f000 f82f 	bl	8008cd8 <__malloc_unlock>
 8008c7a:	f104 000b 	add.w	r0, r4, #11
 8008c7e:	1d23      	adds	r3, r4, #4
 8008c80:	f020 0007 	bic.w	r0, r0, #7
 8008c84:	1ac2      	subs	r2, r0, r3
 8008c86:	bf1c      	itt	ne
 8008c88:	1a1b      	subne	r3, r3, r0
 8008c8a:	50a3      	strne	r3, [r4, r2]
 8008c8c:	e7af      	b.n	8008bee <_malloc_r+0x22>
 8008c8e:	6862      	ldr	r2, [r4, #4]
 8008c90:	42a3      	cmp	r3, r4
 8008c92:	bf0c      	ite	eq
 8008c94:	f8c8 2000 	streq.w	r2, [r8]
 8008c98:	605a      	strne	r2, [r3, #4]
 8008c9a:	e7eb      	b.n	8008c74 <_malloc_r+0xa8>
 8008c9c:	4623      	mov	r3, r4
 8008c9e:	6864      	ldr	r4, [r4, #4]
 8008ca0:	e7ae      	b.n	8008c00 <_malloc_r+0x34>
 8008ca2:	463c      	mov	r4, r7
 8008ca4:	687f      	ldr	r7, [r7, #4]
 8008ca6:	e7b6      	b.n	8008c16 <_malloc_r+0x4a>
 8008ca8:	461a      	mov	r2, r3
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	42a3      	cmp	r3, r4
 8008cae:	d1fb      	bne.n	8008ca8 <_malloc_r+0xdc>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	6053      	str	r3, [r2, #4]
 8008cb4:	e7de      	b.n	8008c74 <_malloc_r+0xa8>
 8008cb6:	230c      	movs	r3, #12
 8008cb8:	6033      	str	r3, [r6, #0]
 8008cba:	4630      	mov	r0, r6
 8008cbc:	f000 f80c 	bl	8008cd8 <__malloc_unlock>
 8008cc0:	e794      	b.n	8008bec <_malloc_r+0x20>
 8008cc2:	6005      	str	r5, [r0, #0]
 8008cc4:	e7d6      	b.n	8008c74 <_malloc_r+0xa8>
 8008cc6:	bf00      	nop
 8008cc8:	24000364 	.word	0x24000364

08008ccc <__malloc_lock>:
 8008ccc:	4801      	ldr	r0, [pc, #4]	@ (8008cd4 <__malloc_lock+0x8>)
 8008cce:	f7ff bf0e 	b.w	8008aee <__retarget_lock_acquire_recursive>
 8008cd2:	bf00      	nop
 8008cd4:	2400035c 	.word	0x2400035c

08008cd8 <__malloc_unlock>:
 8008cd8:	4801      	ldr	r0, [pc, #4]	@ (8008ce0 <__malloc_unlock+0x8>)
 8008cda:	f7ff bf09 	b.w	8008af0 <__retarget_lock_release_recursive>
 8008cde:	bf00      	nop
 8008ce0:	2400035c 	.word	0x2400035c

08008ce4 <__sflush_r>:
 8008ce4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cec:	0716      	lsls	r6, r2, #28
 8008cee:	4605      	mov	r5, r0
 8008cf0:	460c      	mov	r4, r1
 8008cf2:	d454      	bmi.n	8008d9e <__sflush_r+0xba>
 8008cf4:	684b      	ldr	r3, [r1, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	dc02      	bgt.n	8008d00 <__sflush_r+0x1c>
 8008cfa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	dd48      	ble.n	8008d92 <__sflush_r+0xae>
 8008d00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d02:	2e00      	cmp	r6, #0
 8008d04:	d045      	beq.n	8008d92 <__sflush_r+0xae>
 8008d06:	2300      	movs	r3, #0
 8008d08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008d0c:	682f      	ldr	r7, [r5, #0]
 8008d0e:	6a21      	ldr	r1, [r4, #32]
 8008d10:	602b      	str	r3, [r5, #0]
 8008d12:	d030      	beq.n	8008d76 <__sflush_r+0x92>
 8008d14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008d16:	89a3      	ldrh	r3, [r4, #12]
 8008d18:	0759      	lsls	r1, r3, #29
 8008d1a:	d505      	bpl.n	8008d28 <__sflush_r+0x44>
 8008d1c:	6863      	ldr	r3, [r4, #4]
 8008d1e:	1ad2      	subs	r2, r2, r3
 8008d20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008d22:	b10b      	cbz	r3, 8008d28 <__sflush_r+0x44>
 8008d24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008d26:	1ad2      	subs	r2, r2, r3
 8008d28:	2300      	movs	r3, #0
 8008d2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d2c:	6a21      	ldr	r1, [r4, #32]
 8008d2e:	4628      	mov	r0, r5
 8008d30:	47b0      	blx	r6
 8008d32:	1c43      	adds	r3, r0, #1
 8008d34:	89a3      	ldrh	r3, [r4, #12]
 8008d36:	d106      	bne.n	8008d46 <__sflush_r+0x62>
 8008d38:	6829      	ldr	r1, [r5, #0]
 8008d3a:	291d      	cmp	r1, #29
 8008d3c:	d82b      	bhi.n	8008d96 <__sflush_r+0xb2>
 8008d3e:	4a2a      	ldr	r2, [pc, #168]	@ (8008de8 <__sflush_r+0x104>)
 8008d40:	40ca      	lsrs	r2, r1
 8008d42:	07d6      	lsls	r6, r2, #31
 8008d44:	d527      	bpl.n	8008d96 <__sflush_r+0xb2>
 8008d46:	2200      	movs	r2, #0
 8008d48:	6062      	str	r2, [r4, #4]
 8008d4a:	04d9      	lsls	r1, r3, #19
 8008d4c:	6922      	ldr	r2, [r4, #16]
 8008d4e:	6022      	str	r2, [r4, #0]
 8008d50:	d504      	bpl.n	8008d5c <__sflush_r+0x78>
 8008d52:	1c42      	adds	r2, r0, #1
 8008d54:	d101      	bne.n	8008d5a <__sflush_r+0x76>
 8008d56:	682b      	ldr	r3, [r5, #0]
 8008d58:	b903      	cbnz	r3, 8008d5c <__sflush_r+0x78>
 8008d5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008d5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d5e:	602f      	str	r7, [r5, #0]
 8008d60:	b1b9      	cbz	r1, 8008d92 <__sflush_r+0xae>
 8008d62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d66:	4299      	cmp	r1, r3
 8008d68:	d002      	beq.n	8008d70 <__sflush_r+0x8c>
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	f7ff fec2 	bl	8008af4 <_free_r>
 8008d70:	2300      	movs	r3, #0
 8008d72:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d74:	e00d      	b.n	8008d92 <__sflush_r+0xae>
 8008d76:	2301      	movs	r3, #1
 8008d78:	4628      	mov	r0, r5
 8008d7a:	47b0      	blx	r6
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	1c50      	adds	r0, r2, #1
 8008d80:	d1c9      	bne.n	8008d16 <__sflush_r+0x32>
 8008d82:	682b      	ldr	r3, [r5, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d0c6      	beq.n	8008d16 <__sflush_r+0x32>
 8008d88:	2b1d      	cmp	r3, #29
 8008d8a:	d001      	beq.n	8008d90 <__sflush_r+0xac>
 8008d8c:	2b16      	cmp	r3, #22
 8008d8e:	d11e      	bne.n	8008dce <__sflush_r+0xea>
 8008d90:	602f      	str	r7, [r5, #0]
 8008d92:	2000      	movs	r0, #0
 8008d94:	e022      	b.n	8008ddc <__sflush_r+0xf8>
 8008d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d9a:	b21b      	sxth	r3, r3
 8008d9c:	e01b      	b.n	8008dd6 <__sflush_r+0xf2>
 8008d9e:	690f      	ldr	r7, [r1, #16]
 8008da0:	2f00      	cmp	r7, #0
 8008da2:	d0f6      	beq.n	8008d92 <__sflush_r+0xae>
 8008da4:	0793      	lsls	r3, r2, #30
 8008da6:	680e      	ldr	r6, [r1, #0]
 8008da8:	bf08      	it	eq
 8008daa:	694b      	ldreq	r3, [r1, #20]
 8008dac:	600f      	str	r7, [r1, #0]
 8008dae:	bf18      	it	ne
 8008db0:	2300      	movne	r3, #0
 8008db2:	eba6 0807 	sub.w	r8, r6, r7
 8008db6:	608b      	str	r3, [r1, #8]
 8008db8:	f1b8 0f00 	cmp.w	r8, #0
 8008dbc:	dde9      	ble.n	8008d92 <__sflush_r+0xae>
 8008dbe:	6a21      	ldr	r1, [r4, #32]
 8008dc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008dc2:	4643      	mov	r3, r8
 8008dc4:	463a      	mov	r2, r7
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	47b0      	blx	r6
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	dc08      	bgt.n	8008de0 <__sflush_r+0xfc>
 8008dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dd6:	81a3      	strh	r3, [r4, #12]
 8008dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008de0:	4407      	add	r7, r0
 8008de2:	eba8 0800 	sub.w	r8, r8, r0
 8008de6:	e7e7      	b.n	8008db8 <__sflush_r+0xd4>
 8008de8:	20400001 	.word	0x20400001

08008dec <_fflush_r>:
 8008dec:	b538      	push	{r3, r4, r5, lr}
 8008dee:	690b      	ldr	r3, [r1, #16]
 8008df0:	4605      	mov	r5, r0
 8008df2:	460c      	mov	r4, r1
 8008df4:	b913      	cbnz	r3, 8008dfc <_fflush_r+0x10>
 8008df6:	2500      	movs	r5, #0
 8008df8:	4628      	mov	r0, r5
 8008dfa:	bd38      	pop	{r3, r4, r5, pc}
 8008dfc:	b118      	cbz	r0, 8008e06 <_fflush_r+0x1a>
 8008dfe:	6a03      	ldr	r3, [r0, #32]
 8008e00:	b90b      	cbnz	r3, 8008e06 <_fflush_r+0x1a>
 8008e02:	f7ff fc8f 	bl	8008724 <__sinit>
 8008e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d0f3      	beq.n	8008df6 <_fflush_r+0xa>
 8008e0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008e10:	07d0      	lsls	r0, r2, #31
 8008e12:	d404      	bmi.n	8008e1e <_fflush_r+0x32>
 8008e14:	0599      	lsls	r1, r3, #22
 8008e16:	d402      	bmi.n	8008e1e <_fflush_r+0x32>
 8008e18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e1a:	f7ff fe68 	bl	8008aee <__retarget_lock_acquire_recursive>
 8008e1e:	4628      	mov	r0, r5
 8008e20:	4621      	mov	r1, r4
 8008e22:	f7ff ff5f 	bl	8008ce4 <__sflush_r>
 8008e26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e28:	07da      	lsls	r2, r3, #31
 8008e2a:	4605      	mov	r5, r0
 8008e2c:	d4e4      	bmi.n	8008df8 <_fflush_r+0xc>
 8008e2e:	89a3      	ldrh	r3, [r4, #12]
 8008e30:	059b      	lsls	r3, r3, #22
 8008e32:	d4e1      	bmi.n	8008df8 <_fflush_r+0xc>
 8008e34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e36:	f7ff fe5b 	bl	8008af0 <__retarget_lock_release_recursive>
 8008e3a:	e7dd      	b.n	8008df8 <_fflush_r+0xc>

08008e3c <__swhatbuf_r>:
 8008e3c:	b570      	push	{r4, r5, r6, lr}
 8008e3e:	460c      	mov	r4, r1
 8008e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e44:	2900      	cmp	r1, #0
 8008e46:	b096      	sub	sp, #88	@ 0x58
 8008e48:	4615      	mov	r5, r2
 8008e4a:	461e      	mov	r6, r3
 8008e4c:	da0d      	bge.n	8008e6a <__swhatbuf_r+0x2e>
 8008e4e:	89a3      	ldrh	r3, [r4, #12]
 8008e50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e54:	f04f 0100 	mov.w	r1, #0
 8008e58:	bf14      	ite	ne
 8008e5a:	2340      	movne	r3, #64	@ 0x40
 8008e5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e60:	2000      	movs	r0, #0
 8008e62:	6031      	str	r1, [r6, #0]
 8008e64:	602b      	str	r3, [r5, #0]
 8008e66:	b016      	add	sp, #88	@ 0x58
 8008e68:	bd70      	pop	{r4, r5, r6, pc}
 8008e6a:	466a      	mov	r2, sp
 8008e6c:	f000 f848 	bl	8008f00 <_fstat_r>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	dbec      	blt.n	8008e4e <__swhatbuf_r+0x12>
 8008e74:	9901      	ldr	r1, [sp, #4]
 8008e76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e7e:	4259      	negs	r1, r3
 8008e80:	4159      	adcs	r1, r3
 8008e82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e86:	e7eb      	b.n	8008e60 <__swhatbuf_r+0x24>

08008e88 <__smakebuf_r>:
 8008e88:	898b      	ldrh	r3, [r1, #12]
 8008e8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e8c:	079d      	lsls	r5, r3, #30
 8008e8e:	4606      	mov	r6, r0
 8008e90:	460c      	mov	r4, r1
 8008e92:	d507      	bpl.n	8008ea4 <__smakebuf_r+0x1c>
 8008e94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e98:	6023      	str	r3, [r4, #0]
 8008e9a:	6123      	str	r3, [r4, #16]
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	6163      	str	r3, [r4, #20]
 8008ea0:	b003      	add	sp, #12
 8008ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ea4:	ab01      	add	r3, sp, #4
 8008ea6:	466a      	mov	r2, sp
 8008ea8:	f7ff ffc8 	bl	8008e3c <__swhatbuf_r>
 8008eac:	9f00      	ldr	r7, [sp, #0]
 8008eae:	4605      	mov	r5, r0
 8008eb0:	4639      	mov	r1, r7
 8008eb2:	4630      	mov	r0, r6
 8008eb4:	f7ff fe8a 	bl	8008bcc <_malloc_r>
 8008eb8:	b948      	cbnz	r0, 8008ece <__smakebuf_r+0x46>
 8008eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ebe:	059a      	lsls	r2, r3, #22
 8008ec0:	d4ee      	bmi.n	8008ea0 <__smakebuf_r+0x18>
 8008ec2:	f023 0303 	bic.w	r3, r3, #3
 8008ec6:	f043 0302 	orr.w	r3, r3, #2
 8008eca:	81a3      	strh	r3, [r4, #12]
 8008ecc:	e7e2      	b.n	8008e94 <__smakebuf_r+0xc>
 8008ece:	89a3      	ldrh	r3, [r4, #12]
 8008ed0:	6020      	str	r0, [r4, #0]
 8008ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ed6:	81a3      	strh	r3, [r4, #12]
 8008ed8:	9b01      	ldr	r3, [sp, #4]
 8008eda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ede:	b15b      	cbz	r3, 8008ef8 <__smakebuf_r+0x70>
 8008ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f000 f81d 	bl	8008f24 <_isatty_r>
 8008eea:	b128      	cbz	r0, 8008ef8 <__smakebuf_r+0x70>
 8008eec:	89a3      	ldrh	r3, [r4, #12]
 8008eee:	f023 0303 	bic.w	r3, r3, #3
 8008ef2:	f043 0301 	orr.w	r3, r3, #1
 8008ef6:	81a3      	strh	r3, [r4, #12]
 8008ef8:	89a3      	ldrh	r3, [r4, #12]
 8008efa:	431d      	orrs	r5, r3
 8008efc:	81a5      	strh	r5, [r4, #12]
 8008efe:	e7cf      	b.n	8008ea0 <__smakebuf_r+0x18>

08008f00 <_fstat_r>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	4d07      	ldr	r5, [pc, #28]	@ (8008f20 <_fstat_r+0x20>)
 8008f04:	2300      	movs	r3, #0
 8008f06:	4604      	mov	r4, r0
 8008f08:	4608      	mov	r0, r1
 8008f0a:	4611      	mov	r1, r2
 8008f0c:	602b      	str	r3, [r5, #0]
 8008f0e:	f7f7 fe04 	bl	8000b1a <_fstat>
 8008f12:	1c43      	adds	r3, r0, #1
 8008f14:	d102      	bne.n	8008f1c <_fstat_r+0x1c>
 8008f16:	682b      	ldr	r3, [r5, #0]
 8008f18:	b103      	cbz	r3, 8008f1c <_fstat_r+0x1c>
 8008f1a:	6023      	str	r3, [r4, #0]
 8008f1c:	bd38      	pop	{r3, r4, r5, pc}
 8008f1e:	bf00      	nop
 8008f20:	24000358 	.word	0x24000358

08008f24 <_isatty_r>:
 8008f24:	b538      	push	{r3, r4, r5, lr}
 8008f26:	4d06      	ldr	r5, [pc, #24]	@ (8008f40 <_isatty_r+0x1c>)
 8008f28:	2300      	movs	r3, #0
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	4608      	mov	r0, r1
 8008f2e:	602b      	str	r3, [r5, #0]
 8008f30:	f7f7 fe03 	bl	8000b3a <_isatty>
 8008f34:	1c43      	adds	r3, r0, #1
 8008f36:	d102      	bne.n	8008f3e <_isatty_r+0x1a>
 8008f38:	682b      	ldr	r3, [r5, #0]
 8008f3a:	b103      	cbz	r3, 8008f3e <_isatty_r+0x1a>
 8008f3c:	6023      	str	r3, [r4, #0]
 8008f3e:	bd38      	pop	{r3, r4, r5, pc}
 8008f40:	24000358 	.word	0x24000358

08008f44 <_sbrk_r>:
 8008f44:	b538      	push	{r3, r4, r5, lr}
 8008f46:	4d06      	ldr	r5, [pc, #24]	@ (8008f60 <_sbrk_r+0x1c>)
 8008f48:	2300      	movs	r3, #0
 8008f4a:	4604      	mov	r4, r0
 8008f4c:	4608      	mov	r0, r1
 8008f4e:	602b      	str	r3, [r5, #0]
 8008f50:	f7f7 fe0c 	bl	8000b6c <_sbrk>
 8008f54:	1c43      	adds	r3, r0, #1
 8008f56:	d102      	bne.n	8008f5e <_sbrk_r+0x1a>
 8008f58:	682b      	ldr	r3, [r5, #0]
 8008f5a:	b103      	cbz	r3, 8008f5e <_sbrk_r+0x1a>
 8008f5c:	6023      	str	r3, [r4, #0]
 8008f5e:	bd38      	pop	{r3, r4, r5, pc}
 8008f60:	24000358 	.word	0x24000358

08008f64 <_init>:
 8008f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f66:	bf00      	nop
 8008f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f6a:	bc08      	pop	{r3}
 8008f6c:	469e      	mov	lr, r3
 8008f6e:	4770      	bx	lr

08008f70 <_fini>:
 8008f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f72:	bf00      	nop
 8008f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f76:	bc08      	pop	{r3}
 8008f78:	469e      	mov	lr, r3
 8008f7a:	4770      	bx	lr
