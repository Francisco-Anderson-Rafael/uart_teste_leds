
uart_teste.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092f4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08009594  08009594  0000a594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009804  08009804  0000a804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800980c  0800980c  0000a80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009810  08009810  0000a810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08009814  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002fc  2400006c  08009880  0000b06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000368  08009880  0000b368  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012050  00000000  00000000  0000b09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002640  00000000  00000000  0001d0ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000bf8  00000000  00000000  0001f730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000091f  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037b3b  00000000  00000000  00020c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012da6  00000000  00000000  00058782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ba55  00000000  00000000  0006b528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c6f7d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000377c  00000000  00000000  001c6fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000078  00000000  00000000  001ca73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800957c 	.word	0x0800957c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	0800957c 	.word	0x0800957c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006b2:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <MX_DMA_Init+0x4c>)
 80006b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006b8:	4a0f      	ldr	r2, [pc, #60]	@ (80006f8 <MX_DMA_Init+0x4c>)
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006c2:	4b0d      	ldr	r3, [pc, #52]	@ (80006f8 <MX_DMA_Init+0x4c>)
 80006c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2100      	movs	r1, #0
 80006d4:	200b      	movs	r0, #11
 80006d6:	f000 fe40 	bl	800135a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006da:	200b      	movs	r0, #11
 80006dc:	f000 fe57 	bl	800138e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	200c      	movs	r0, #12
 80006e6:	f000 fe38 	bl	800135a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80006ea:	200c      	movs	r0, #12
 80006ec:	f000 fe4f 	bl	800138e <HAL_NVIC_EnableIRQ>

}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	58024400 	.word	0x58024400

080006fc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000712:	4b2c      	ldr	r3, [pc, #176]	@ (80007c4 <MX_GPIO_Init+0xc8>)
 8000714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000718:	4a2a      	ldr	r2, [pc, #168]	@ (80007c4 <MX_GPIO_Init+0xc8>)
 800071a:	f043 0302 	orr.w	r3, r3, #2
 800071e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000722:	4b28      	ldr	r3, [pc, #160]	@ (80007c4 <MX_GPIO_Init+0xc8>)
 8000724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000728:	f003 0302 	and.w	r3, r3, #2
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000730:	4b24      	ldr	r3, [pc, #144]	@ (80007c4 <MX_GPIO_Init+0xc8>)
 8000732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000736:	4a23      	ldr	r2, [pc, #140]	@ (80007c4 <MX_GPIO_Init+0xc8>)
 8000738:	f043 0308 	orr.w	r3, r3, #8
 800073c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000740:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <MX_GPIO_Init+0xc8>)
 8000742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000746:	f003 0308 	and.w	r3, r3, #8
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800074e:	4b1d      	ldr	r3, [pc, #116]	@ (80007c4 <MX_GPIO_Init+0xc8>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000754:	4a1b      	ldr	r2, [pc, #108]	@ (80007c4 <MX_GPIO_Init+0xc8>)
 8000756:	f043 0310 	orr.w	r3, r3, #16
 800075a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800075e:	4b19      	ldr	r3, [pc, #100]	@ (80007c4 <MX_GPIO_Init+0xc8>)
 8000760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000764:	f003 0310 	and.w	r3, r3, #16
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ld1_Pin|ld2_Pin, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000772:	4815      	ldr	r0, [pc, #84]	@ (80007c8 <MX_GPIO_Init+0xcc>)
 8000774:	f003 fa74 	bl	8003c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ld3_GPIO_Port, ld3_Pin, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	2102      	movs	r1, #2
 800077c:	4813      	ldr	r0, [pc, #76]	@ (80007cc <MX_GPIO_Init+0xd0>)
 800077e:	f003 fa6f 	bl	8003c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ld1_Pin ld2_Pin */
  GPIO_InitStruct.Pin = ld1_Pin|ld2_Pin;
 8000782:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	4619      	mov	r1, r3
 800079a:	480b      	ldr	r0, [pc, #44]	@ (80007c8 <MX_GPIO_Init+0xcc>)
 800079c:	f003 f8b0 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pin : ld3_Pin */
  GPIO_InitStruct.Pin = ld3_Pin;
 80007a0:	2302      	movs	r3, #2
 80007a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ld3_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	4619      	mov	r1, r3
 80007b6:	4805      	ldr	r0, [pc, #20]	@ (80007cc <MX_GPIO_Init+0xd0>)
 80007b8:	f003 f8a2 	bl	8003900 <HAL_GPIO_Init>

}
 80007bc:	bf00      	nop
 80007be:	3720      	adds	r7, #32
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	58024400 	.word	0x58024400
 80007c8:	58020400 	.word	0x58020400
 80007cc:	58021000 	.word	0x58021000

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007d4:	f000 f90a 	bl	80009ec <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d8:	f000 fc46 	bl	8001068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007dc:	f000 f89c 	bl	8000918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e0:	f7ff ff8c 	bl	80006fc <MX_GPIO_Init>
  MX_DMA_Init();
 80007e4:	f7ff ff62 	bl	80006ac <MX_DMA_Init>
  MX_USART3_UART_Init();
 80007e8:	f000 fada 	bl	8000da0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // Opcional: Acenda ou apague o LED no início para indicar estado inicial
  HAL_GPIO_WritePin(ld2_GPIO_Port, ld2_Pin, GPIO_PIN_RESET); // LED começa apagado
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007f2:	483e      	ldr	r0, [pc, #248]	@ (80008ec <main+0x11c>)
 80007f4:	f003 fa34 	bl	8003c60 <HAL_GPIO_WritePin>

    /* USER CODE BEGIN 3 */
	    //Display_Menu(); // Exibe o menu a cada iteração do loop principal

	    // Tenta receber entrada do usuário sem bloquear (timeout 100ms)
	    if (HAL_UART_Receive(&huart3, &rx_data, 1, 100) == HAL_OK)
 80007f8:	2364      	movs	r3, #100	@ 0x64
 80007fa:	2201      	movs	r2, #1
 80007fc:	493c      	ldr	r1, [pc, #240]	@ (80008f0 <main+0x120>)
 80007fe:	483d      	ldr	r0, [pc, #244]	@ (80008f4 <main+0x124>)
 8000800:	f006 f98c 	bl	8006b1c <HAL_UART_Receive>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d158      	bne.n	80008bc <main+0xec>
	    {
	      switch (rx_data)
 800080a:	4b39      	ldr	r3, [pc, #228]	@ (80008f0 <main+0x120>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	3b31      	subs	r3, #49	@ 0x31
 8000810:	2b03      	cmp	r3, #3
 8000812:	d83e      	bhi.n	8000892 <main+0xc2>
 8000814:	a201      	add	r2, pc, #4	@ (adr r2, 800081c <main+0x4c>)
 8000816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800081a:	bf00      	nop
 800081c:	0800082d 	.word	0x0800082d
 8000820:	08000847 	.word	0x08000847
 8000824:	08000861 	.word	0x08000861
 8000828:	08000879 	.word	0x08000879
	      {
	        case '1':
	          printf(">> Opcao 1: LED ACESO!\r\n");
 800082c:	4832      	ldr	r0, [pc, #200]	@ (80008f8 <main+0x128>)
 800082e:	f008 f843 	bl	80088b8 <puts>
	          HAL_GPIO_WritePin(ld2_GPIO_Port, ld2_Pin, GPIO_PIN_SET); // Acende o LED
 8000832:	2201      	movs	r2, #1
 8000834:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000838:	482c      	ldr	r0, [pc, #176]	@ (80008ec <main+0x11c>)
 800083a:	f003 fa11 	bl	8003c60 <HAL_GPIO_WritePin>
	          led_mode = 1; // Define o modo LED ON
 800083e:	4b2f      	ldr	r3, [pc, #188]	@ (80008fc <main+0x12c>)
 8000840:	2201      	movs	r2, #1
 8000842:	701a      	strb	r2, [r3, #0]
	          break;
 8000844:	e03a      	b.n	80008bc <main+0xec>

	        case '2':
	          printf(">> Opcao 2: LED APAGADO!\r\n");
 8000846:	482e      	ldr	r0, [pc, #184]	@ (8000900 <main+0x130>)
 8000848:	f008 f836 	bl	80088b8 <puts>
	          HAL_GPIO_WritePin(ld2_GPIO_Port, ld2_Pin, GPIO_PIN_RESET); // Apaga o LED
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000852:	4826      	ldr	r0, [pc, #152]	@ (80008ec <main+0x11c>)
 8000854:	f003 fa04 	bl	8003c60 <HAL_GPIO_WritePin>
	          led_mode = 0; // Define o modo LED OFF
 8000858:	4b28      	ldr	r3, [pc, #160]	@ (80008fc <main+0x12c>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
	          break;
 800085e:	e02d      	b.n	80008bc <main+0xec>

	        case '3':
	          printf(">> Opcao 3: LED PISCANDO CONTINUAMENTE! Pressione outra tecla para parar.\r\n");
 8000860:	4828      	ldr	r0, [pc, #160]	@ (8000904 <main+0x134>)
 8000862:	f008 f829 	bl	80088b8 <puts>
	          led_mode = 2; // Define o modo LED PISCANDO
 8000866:	4b25      	ldr	r3, [pc, #148]	@ (80008fc <main+0x12c>)
 8000868:	2202      	movs	r2, #2
 800086a:	701a      	strb	r2, [r3, #0]
	          last_blink_time = HAL_GetTick(); // Reseta o timer do pisca-pisca
 800086c:	f000 fc82 	bl	8001174 <HAL_GetTick>
 8000870:	4603      	mov	r3, r0
 8000872:	4a25      	ldr	r2, [pc, #148]	@ (8000908 <main+0x138>)
 8000874:	6013      	str	r3, [r2, #0]
	          break;
 8000876:	e021      	b.n	80008bc <main+0xec>

	        case '4':
	          printf(">> Incremento de 10%% por botao. (Funcionalidade a implementar)\r\n");
 8000878:	4824      	ldr	r0, [pc, #144]	@ (800090c <main+0x13c>)
 800087a:	f007 ffb5 	bl	80087e8 <iprintf>
	          // Certifica-se de que o LED não esteja piscando ou aceso/apagado por outras opções
	          HAL_GPIO_WritePin(ld2_GPIO_Port, ld2_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000884:	4819      	ldr	r0, [pc, #100]	@ (80008ec <main+0x11c>)
 8000886:	f003 f9eb 	bl	8003c60 <HAL_GPIO_WritePin>
	          led_mode = 0;
 800088a:	4b1c      	ldr	r3, [pc, #112]	@ (80008fc <main+0x12c>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
	          break;
 8000890:	e014      	b.n	80008bc <main+0xec>

	        default:
	          printf(">> Opcao invalida. Tente novamente.\r\n");
 8000892:	481f      	ldr	r0, [pc, #124]	@ (8000910 <main+0x140>)
 8000894:	f008 f810 	bl	80088b8 <puts>
	          // Se uma opção inválida for digitada, certifique-se de que o LED não fique preso em um estado de piscar
	          if (led_mode == 2) {
 8000898:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <main+0x12c>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b02      	cmp	r3, #2
 80008a0:	d10b      	bne.n	80008ba <main+0xea>
	             HAL_GPIO_WritePin(ld2_GPIO_Port, ld2_Pin, GPIO_PIN_RESET); // Apaga o LED
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008a8:	4810      	ldr	r0, [pc, #64]	@ (80008ec <main+0x11c>)
 80008aa:	f003 f9d9 	bl	8003c60 <HAL_GPIO_WritePin>
	             led_mode = 0; // Sai do modo pisca-pisca
 80008ae:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <main+0x12c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
	             printf(">> Modo pisca-pisca interrompido por opcao invalida.\r\n");
 80008b4:	4817      	ldr	r0, [pc, #92]	@ (8000914 <main+0x144>)
 80008b6:	f007 ffff 	bl	80088b8 <puts>
	          }
	          break;
 80008ba:	bf00      	nop
	      }
	    }

        // Lógica para piscar o LED se o modo for 2
        if (led_mode == 2) {
 80008bc:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <main+0x12c>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d198      	bne.n	80007f8 <main+0x28>
            if (HAL_GetTick() - last_blink_time >= BLINK_DELAY_MS) {
 80008c6:	f000 fc55 	bl	8001174 <HAL_GetTick>
 80008ca:	4602      	mov	r2, r0
 80008cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <main+0x138>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80008d6:	d38f      	bcc.n	80007f8 <main+0x28>
                HAL_GPIO_TogglePin(ld1_GPIO_Port, ld1_Pin); // Inverte o estado do LED
 80008d8:	2101      	movs	r1, #1
 80008da:	4804      	ldr	r0, [pc, #16]	@ (80008ec <main+0x11c>)
 80008dc:	f003 f9d9 	bl	8003c92 <HAL_GPIO_TogglePin>
                last_blink_time = HAL_GetTick();            // Atualiza o tempo da última piscada
 80008e0:	f000 fc48 	bl	8001174 <HAL_GetTick>
 80008e4:	4603      	mov	r3, r0
 80008e6:	4a08      	ldr	r2, [pc, #32]	@ (8000908 <main+0x138>)
 80008e8:	6013      	str	r3, [r2, #0]
	    if (HAL_UART_Receive(&huart3, &rx_data, 1, 100) == HAL_OK)
 80008ea:	e785      	b.n	80007f8 <main+0x28>
 80008ec:	58020400 	.word	0x58020400
 80008f0:	24000088 	.word	0x24000088
 80008f4:	24000094 	.word	0x24000094
 80008f8:	08009594 	.word	0x08009594
 80008fc:	24000089 	.word	0x24000089
 8000900:	080095ac 	.word	0x080095ac
 8000904:	080095c8 	.word	0x080095c8
 8000908:	2400008c 	.word	0x2400008c
 800090c:	08009614 	.word	0x08009614
 8000910:	08009658 	.word	0x08009658
 8000914:	08009680 	.word	0x08009680

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b09c      	sub	sp, #112	@ 0x70
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000922:	224c      	movs	r2, #76	@ 0x4c
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f008 f8a6 	bl	8008a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2220      	movs	r2, #32
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f008 f8a0 	bl	8008a78 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000938:	2002      	movs	r0, #2
 800093a:	f003 f9c5 	bl	8003cc8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b28      	ldr	r3, [pc, #160]	@ (80009e4 <SystemClock_Config+0xcc>)
 8000944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000946:	4a27      	ldr	r2, [pc, #156]	@ (80009e4 <SystemClock_Config+0xcc>)
 8000948:	f023 0301 	bic.w	r3, r3, #1
 800094c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800094e:	4b25      	ldr	r3, [pc, #148]	@ (80009e4 <SystemClock_Config+0xcc>)
 8000950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	4b23      	ldr	r3, [pc, #140]	@ (80009e8 <SystemClock_Config+0xd0>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000960:	4a21      	ldr	r2, [pc, #132]	@ (80009e8 <SystemClock_Config+0xd0>)
 8000962:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b1f      	ldr	r3, [pc, #124]	@ (80009e8 <SystemClock_Config+0xd0>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000974:	bf00      	nop
 8000976:	4b1c      	ldr	r3, [pc, #112]	@ (80009e8 <SystemClock_Config+0xd0>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800097e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000982:	d1f8      	bne.n	8000976 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000984:	2302      	movs	r3, #2
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000988:	2301      	movs	r3, #1
 800098a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800098c:	2340      	movs	r3, #64	@ 0x40
 800098e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000990:	2300      	movs	r3, #0
 8000992:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000994:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000998:	4618      	mov	r0, r3
 800099a:	f003 f9cf 	bl	8003d3c <HAL_RCC_OscConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80009a4:	f000 f84e 	bl	8000a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a8:	233f      	movs	r3, #63	@ 0x3f
 80009aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1; // <<-- Linha corrigida aqui
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009bc:	2340      	movs	r3, #64	@ 0x40
 80009be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2101      	movs	r1, #1
 80009cc:	4618      	mov	r0, r3
 80009ce:	f003 fe0f 	bl	80045f0 <HAL_RCC_ClockConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009d8:	f000 f834 	bl	8000a44 <Error_Handler>
  }
}
 80009dc:	bf00      	nop
 80009de:	3770      	adds	r7, #112	@ 0x70
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	58000400 	.word	0x58000400
 80009e8:	58024800 	.word	0x58024800

080009ec <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009f2:	463b      	mov	r3, r7
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80009fe:	f000 fce1 	bl	80013c4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a02:	2301      	movs	r3, #1
 8000a04:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a0e:	231f      	movs	r3, #31
 8000a10:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a12:	2387      	movs	r3, #135	@ 0x87
 8000a14:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a22:	2301      	movs	r3, #1
 8000a24:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a2e:	463b      	mov	r3, r7
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 fcff 	bl	8001434 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a36:	2004      	movs	r0, #4
 8000a38:	f000 fcdc 	bl	80013f4 <HAL_MPU_Enable>

}
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
}
 8000a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <Error_Handler+0x8>

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	4b0a      	ldr	r3, [pc, #40]	@ (8000a80 <HAL_MspInit+0x30>)
 8000a58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a5c:	4a08      	ldr	r2, [pc, #32]	@ (8000a80 <HAL_MspInit+0x30>)
 8000a5e:	f043 0302 	orr.w	r3, r3, #2
 8000a62:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a66:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <HAL_MspInit+0x30>)
 8000a68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a6c:	f003 0302 	and.w	r3, r3, #2
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	58024400 	.word	0x58024400

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <NMI_Handler+0x4>

08000a8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <HardFault_Handler+0x4>

08000a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <MemManage_Handler+0x4>

08000a9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ada:	f000 fb37 	bl	800114c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000ae8:	4802      	ldr	r0, [pc, #8]	@ (8000af4 <DMA1_Stream0_IRQHandler+0x10>)
 8000aea:	f001 fda3 	bl	8002634 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	24000128 	.word	0x24000128

08000af8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000afc:	4802      	ldr	r0, [pc, #8]	@ (8000b08 <DMA1_Stream1_IRQHandler+0x10>)
 8000afe:	f001 fd99 	bl	8002634 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	240001a0 	.word	0x240001a0

08000b0c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b10:	4802      	ldr	r0, [pc, #8]	@ (8000b1c <USART3_IRQHandler+0x10>)
 8000b12:	f006 f8cb 	bl	8006cac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	24000094 	.word	0x24000094

08000b20 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	e00a      	b.n	8000b48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b32:	f3af 8000 	nop.w
 8000b36:	4601      	mov	r1, r0
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	60ba      	str	r2, [r7, #8]
 8000b3e:	b2ca      	uxtb	r2, r1
 8000b40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	3301      	adds	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dbf0      	blt.n	8000b32 <_read+0x12>
  }

  return len;
 8000b50:	687b      	ldr	r3, [r7, #4]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
 8000b7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b82:	605a      	str	r2, [r3, #4]
  return 0;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <_isatty>:

int _isatty(int file)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
	...

08000bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bcc:	4a14      	ldr	r2, [pc, #80]	@ (8000c20 <_sbrk+0x5c>)
 8000bce:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <_sbrk+0x60>)
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd8:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d102      	bne.n	8000be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be0:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <_sbrk+0x64>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	@ (8000c2c <_sbrk+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be6:	4b10      	ldr	r3, [pc, #64]	@ (8000c28 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d207      	bcs.n	8000c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf4:	f007 ff8e 	bl	8008b14 <__errno>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	e009      	b.n	8000c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c04:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a05      	ldr	r2, [pc, #20]	@ (8000c28 <_sbrk+0x64>)
 8000c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	24080000 	.word	0x24080000
 8000c24:	00000400 	.word	0x00000400
 8000c28:	24000090 	.word	0x24000090
 8000c2c:	24000368 	.word	0x24000368

08000c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c34:	4b43      	ldr	r3, [pc, #268]	@ (8000d44 <SystemInit+0x114>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c3a:	4a42      	ldr	r2, [pc, #264]	@ (8000d44 <SystemInit+0x114>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c44:	4b40      	ldr	r3, [pc, #256]	@ (8000d48 <SystemInit+0x118>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f003 030f 	and.w	r3, r3, #15
 8000c4c:	2b06      	cmp	r3, #6
 8000c4e:	d807      	bhi.n	8000c60 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c50:	4b3d      	ldr	r3, [pc, #244]	@ (8000d48 <SystemInit+0x118>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f023 030f 	bic.w	r3, r3, #15
 8000c58:	4a3b      	ldr	r2, [pc, #236]	@ (8000d48 <SystemInit+0x118>)
 8000c5a:	f043 0307 	orr.w	r3, r3, #7
 8000c5e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c60:	4b3a      	ldr	r3, [pc, #232]	@ (8000d4c <SystemInit+0x11c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a39      	ldr	r2, [pc, #228]	@ (8000d4c <SystemInit+0x11c>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c6c:	4b37      	ldr	r3, [pc, #220]	@ (8000d4c <SystemInit+0x11c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c72:	4b36      	ldr	r3, [pc, #216]	@ (8000d4c <SystemInit+0x11c>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	4935      	ldr	r1, [pc, #212]	@ (8000d4c <SystemInit+0x11c>)
 8000c78:	4b35      	ldr	r3, [pc, #212]	@ (8000d50 <SystemInit+0x120>)
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c7e:	4b32      	ldr	r3, [pc, #200]	@ (8000d48 <SystemInit+0x118>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 0308 	and.w	r3, r3, #8
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d007      	beq.n	8000c9a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d48 <SystemInit+0x118>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f023 030f 	bic.w	r3, r3, #15
 8000c92:	4a2d      	ldr	r2, [pc, #180]	@ (8000d48 <SystemInit+0x118>)
 8000c94:	f043 0307 	orr.w	r3, r3, #7
 8000c98:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d4c <SystemInit+0x11c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d4c <SystemInit+0x11c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ca6:	4b29      	ldr	r3, [pc, #164]	@ (8000d4c <SystemInit+0x11c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000cac:	4b27      	ldr	r3, [pc, #156]	@ (8000d4c <SystemInit+0x11c>)
 8000cae:	4a29      	ldr	r2, [pc, #164]	@ (8000d54 <SystemInit+0x124>)
 8000cb0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000cb2:	4b26      	ldr	r3, [pc, #152]	@ (8000d4c <SystemInit+0x11c>)
 8000cb4:	4a28      	ldr	r2, [pc, #160]	@ (8000d58 <SystemInit+0x128>)
 8000cb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000cb8:	4b24      	ldr	r3, [pc, #144]	@ (8000d4c <SystemInit+0x11c>)
 8000cba:	4a28      	ldr	r2, [pc, #160]	@ (8000d5c <SystemInit+0x12c>)
 8000cbc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000cbe:	4b23      	ldr	r3, [pc, #140]	@ (8000d4c <SystemInit+0x11c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000cc4:	4b21      	ldr	r3, [pc, #132]	@ (8000d4c <SystemInit+0x11c>)
 8000cc6:	4a25      	ldr	r2, [pc, #148]	@ (8000d5c <SystemInit+0x12c>)
 8000cc8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000cca:	4b20      	ldr	r3, [pc, #128]	@ (8000d4c <SystemInit+0x11c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000cd0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d4c <SystemInit+0x11c>)
 8000cd2:	4a22      	ldr	r2, [pc, #136]	@ (8000d5c <SystemInit+0x12c>)
 8000cd4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d4c <SystemInit+0x11c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d4c <SystemInit+0x11c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a1a      	ldr	r2, [pc, #104]	@ (8000d4c <SystemInit+0x11c>)
 8000ce2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ce6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ce8:	4b18      	ldr	r3, [pc, #96]	@ (8000d4c <SystemInit+0x11c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000cee:	4b1c      	ldr	r3, [pc, #112]	@ (8000d60 <SystemInit+0x130>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <SystemInit+0x134>)
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000cfa:	d202      	bcs.n	8000d02 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <SystemInit+0x138>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000d02:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <SystemInit+0x11c>)
 8000d04:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d113      	bne.n	8000d38 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000d10:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <SystemInit+0x11c>)
 8000d12:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d16:	4a0d      	ldr	r2, [pc, #52]	@ (8000d4c <SystemInit+0x11c>)
 8000d18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d1c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <SystemInit+0x13c>)
 8000d22:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000d26:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000d28:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <SystemInit+0x11c>)
 8000d2a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d2e:	4a07      	ldr	r2, [pc, #28]	@ (8000d4c <SystemInit+0x11c>)
 8000d30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d34:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00
 8000d48:	52002000 	.word	0x52002000
 8000d4c:	58024400 	.word	0x58024400
 8000d50:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d54:	02020200 	.word	0x02020200
 8000d58:	01ff0000 	.word	0x01ff0000
 8000d5c:	01010280 	.word	0x01010280
 8000d60:	5c001000 	.word	0x5c001000
 8000d64:	ffff0000 	.word	0xffff0000
 8000d68:	51008108 	.word	0x51008108
 8000d6c:	52004000 	.word	0x52004000

08000d70 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000d74:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <ExitRun0Mode+0x2c>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	4a08      	ldr	r2, [pc, #32]	@ (8000d9c <ExitRun0Mode+0x2c>)
 8000d7a:	f043 0302 	orr.w	r3, r3, #2
 8000d7e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000d80:	bf00      	nop
 8000d82:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <ExitRun0Mode+0x2c>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0f9      	beq.n	8000d82 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000d8e:	bf00      	nop
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	58024800 	.word	0x58024800

08000da0 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000da4:	4b22      	ldr	r3, [pc, #136]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000da6:	4a23      	ldr	r2, [pc, #140]	@ (8000e34 <MX_USART3_UART_Init+0x94>)
 8000da8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000daa:	4b21      	ldr	r3, [pc, #132]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000db0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000db2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000db8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dca:	4b19      	ldr	r3, [pc, #100]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd0:	4b17      	ldr	r3, [pc, #92]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dd6:	4b16      	ldr	r3, [pc, #88]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ddc:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de2:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000de8:	4811      	ldr	r0, [pc, #68]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dea:	f005 fdb9 	bl	8006960 <HAL_UART_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000df4:	f7ff fe26 	bl	8000a44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df8:	2100      	movs	r1, #0
 8000dfa:	480d      	ldr	r0, [pc, #52]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000dfc:	f007 fb68 	bl	80084d0 <HAL_UARTEx_SetTxFifoThreshold>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e06:	f7ff fe1d 	bl	8000a44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4808      	ldr	r0, [pc, #32]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000e0e:	f007 fb9d 	bl	800854c <HAL_UARTEx_SetRxFifoThreshold>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e18:	f7ff fe14 	bl	8000a44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e1c:	4804      	ldr	r0, [pc, #16]	@ (8000e30 <MX_USART3_UART_Init+0x90>)
 8000e1e:	f007 fb1e 	bl	800845e <HAL_UARTEx_DisableFifoMode>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e28:	f7ff fe0c 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	24000094 	.word	0x24000094
 8000e34:	40004800 	.word	0x40004800

08000e38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b0ba      	sub	sp, #232	@ 0xe8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e50:	f107 0310 	add.w	r3, r7, #16
 8000e54:	22c0      	movs	r2, #192	@ 0xc0
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f007 fe0d 	bl	8008a78 <memset>
  if(uartHandle->Instance==USART3)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a59      	ldr	r2, [pc, #356]	@ (8000fc8 <HAL_UART_MspInit+0x190>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	f040 80aa 	bne.w	8000fbe <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e6a:	f04f 0202 	mov.w	r2, #2
 8000e6e:	f04f 0300 	mov.w	r3, #0
 8000e72:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	4618      	mov	r0, r3
 8000e82:	f003 ff41 	bl	8004d08 <HAL_RCCEx_PeriphCLKConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8000e8c:	f7ff fdda 	bl	8000a44 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e90:	4b4e      	ldr	r3, [pc, #312]	@ (8000fcc <HAL_UART_MspInit+0x194>)
 8000e92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e96:	4a4d      	ldr	r2, [pc, #308]	@ (8000fcc <HAL_UART_MspInit+0x194>)
 8000e98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e9c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ea0:	4b4a      	ldr	r3, [pc, #296]	@ (8000fcc <HAL_UART_MspInit+0x194>)
 8000ea2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ea6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eae:	4b47      	ldr	r3, [pc, #284]	@ (8000fcc <HAL_UART_MspInit+0x194>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb4:	4a45      	ldr	r2, [pc, #276]	@ (8000fcc <HAL_UART_MspInit+0x194>)
 8000eb6:	f043 0308 	orr.w	r3, r3, #8
 8000eba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ebe:	4b43      	ldr	r3, [pc, #268]	@ (8000fcc <HAL_UART_MspInit+0x194>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec4:	f003 0308 	and.w	r3, r3, #8
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ecc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ed0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ee6:	2307      	movs	r3, #7
 8000ee8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4837      	ldr	r0, [pc, #220]	@ (8000fd0 <HAL_UART_MspInit+0x198>)
 8000ef4:	f002 fd04 	bl	8003900 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8000ef8:	4b36      	ldr	r3, [pc, #216]	@ (8000fd4 <HAL_UART_MspInit+0x19c>)
 8000efa:	4a37      	ldr	r2, [pc, #220]	@ (8000fd8 <HAL_UART_MspInit+0x1a0>)
 8000efc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000efe:	4b35      	ldr	r3, [pc, #212]	@ (8000fd4 <HAL_UART_MspInit+0x19c>)
 8000f00:	222d      	movs	r2, #45	@ 0x2d
 8000f02:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f04:	4b33      	ldr	r3, [pc, #204]	@ (8000fd4 <HAL_UART_MspInit+0x19c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f0a:	4b32      	ldr	r3, [pc, #200]	@ (8000fd4 <HAL_UART_MspInit+0x19c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f10:	4b30      	ldr	r3, [pc, #192]	@ (8000fd4 <HAL_UART_MspInit+0x19c>)
 8000f12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f16:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f18:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd4 <HAL_UART_MspInit+0x19c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd4 <HAL_UART_MspInit+0x19c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000f24:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd4 <HAL_UART_MspInit+0x19c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd4 <HAL_UART_MspInit+0x19c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f30:	4b28      	ldr	r3, [pc, #160]	@ (8000fd4 <HAL_UART_MspInit+0x19c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000f36:	4827      	ldr	r0, [pc, #156]	@ (8000fd4 <HAL_UART_MspInit+0x19c>)
 8000f38:	f000 fabc 	bl	80014b4 <HAL_DMA_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000f42:	f7ff fd7f 	bl	8000a44 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a22      	ldr	r2, [pc, #136]	@ (8000fd4 <HAL_UART_MspInit+0x19c>)
 8000f4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000f4e:	4a21      	ldr	r2, [pc, #132]	@ (8000fd4 <HAL_UART_MspInit+0x19c>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8000f54:	4b21      	ldr	r3, [pc, #132]	@ (8000fdc <HAL_UART_MspInit+0x1a4>)
 8000f56:	4a22      	ldr	r2, [pc, #136]	@ (8000fe0 <HAL_UART_MspInit+0x1a8>)
 8000f58:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000f5a:	4b20      	ldr	r3, [pc, #128]	@ (8000fdc <HAL_UART_MspInit+0x1a4>)
 8000f5c:	222e      	movs	r2, #46	@ 0x2e
 8000f5e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f60:	4b1e      	ldr	r3, [pc, #120]	@ (8000fdc <HAL_UART_MspInit+0x1a4>)
 8000f62:	2240      	movs	r2, #64	@ 0x40
 8000f64:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f66:	4b1d      	ldr	r3, [pc, #116]	@ (8000fdc <HAL_UART_MspInit+0x1a4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fdc <HAL_UART_MspInit+0x1a4>)
 8000f6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f72:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f74:	4b19      	ldr	r3, [pc, #100]	@ (8000fdc <HAL_UART_MspInit+0x1a4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f7a:	4b18      	ldr	r3, [pc, #96]	@ (8000fdc <HAL_UART_MspInit+0x1a4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000f80:	4b16      	ldr	r3, [pc, #88]	@ (8000fdc <HAL_UART_MspInit+0x1a4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f86:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <HAL_UART_MspInit+0x1a4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f8c:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <HAL_UART_MspInit+0x1a4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000f92:	4812      	ldr	r0, [pc, #72]	@ (8000fdc <HAL_UART_MspInit+0x1a4>)
 8000f94:	f000 fa8e 	bl	80014b4 <HAL_DMA_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8000f9e:	f7ff fd51 	bl	8000a44 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fdc <HAL_UART_MspInit+0x1a4>)
 8000fa6:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000fa8:	4a0c      	ldr	r2, [pc, #48]	@ (8000fdc <HAL_UART_MspInit+0x1a4>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2027      	movs	r0, #39	@ 0x27
 8000fb4:	f000 f9d1 	bl	800135a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fb8:	2027      	movs	r0, #39	@ 0x27
 8000fba:	f000 f9e8 	bl	800138e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	37e8      	adds	r7, #232	@ 0xe8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40004800 	.word	0x40004800
 8000fcc:	58024400 	.word	0x58024400
 8000fd0:	58020c00 	.word	0x58020c00
 8000fd4:	24000128 	.word	0x24000128
 8000fd8:	40020010 	.word	0x40020010
 8000fdc:	240001a0 	.word	0x240001a0
 8000fe0:	40020028 	.word	0x40020028

08000fe4 <_write>:
  }
}

/* USER CODE BEGIN 1 */
int _write(int file, char *ptr, int len)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *) ptr, len, 1000);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	4804      	ldr	r0, [pc, #16]	@ (800100c <_write+0x28>)
 8000ffc:	f005 fd00 	bl	8006a00 <HAL_UART_Transmit>
  return len;
 8001000:	687b      	ldr	r3, [r7, #4]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	24000094 	.word	0x24000094

08001010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001010:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800104c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001014:	f7ff feac 	bl	8000d70 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001018:	f7ff fe0a 	bl	8000c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800101c:	480c      	ldr	r0, [pc, #48]	@ (8001050 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800101e:	490d      	ldr	r1, [pc, #52]	@ (8001054 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001020:	4a0d      	ldr	r2, [pc, #52]	@ (8001058 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001034:	4c0a      	ldr	r4, [pc, #40]	@ (8001060 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001042:	f007 fd6d 	bl	8008b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001046:	f7ff fbc3 	bl	80007d0 <main>
  bx  lr
 800104a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800104c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001050:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001054:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001058:	08009814 	.word	0x08009814
  ldr r2, =_sbss
 800105c:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8001060:	24000368 	.word	0x24000368

08001064 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC3_IRQHandler>
	...

08001068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106e:	2003      	movs	r0, #3
 8001070:	f000 f968 	bl	8001344 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001074:	f003 fc72 	bl	800495c <HAL_RCC_GetSysClockFreq>
 8001078:	4602      	mov	r2, r0
 800107a:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <HAL_Init+0x68>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	0a1b      	lsrs	r3, r3, #8
 8001080:	f003 030f 	and.w	r3, r3, #15
 8001084:	4913      	ldr	r1, [pc, #76]	@ (80010d4 <HAL_Init+0x6c>)
 8001086:	5ccb      	ldrb	r3, [r1, r3]
 8001088:	f003 031f 	and.w	r3, r3, #31
 800108c:	fa22 f303 	lsr.w	r3, r2, r3
 8001090:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001092:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <HAL_Init+0x68>)
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	4a0e      	ldr	r2, [pc, #56]	@ (80010d4 <HAL_Init+0x6c>)
 800109c:	5cd3      	ldrb	r3, [r2, r3]
 800109e:	f003 031f 	and.w	r3, r3, #31
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	fa22 f303 	lsr.w	r3, r2, r3
 80010a8:	4a0b      	ldr	r2, [pc, #44]	@ (80010d8 <HAL_Init+0x70>)
 80010aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010ac:	4a0b      	ldr	r2, [pc, #44]	@ (80010dc <HAL_Init+0x74>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010b2:	200f      	movs	r0, #15
 80010b4:	f000 f814 	bl	80010e0 <HAL_InitTick>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e002      	b.n	80010c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010c2:	f7ff fcc5 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	58024400 	.word	0x58024400
 80010d4:	08009790 	.word	0x08009790
 80010d8:	24000004 	.word	0x24000004
 80010dc:	24000000 	.word	0x24000000

080010e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010e8:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <HAL_InitTick+0x60>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e021      	b.n	8001138 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010f4:	4b13      	ldr	r3, [pc, #76]	@ (8001144 <HAL_InitTick+0x64>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <HAL_InitTick+0x60>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001102:	fbb3 f3f1 	udiv	r3, r3, r1
 8001106:	fbb2 f3f3 	udiv	r3, r2, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f94d 	bl	80013aa <HAL_SYSTICK_Config>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e00e      	b.n	8001138 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b0f      	cmp	r3, #15
 800111e:	d80a      	bhi.n	8001136 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001120:	2200      	movs	r2, #0
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f000 f917 	bl	800135a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800112c:	4a06      	ldr	r2, [pc, #24]	@ (8001148 <HAL_InitTick+0x68>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	e000      	b.n	8001138 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	2400000c 	.word	0x2400000c
 8001144:	24000000 	.word	0x24000000
 8001148:	24000008 	.word	0x24000008

0800114c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001150:	4b06      	ldr	r3, [pc, #24]	@ (800116c <HAL_IncTick+0x20>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <HAL_IncTick+0x24>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	4a04      	ldr	r2, [pc, #16]	@ (8001170 <HAL_IncTick+0x24>)
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	2400000c 	.word	0x2400000c
 8001170:	24000218 	.word	0x24000218

08001174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return uwTick;
 8001178:	4b03      	ldr	r3, [pc, #12]	@ (8001188 <HAL_GetTick+0x14>)
 800117a:	681b      	ldr	r3, [r3, #0]
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	24000218 	.word	0x24000218

0800118c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001190:	4b03      	ldr	r3, [pc, #12]	@ (80011a0 <HAL_GetREVID+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	0c1b      	lsrs	r3, r3, #16
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	5c001000 	.word	0x5c001000

080011a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b4:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <__NVIC_SetPriorityGrouping+0x40>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011c0:	4013      	ands	r3, r2
 80011c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <__NVIC_SetPriorityGrouping+0x44>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d2:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <__NVIC_SetPriorityGrouping+0x40>)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	60d3      	str	r3, [r2, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00
 80011e8:	05fa0000 	.word	0x05fa0000

080011ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f0:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <__NVIC_GetPriorityGrouping+0x18>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	0a1b      	lsrs	r3, r3, #8
 80011f6:	f003 0307 	and.w	r3, r3, #7
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001216:	2b00      	cmp	r3, #0
 8001218:	db0b      	blt.n	8001232 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121a:	88fb      	ldrh	r3, [r7, #6]
 800121c:	f003 021f 	and.w	r2, r3, #31
 8001220:	4907      	ldr	r1, [pc, #28]	@ (8001240 <__NVIC_EnableIRQ+0x38>)
 8001222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001226:	095b      	lsrs	r3, r3, #5
 8001228:	2001      	movs	r0, #1
 800122a:	fa00 f202 	lsl.w	r2, r0, r2
 800122e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000e100 	.word	0xe000e100

08001244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001250:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001254:	2b00      	cmp	r3, #0
 8001256:	db0a      	blt.n	800126e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	490c      	ldr	r1, [pc, #48]	@ (8001290 <__NVIC_SetPriority+0x4c>)
 800125e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001262:	0112      	lsls	r2, r2, #4
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	440b      	add	r3, r1
 8001268:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800126c:	e00a      	b.n	8001284 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4908      	ldr	r1, [pc, #32]	@ (8001294 <__NVIC_SetPriority+0x50>)
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	3b04      	subs	r3, #4
 800127c:	0112      	lsls	r2, r2, #4
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	440b      	add	r3, r1
 8001282:	761a      	strb	r2, [r3, #24]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000e100 	.word	0xe000e100
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	@ 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f1c3 0307 	rsb	r3, r3, #7
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	bf28      	it	cs
 80012b6:	2304      	movcs	r3, #4
 80012b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3304      	adds	r3, #4
 80012be:	2b06      	cmp	r3, #6
 80012c0:	d902      	bls.n	80012c8 <NVIC_EncodePriority+0x30>
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3b03      	subs	r3, #3
 80012c6:	e000      	b.n	80012ca <NVIC_EncodePriority+0x32>
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	f04f 32ff 	mov.w	r2, #4294967295
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43da      	mvns	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	401a      	ands	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e0:	f04f 31ff 	mov.w	r1, #4294967295
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ea:	43d9      	mvns	r1, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	4313      	orrs	r3, r2
         );
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3724      	adds	r7, #36	@ 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001310:	d301      	bcc.n	8001316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001312:	2301      	movs	r3, #1
 8001314:	e00f      	b.n	8001336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001316:	4a0a      	ldr	r2, [pc, #40]	@ (8001340 <SysTick_Config+0x40>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131e:	210f      	movs	r1, #15
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	f7ff ff8e 	bl	8001244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001328:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <SysTick_Config+0x40>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132e:	4b04      	ldr	r3, [pc, #16]	@ (8001340 <SysTick_Config+0x40>)
 8001330:	2207      	movs	r2, #7
 8001332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	e000e010 	.word	0xe000e010

08001344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff29 	bl	80011a4 <__NVIC_SetPriorityGrouping>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
 8001366:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001368:	f7ff ff40 	bl	80011ec <__NVIC_GetPriorityGrouping>
 800136c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	68b9      	ldr	r1, [r7, #8]
 8001372:	6978      	ldr	r0, [r7, #20]
 8001374:	f7ff ff90 	bl	8001298 <NVIC_EncodePriority>
 8001378:	4602      	mov	r2, r0
 800137a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff5f 	bl	8001244 <__NVIC_SetPriority>
}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001398:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff33 	bl	8001208 <__NVIC_EnableIRQ>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ffa4 	bl	8001300 <SysTick_Config>
 80013b8:	4603      	mov	r3, r0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80013c8:	f3bf 8f5f 	dmb	sy
}
 80013cc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80013ce:	4b07      	ldr	r3, [pc, #28]	@ (80013ec <HAL_MPU_Disable+0x28>)
 80013d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d2:	4a06      	ldr	r2, [pc, #24]	@ (80013ec <HAL_MPU_Disable+0x28>)
 80013d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013d8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80013da:	4b05      	ldr	r3, [pc, #20]	@ (80013f0 <HAL_MPU_Disable+0x2c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	605a      	str	r2, [r3, #4]
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000ed00 	.word	0xe000ed00
 80013f0:	e000ed90 	.word	0xe000ed90

080013f4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80013fc:	4a0b      	ldr	r2, [pc, #44]	@ (800142c <HAL_MPU_Enable+0x38>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001406:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <HAL_MPU_Enable+0x3c>)
 8001408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800140a:	4a09      	ldr	r2, [pc, #36]	@ (8001430 <HAL_MPU_Enable+0x3c>)
 800140c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001410:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001412:	f3bf 8f4f 	dsb	sy
}
 8001416:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001418:	f3bf 8f6f 	isb	sy
}
 800141c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed90 	.word	0xe000ed90
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	785a      	ldrb	r2, [r3, #1]
 8001440:	4b1b      	ldr	r3, [pc, #108]	@ (80014b0 <HAL_MPU_ConfigRegion+0x7c>)
 8001442:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001444:	4b1a      	ldr	r3, [pc, #104]	@ (80014b0 <HAL_MPU_ConfigRegion+0x7c>)
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	4a19      	ldr	r2, [pc, #100]	@ (80014b0 <HAL_MPU_ConfigRegion+0x7c>)
 800144a:	f023 0301 	bic.w	r3, r3, #1
 800144e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001450:	4a17      	ldr	r2, [pc, #92]	@ (80014b0 <HAL_MPU_ConfigRegion+0x7c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	7b1b      	ldrb	r3, [r3, #12]
 800145c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	7adb      	ldrb	r3, [r3, #11]
 8001462:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001464:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	7a9b      	ldrb	r3, [r3, #10]
 800146a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800146c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	7b5b      	ldrb	r3, [r3, #13]
 8001472:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001474:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7b9b      	ldrb	r3, [r3, #14]
 800147a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800147c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7bdb      	ldrb	r3, [r3, #15]
 8001482:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001484:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	7a5b      	ldrb	r3, [r3, #9]
 800148a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800148c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	7a1b      	ldrb	r3, [r3, #8]
 8001492:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001494:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	7812      	ldrb	r2, [r2, #0]
 800149a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800149c:	4a04      	ldr	r2, [pc, #16]	@ (80014b0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800149e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014a0:	6113      	str	r3, [r2, #16]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed90 	.word	0xe000ed90

080014b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80014bc:	f7ff fe5a 	bl	8001174 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e316      	b.n	8001afa <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a66      	ldr	r2, [pc, #408]	@ (800166c <HAL_DMA_Init+0x1b8>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d04a      	beq.n	800156c <HAL_DMA_Init+0xb8>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a65      	ldr	r2, [pc, #404]	@ (8001670 <HAL_DMA_Init+0x1bc>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d045      	beq.n	800156c <HAL_DMA_Init+0xb8>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a63      	ldr	r2, [pc, #396]	@ (8001674 <HAL_DMA_Init+0x1c0>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d040      	beq.n	800156c <HAL_DMA_Init+0xb8>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a62      	ldr	r2, [pc, #392]	@ (8001678 <HAL_DMA_Init+0x1c4>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d03b      	beq.n	800156c <HAL_DMA_Init+0xb8>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a60      	ldr	r2, [pc, #384]	@ (800167c <HAL_DMA_Init+0x1c8>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d036      	beq.n	800156c <HAL_DMA_Init+0xb8>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a5f      	ldr	r2, [pc, #380]	@ (8001680 <HAL_DMA_Init+0x1cc>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d031      	beq.n	800156c <HAL_DMA_Init+0xb8>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a5d      	ldr	r2, [pc, #372]	@ (8001684 <HAL_DMA_Init+0x1d0>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d02c      	beq.n	800156c <HAL_DMA_Init+0xb8>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a5c      	ldr	r2, [pc, #368]	@ (8001688 <HAL_DMA_Init+0x1d4>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d027      	beq.n	800156c <HAL_DMA_Init+0xb8>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a5a      	ldr	r2, [pc, #360]	@ (800168c <HAL_DMA_Init+0x1d8>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d022      	beq.n	800156c <HAL_DMA_Init+0xb8>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a59      	ldr	r2, [pc, #356]	@ (8001690 <HAL_DMA_Init+0x1dc>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d01d      	beq.n	800156c <HAL_DMA_Init+0xb8>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a57      	ldr	r2, [pc, #348]	@ (8001694 <HAL_DMA_Init+0x1e0>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d018      	beq.n	800156c <HAL_DMA_Init+0xb8>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a56      	ldr	r2, [pc, #344]	@ (8001698 <HAL_DMA_Init+0x1e4>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d013      	beq.n	800156c <HAL_DMA_Init+0xb8>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a54      	ldr	r2, [pc, #336]	@ (800169c <HAL_DMA_Init+0x1e8>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d00e      	beq.n	800156c <HAL_DMA_Init+0xb8>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a53      	ldr	r2, [pc, #332]	@ (80016a0 <HAL_DMA_Init+0x1ec>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d009      	beq.n	800156c <HAL_DMA_Init+0xb8>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a51      	ldr	r2, [pc, #324]	@ (80016a4 <HAL_DMA_Init+0x1f0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d004      	beq.n	800156c <HAL_DMA_Init+0xb8>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a50      	ldr	r2, [pc, #320]	@ (80016a8 <HAL_DMA_Init+0x1f4>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d101      	bne.n	8001570 <HAL_DMA_Init+0xbc>
 800156c:	2301      	movs	r3, #1
 800156e:	e000      	b.n	8001572 <HAL_DMA_Init+0xbe>
 8001570:	2300      	movs	r3, #0
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 813b 	beq.w	80017ee <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2202      	movs	r2, #2
 800157c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a37      	ldr	r2, [pc, #220]	@ (800166c <HAL_DMA_Init+0x1b8>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d04a      	beq.n	8001628 <HAL_DMA_Init+0x174>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a36      	ldr	r2, [pc, #216]	@ (8001670 <HAL_DMA_Init+0x1bc>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d045      	beq.n	8001628 <HAL_DMA_Init+0x174>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a34      	ldr	r2, [pc, #208]	@ (8001674 <HAL_DMA_Init+0x1c0>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d040      	beq.n	8001628 <HAL_DMA_Init+0x174>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a33      	ldr	r2, [pc, #204]	@ (8001678 <HAL_DMA_Init+0x1c4>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d03b      	beq.n	8001628 <HAL_DMA_Init+0x174>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a31      	ldr	r2, [pc, #196]	@ (800167c <HAL_DMA_Init+0x1c8>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d036      	beq.n	8001628 <HAL_DMA_Init+0x174>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a30      	ldr	r2, [pc, #192]	@ (8001680 <HAL_DMA_Init+0x1cc>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d031      	beq.n	8001628 <HAL_DMA_Init+0x174>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a2e      	ldr	r2, [pc, #184]	@ (8001684 <HAL_DMA_Init+0x1d0>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d02c      	beq.n	8001628 <HAL_DMA_Init+0x174>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a2d      	ldr	r2, [pc, #180]	@ (8001688 <HAL_DMA_Init+0x1d4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d027      	beq.n	8001628 <HAL_DMA_Init+0x174>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a2b      	ldr	r2, [pc, #172]	@ (800168c <HAL_DMA_Init+0x1d8>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d022      	beq.n	8001628 <HAL_DMA_Init+0x174>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a2a      	ldr	r2, [pc, #168]	@ (8001690 <HAL_DMA_Init+0x1dc>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d01d      	beq.n	8001628 <HAL_DMA_Init+0x174>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a28      	ldr	r2, [pc, #160]	@ (8001694 <HAL_DMA_Init+0x1e0>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d018      	beq.n	8001628 <HAL_DMA_Init+0x174>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a27      	ldr	r2, [pc, #156]	@ (8001698 <HAL_DMA_Init+0x1e4>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d013      	beq.n	8001628 <HAL_DMA_Init+0x174>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a25      	ldr	r2, [pc, #148]	@ (800169c <HAL_DMA_Init+0x1e8>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d00e      	beq.n	8001628 <HAL_DMA_Init+0x174>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a24      	ldr	r2, [pc, #144]	@ (80016a0 <HAL_DMA_Init+0x1ec>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d009      	beq.n	8001628 <HAL_DMA_Init+0x174>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a22      	ldr	r2, [pc, #136]	@ (80016a4 <HAL_DMA_Init+0x1f0>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d004      	beq.n	8001628 <HAL_DMA_Init+0x174>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a21      	ldr	r2, [pc, #132]	@ (80016a8 <HAL_DMA_Init+0x1f4>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d108      	bne.n	800163a <HAL_DMA_Init+0x186>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0201 	bic.w	r2, r2, #1
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	e007      	b.n	800164a <HAL_DMA_Init+0x196>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0201 	bic.w	r2, r2, #1
 8001648:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800164a:	e02f      	b.n	80016ac <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800164c:	f7ff fd92 	bl	8001174 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b05      	cmp	r3, #5
 8001658:	d928      	bls.n	80016ac <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2220      	movs	r2, #32
 800165e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2203      	movs	r2, #3
 8001664:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e246      	b.n	8001afa <HAL_DMA_Init+0x646>
 800166c:	40020010 	.word	0x40020010
 8001670:	40020028 	.word	0x40020028
 8001674:	40020040 	.word	0x40020040
 8001678:	40020058 	.word	0x40020058
 800167c:	40020070 	.word	0x40020070
 8001680:	40020088 	.word	0x40020088
 8001684:	400200a0 	.word	0x400200a0
 8001688:	400200b8 	.word	0x400200b8
 800168c:	40020410 	.word	0x40020410
 8001690:	40020428 	.word	0x40020428
 8001694:	40020440 	.word	0x40020440
 8001698:	40020458 	.word	0x40020458
 800169c:	40020470 	.word	0x40020470
 80016a0:	40020488 	.word	0x40020488
 80016a4:	400204a0 	.word	0x400204a0
 80016a8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1c8      	bne.n	800164c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	4b83      	ldr	r3, [pc, #524]	@ (80018d4 <HAL_DMA_Init+0x420>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80016d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016de:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ea:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d107      	bne.n	8001710 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001708:	4313      	orrs	r3, r2
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	4313      	orrs	r3, r2
 800170e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001710:	4b71      	ldr	r3, [pc, #452]	@ (80018d8 <HAL_DMA_Init+0x424>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b71      	ldr	r3, [pc, #452]	@ (80018dc <HAL_DMA_Init+0x428>)
 8001716:	4013      	ands	r3, r2
 8001718:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800171c:	d328      	bcc.n	8001770 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b28      	cmp	r3, #40	@ 0x28
 8001724:	d903      	bls.n	800172e <HAL_DMA_Init+0x27a>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b2e      	cmp	r3, #46	@ 0x2e
 800172c:	d917      	bls.n	800175e <HAL_DMA_Init+0x2aa>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b3e      	cmp	r3, #62	@ 0x3e
 8001734:	d903      	bls.n	800173e <HAL_DMA_Init+0x28a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b42      	cmp	r3, #66	@ 0x42
 800173c:	d90f      	bls.n	800175e <HAL_DMA_Init+0x2aa>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b46      	cmp	r3, #70	@ 0x46
 8001744:	d903      	bls.n	800174e <HAL_DMA_Init+0x29a>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b48      	cmp	r3, #72	@ 0x48
 800174c:	d907      	bls.n	800175e <HAL_DMA_Init+0x2aa>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b4e      	cmp	r3, #78	@ 0x4e
 8001754:	d905      	bls.n	8001762 <HAL_DMA_Init+0x2ae>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b52      	cmp	r3, #82	@ 0x52
 800175c:	d801      	bhi.n	8001762 <HAL_DMA_Init+0x2ae>
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_DMA_Init+0x2b0>
 8001762:	2300      	movs	r3, #0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800176e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f023 0307 	bic.w	r3, r3, #7
 8001786:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	4313      	orrs	r3, r2
 8001790:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001796:	2b04      	cmp	r3, #4
 8001798:	d117      	bne.n	80017ca <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00e      	beq.n	80017ca <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f001 ff1d 	bl	80035ec <DMA_CheckFifoParam>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2240      	movs	r2, #64	@ 0x40
 80017bc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e197      	b.n	8001afa <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f001 fe58 	bl	8003488 <DMA_CalcBaseAndBitshift>
 80017d8:	4603      	mov	r3, r0
 80017da:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017e0:	f003 031f 	and.w	r3, r3, #31
 80017e4:	223f      	movs	r2, #63	@ 0x3f
 80017e6:	409a      	lsls	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	e0cd      	b.n	800198a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a3b      	ldr	r2, [pc, #236]	@ (80018e0 <HAL_DMA_Init+0x42c>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d022      	beq.n	800183e <HAL_DMA_Init+0x38a>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a39      	ldr	r2, [pc, #228]	@ (80018e4 <HAL_DMA_Init+0x430>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d01d      	beq.n	800183e <HAL_DMA_Init+0x38a>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a38      	ldr	r2, [pc, #224]	@ (80018e8 <HAL_DMA_Init+0x434>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d018      	beq.n	800183e <HAL_DMA_Init+0x38a>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a36      	ldr	r2, [pc, #216]	@ (80018ec <HAL_DMA_Init+0x438>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d013      	beq.n	800183e <HAL_DMA_Init+0x38a>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a35      	ldr	r2, [pc, #212]	@ (80018f0 <HAL_DMA_Init+0x43c>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d00e      	beq.n	800183e <HAL_DMA_Init+0x38a>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a33      	ldr	r2, [pc, #204]	@ (80018f4 <HAL_DMA_Init+0x440>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d009      	beq.n	800183e <HAL_DMA_Init+0x38a>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a32      	ldr	r2, [pc, #200]	@ (80018f8 <HAL_DMA_Init+0x444>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d004      	beq.n	800183e <HAL_DMA_Init+0x38a>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a30      	ldr	r2, [pc, #192]	@ (80018fc <HAL_DMA_Init+0x448>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d101      	bne.n	8001842 <HAL_DMA_Init+0x38e>
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <HAL_DMA_Init+0x390>
 8001842:	2300      	movs	r3, #0
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 8097 	beq.w	8001978 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a24      	ldr	r2, [pc, #144]	@ (80018e0 <HAL_DMA_Init+0x42c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d021      	beq.n	8001898 <HAL_DMA_Init+0x3e4>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a22      	ldr	r2, [pc, #136]	@ (80018e4 <HAL_DMA_Init+0x430>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d01c      	beq.n	8001898 <HAL_DMA_Init+0x3e4>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a21      	ldr	r2, [pc, #132]	@ (80018e8 <HAL_DMA_Init+0x434>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d017      	beq.n	8001898 <HAL_DMA_Init+0x3e4>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a1f      	ldr	r2, [pc, #124]	@ (80018ec <HAL_DMA_Init+0x438>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d012      	beq.n	8001898 <HAL_DMA_Init+0x3e4>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a1e      	ldr	r2, [pc, #120]	@ (80018f0 <HAL_DMA_Init+0x43c>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d00d      	beq.n	8001898 <HAL_DMA_Init+0x3e4>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a1c      	ldr	r2, [pc, #112]	@ (80018f4 <HAL_DMA_Init+0x440>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d008      	beq.n	8001898 <HAL_DMA_Init+0x3e4>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a1b      	ldr	r2, [pc, #108]	@ (80018f8 <HAL_DMA_Init+0x444>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d003      	beq.n	8001898 <HAL_DMA_Init+0x3e4>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a19      	ldr	r2, [pc, #100]	@ (80018fc <HAL_DMA_Init+0x448>)
 8001896:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2202      	movs	r2, #2
 800189c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <HAL_DMA_Init+0x44c>)
 80018b4:	4013      	ands	r3, r2
 80018b6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	2b40      	cmp	r3, #64	@ 0x40
 80018be:	d021      	beq.n	8001904 <HAL_DMA_Init+0x450>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b80      	cmp	r3, #128	@ 0x80
 80018c6:	d102      	bne.n	80018ce <HAL_DMA_Init+0x41a>
 80018c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018cc:	e01b      	b.n	8001906 <HAL_DMA_Init+0x452>
 80018ce:	2300      	movs	r3, #0
 80018d0:	e019      	b.n	8001906 <HAL_DMA_Init+0x452>
 80018d2:	bf00      	nop
 80018d4:	fe10803f 	.word	0xfe10803f
 80018d8:	5c001000 	.word	0x5c001000
 80018dc:	ffff0000 	.word	0xffff0000
 80018e0:	58025408 	.word	0x58025408
 80018e4:	5802541c 	.word	0x5802541c
 80018e8:	58025430 	.word	0x58025430
 80018ec:	58025444 	.word	0x58025444
 80018f0:	58025458 	.word	0x58025458
 80018f4:	5802546c 	.word	0x5802546c
 80018f8:	58025480 	.word	0x58025480
 80018fc:	58025494 	.word	0x58025494
 8001900:	fffe000f 	.word	0xfffe000f
 8001904:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	68d2      	ldr	r2, [r2, #12]
 800190a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800190c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001914:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800191c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001924:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800192c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001934:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	4313      	orrs	r3, r2
 800193a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4b6e      	ldr	r3, [pc, #440]	@ (8001b04 <HAL_DMA_Init+0x650>)
 800194c:	4413      	add	r3, r2
 800194e:	4a6e      	ldr	r2, [pc, #440]	@ (8001b08 <HAL_DMA_Init+0x654>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	091b      	lsrs	r3, r3, #4
 8001956:	009a      	lsls	r2, r3, #2
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f001 fd93 	bl	8003488 <DMA_CalcBaseAndBitshift>
 8001962:	4603      	mov	r3, r0
 8001964:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	2201      	movs	r2, #1
 8001970:	409a      	lsls	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	e008      	b.n	800198a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2240      	movs	r2, #64	@ 0x40
 800197c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2203      	movs	r2, #3
 8001982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e0b7      	b.n	8001afa <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a5f      	ldr	r2, [pc, #380]	@ (8001b0c <HAL_DMA_Init+0x658>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d072      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a5d      	ldr	r2, [pc, #372]	@ (8001b10 <HAL_DMA_Init+0x65c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d06d      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a5c      	ldr	r2, [pc, #368]	@ (8001b14 <HAL_DMA_Init+0x660>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d068      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a5a      	ldr	r2, [pc, #360]	@ (8001b18 <HAL_DMA_Init+0x664>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d063      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a59      	ldr	r2, [pc, #356]	@ (8001b1c <HAL_DMA_Init+0x668>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d05e      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a57      	ldr	r2, [pc, #348]	@ (8001b20 <HAL_DMA_Init+0x66c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d059      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a56      	ldr	r2, [pc, #344]	@ (8001b24 <HAL_DMA_Init+0x670>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d054      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a54      	ldr	r2, [pc, #336]	@ (8001b28 <HAL_DMA_Init+0x674>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d04f      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a53      	ldr	r2, [pc, #332]	@ (8001b2c <HAL_DMA_Init+0x678>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d04a      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a51      	ldr	r2, [pc, #324]	@ (8001b30 <HAL_DMA_Init+0x67c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d045      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a50      	ldr	r2, [pc, #320]	@ (8001b34 <HAL_DMA_Init+0x680>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d040      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001b38 <HAL_DMA_Init+0x684>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d03b      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a4d      	ldr	r2, [pc, #308]	@ (8001b3c <HAL_DMA_Init+0x688>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d036      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a4b      	ldr	r2, [pc, #300]	@ (8001b40 <HAL_DMA_Init+0x68c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d031      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a4a      	ldr	r2, [pc, #296]	@ (8001b44 <HAL_DMA_Init+0x690>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d02c      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a48      	ldr	r2, [pc, #288]	@ (8001b48 <HAL_DMA_Init+0x694>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d027      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a47      	ldr	r2, [pc, #284]	@ (8001b4c <HAL_DMA_Init+0x698>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d022      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a45      	ldr	r2, [pc, #276]	@ (8001b50 <HAL_DMA_Init+0x69c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d01d      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a44      	ldr	r2, [pc, #272]	@ (8001b54 <HAL_DMA_Init+0x6a0>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d018      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a42      	ldr	r2, [pc, #264]	@ (8001b58 <HAL_DMA_Init+0x6a4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a41      	ldr	r2, [pc, #260]	@ (8001b5c <HAL_DMA_Init+0x6a8>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d00e      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a3f      	ldr	r2, [pc, #252]	@ (8001b60 <HAL_DMA_Init+0x6ac>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d009      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a3e      	ldr	r2, [pc, #248]	@ (8001b64 <HAL_DMA_Init+0x6b0>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d004      	beq.n	8001a7a <HAL_DMA_Init+0x5c6>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a3c      	ldr	r2, [pc, #240]	@ (8001b68 <HAL_DMA_Init+0x6b4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d101      	bne.n	8001a7e <HAL_DMA_Init+0x5ca>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <HAL_DMA_Init+0x5cc>
 8001a7e:	2300      	movs	r3, #0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d032      	beq.n	8001aea <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f001 fe2d 	bl	80036e4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	2b80      	cmp	r3, #128	@ 0x80
 8001a90:	d102      	bne.n	8001a98 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001aac:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d010      	beq.n	8001ad8 <HAL_DMA_Init+0x624>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d80c      	bhi.n	8001ad8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f001 feaa 	bl	8003818 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	e008      	b.n	8001aea <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	a7fdabf8 	.word	0xa7fdabf8
 8001b08:	cccccccd 	.word	0xcccccccd
 8001b0c:	40020010 	.word	0x40020010
 8001b10:	40020028 	.word	0x40020028
 8001b14:	40020040 	.word	0x40020040
 8001b18:	40020058 	.word	0x40020058
 8001b1c:	40020070 	.word	0x40020070
 8001b20:	40020088 	.word	0x40020088
 8001b24:	400200a0 	.word	0x400200a0
 8001b28:	400200b8 	.word	0x400200b8
 8001b2c:	40020410 	.word	0x40020410
 8001b30:	40020428 	.word	0x40020428
 8001b34:	40020440 	.word	0x40020440
 8001b38:	40020458 	.word	0x40020458
 8001b3c:	40020470 	.word	0x40020470
 8001b40:	40020488 	.word	0x40020488
 8001b44:	400204a0 	.word	0x400204a0
 8001b48:	400204b8 	.word	0x400204b8
 8001b4c:	58025408 	.word	0x58025408
 8001b50:	5802541c 	.word	0x5802541c
 8001b54:	58025430 	.word	0x58025430
 8001b58:	58025444 	.word	0x58025444
 8001b5c:	58025458 	.word	0x58025458
 8001b60:	5802546c 	.word	0x5802546c
 8001b64:	58025480 	.word	0x58025480
 8001b68:	58025494 	.word	0x58025494

08001b6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001b74:	f7ff fafe 	bl	8001174 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e2dc      	b.n	800213e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d008      	beq.n	8001ba2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2280      	movs	r2, #128	@ 0x80
 8001b94:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e2cd      	b.n	800213e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a76      	ldr	r2, [pc, #472]	@ (8001d80 <HAL_DMA_Abort+0x214>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d04a      	beq.n	8001c42 <HAL_DMA_Abort+0xd6>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a74      	ldr	r2, [pc, #464]	@ (8001d84 <HAL_DMA_Abort+0x218>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d045      	beq.n	8001c42 <HAL_DMA_Abort+0xd6>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a73      	ldr	r2, [pc, #460]	@ (8001d88 <HAL_DMA_Abort+0x21c>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d040      	beq.n	8001c42 <HAL_DMA_Abort+0xd6>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a71      	ldr	r2, [pc, #452]	@ (8001d8c <HAL_DMA_Abort+0x220>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d03b      	beq.n	8001c42 <HAL_DMA_Abort+0xd6>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a70      	ldr	r2, [pc, #448]	@ (8001d90 <HAL_DMA_Abort+0x224>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d036      	beq.n	8001c42 <HAL_DMA_Abort+0xd6>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a6e      	ldr	r2, [pc, #440]	@ (8001d94 <HAL_DMA_Abort+0x228>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d031      	beq.n	8001c42 <HAL_DMA_Abort+0xd6>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a6d      	ldr	r2, [pc, #436]	@ (8001d98 <HAL_DMA_Abort+0x22c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d02c      	beq.n	8001c42 <HAL_DMA_Abort+0xd6>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a6b      	ldr	r2, [pc, #428]	@ (8001d9c <HAL_DMA_Abort+0x230>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d027      	beq.n	8001c42 <HAL_DMA_Abort+0xd6>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a6a      	ldr	r2, [pc, #424]	@ (8001da0 <HAL_DMA_Abort+0x234>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d022      	beq.n	8001c42 <HAL_DMA_Abort+0xd6>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a68      	ldr	r2, [pc, #416]	@ (8001da4 <HAL_DMA_Abort+0x238>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d01d      	beq.n	8001c42 <HAL_DMA_Abort+0xd6>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a67      	ldr	r2, [pc, #412]	@ (8001da8 <HAL_DMA_Abort+0x23c>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d018      	beq.n	8001c42 <HAL_DMA_Abort+0xd6>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a65      	ldr	r2, [pc, #404]	@ (8001dac <HAL_DMA_Abort+0x240>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d013      	beq.n	8001c42 <HAL_DMA_Abort+0xd6>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a64      	ldr	r2, [pc, #400]	@ (8001db0 <HAL_DMA_Abort+0x244>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d00e      	beq.n	8001c42 <HAL_DMA_Abort+0xd6>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a62      	ldr	r2, [pc, #392]	@ (8001db4 <HAL_DMA_Abort+0x248>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d009      	beq.n	8001c42 <HAL_DMA_Abort+0xd6>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a61      	ldr	r2, [pc, #388]	@ (8001db8 <HAL_DMA_Abort+0x24c>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d004      	beq.n	8001c42 <HAL_DMA_Abort+0xd6>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a5f      	ldr	r2, [pc, #380]	@ (8001dbc <HAL_DMA_Abort+0x250>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d101      	bne.n	8001c46 <HAL_DMA_Abort+0xda>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <HAL_DMA_Abort+0xdc>
 8001c46:	2300      	movs	r3, #0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d013      	beq.n	8001c74 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 021e 	bic.w	r2, r2, #30
 8001c5a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	695a      	ldr	r2, [r3, #20]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c6a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	e00a      	b.n	8001c8a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 020e 	bic.w	r2, r2, #14
 8001c82:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a3c      	ldr	r2, [pc, #240]	@ (8001d80 <HAL_DMA_Abort+0x214>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d072      	beq.n	8001d7a <HAL_DMA_Abort+0x20e>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a3a      	ldr	r2, [pc, #232]	@ (8001d84 <HAL_DMA_Abort+0x218>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d06d      	beq.n	8001d7a <HAL_DMA_Abort+0x20e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a39      	ldr	r2, [pc, #228]	@ (8001d88 <HAL_DMA_Abort+0x21c>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d068      	beq.n	8001d7a <HAL_DMA_Abort+0x20e>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a37      	ldr	r2, [pc, #220]	@ (8001d8c <HAL_DMA_Abort+0x220>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d063      	beq.n	8001d7a <HAL_DMA_Abort+0x20e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a36      	ldr	r2, [pc, #216]	@ (8001d90 <HAL_DMA_Abort+0x224>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d05e      	beq.n	8001d7a <HAL_DMA_Abort+0x20e>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a34      	ldr	r2, [pc, #208]	@ (8001d94 <HAL_DMA_Abort+0x228>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d059      	beq.n	8001d7a <HAL_DMA_Abort+0x20e>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a33      	ldr	r2, [pc, #204]	@ (8001d98 <HAL_DMA_Abort+0x22c>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d054      	beq.n	8001d7a <HAL_DMA_Abort+0x20e>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a31      	ldr	r2, [pc, #196]	@ (8001d9c <HAL_DMA_Abort+0x230>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d04f      	beq.n	8001d7a <HAL_DMA_Abort+0x20e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a30      	ldr	r2, [pc, #192]	@ (8001da0 <HAL_DMA_Abort+0x234>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d04a      	beq.n	8001d7a <HAL_DMA_Abort+0x20e>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a2e      	ldr	r2, [pc, #184]	@ (8001da4 <HAL_DMA_Abort+0x238>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d045      	beq.n	8001d7a <HAL_DMA_Abort+0x20e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a2d      	ldr	r2, [pc, #180]	@ (8001da8 <HAL_DMA_Abort+0x23c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d040      	beq.n	8001d7a <HAL_DMA_Abort+0x20e>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a2b      	ldr	r2, [pc, #172]	@ (8001dac <HAL_DMA_Abort+0x240>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d03b      	beq.n	8001d7a <HAL_DMA_Abort+0x20e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a2a      	ldr	r2, [pc, #168]	@ (8001db0 <HAL_DMA_Abort+0x244>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d036      	beq.n	8001d7a <HAL_DMA_Abort+0x20e>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a28      	ldr	r2, [pc, #160]	@ (8001db4 <HAL_DMA_Abort+0x248>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d031      	beq.n	8001d7a <HAL_DMA_Abort+0x20e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a27      	ldr	r2, [pc, #156]	@ (8001db8 <HAL_DMA_Abort+0x24c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d02c      	beq.n	8001d7a <HAL_DMA_Abort+0x20e>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a25      	ldr	r2, [pc, #148]	@ (8001dbc <HAL_DMA_Abort+0x250>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d027      	beq.n	8001d7a <HAL_DMA_Abort+0x20e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a24      	ldr	r2, [pc, #144]	@ (8001dc0 <HAL_DMA_Abort+0x254>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d022      	beq.n	8001d7a <HAL_DMA_Abort+0x20e>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a22      	ldr	r2, [pc, #136]	@ (8001dc4 <HAL_DMA_Abort+0x258>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d01d      	beq.n	8001d7a <HAL_DMA_Abort+0x20e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a21      	ldr	r2, [pc, #132]	@ (8001dc8 <HAL_DMA_Abort+0x25c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d018      	beq.n	8001d7a <HAL_DMA_Abort+0x20e>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1f      	ldr	r2, [pc, #124]	@ (8001dcc <HAL_DMA_Abort+0x260>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d013      	beq.n	8001d7a <HAL_DMA_Abort+0x20e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a1e      	ldr	r2, [pc, #120]	@ (8001dd0 <HAL_DMA_Abort+0x264>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d00e      	beq.n	8001d7a <HAL_DMA_Abort+0x20e>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a1c      	ldr	r2, [pc, #112]	@ (8001dd4 <HAL_DMA_Abort+0x268>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d009      	beq.n	8001d7a <HAL_DMA_Abort+0x20e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd8 <HAL_DMA_Abort+0x26c>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d004      	beq.n	8001d7a <HAL_DMA_Abort+0x20e>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a19      	ldr	r2, [pc, #100]	@ (8001ddc <HAL_DMA_Abort+0x270>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d132      	bne.n	8001de0 <HAL_DMA_Abort+0x274>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e031      	b.n	8001de2 <HAL_DMA_Abort+0x276>
 8001d7e:	bf00      	nop
 8001d80:	40020010 	.word	0x40020010
 8001d84:	40020028 	.word	0x40020028
 8001d88:	40020040 	.word	0x40020040
 8001d8c:	40020058 	.word	0x40020058
 8001d90:	40020070 	.word	0x40020070
 8001d94:	40020088 	.word	0x40020088
 8001d98:	400200a0 	.word	0x400200a0
 8001d9c:	400200b8 	.word	0x400200b8
 8001da0:	40020410 	.word	0x40020410
 8001da4:	40020428 	.word	0x40020428
 8001da8:	40020440 	.word	0x40020440
 8001dac:	40020458 	.word	0x40020458
 8001db0:	40020470 	.word	0x40020470
 8001db4:	40020488 	.word	0x40020488
 8001db8:	400204a0 	.word	0x400204a0
 8001dbc:	400204b8 	.word	0x400204b8
 8001dc0:	58025408 	.word	0x58025408
 8001dc4:	5802541c 	.word	0x5802541c
 8001dc8:	58025430 	.word	0x58025430
 8001dcc:	58025444 	.word	0x58025444
 8001dd0:	58025458 	.word	0x58025458
 8001dd4:	5802546c 	.word	0x5802546c
 8001dd8:	58025480 	.word	0x58025480
 8001ddc:	58025494 	.word	0x58025494
 8001de0:	2300      	movs	r3, #0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d007      	beq.n	8001df6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001df0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001df4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a6d      	ldr	r2, [pc, #436]	@ (8001fb0 <HAL_DMA_Abort+0x444>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d04a      	beq.n	8001e96 <HAL_DMA_Abort+0x32a>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a6b      	ldr	r2, [pc, #428]	@ (8001fb4 <HAL_DMA_Abort+0x448>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d045      	beq.n	8001e96 <HAL_DMA_Abort+0x32a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a6a      	ldr	r2, [pc, #424]	@ (8001fb8 <HAL_DMA_Abort+0x44c>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d040      	beq.n	8001e96 <HAL_DMA_Abort+0x32a>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a68      	ldr	r2, [pc, #416]	@ (8001fbc <HAL_DMA_Abort+0x450>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d03b      	beq.n	8001e96 <HAL_DMA_Abort+0x32a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a67      	ldr	r2, [pc, #412]	@ (8001fc0 <HAL_DMA_Abort+0x454>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d036      	beq.n	8001e96 <HAL_DMA_Abort+0x32a>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a65      	ldr	r2, [pc, #404]	@ (8001fc4 <HAL_DMA_Abort+0x458>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d031      	beq.n	8001e96 <HAL_DMA_Abort+0x32a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a64      	ldr	r2, [pc, #400]	@ (8001fc8 <HAL_DMA_Abort+0x45c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d02c      	beq.n	8001e96 <HAL_DMA_Abort+0x32a>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a62      	ldr	r2, [pc, #392]	@ (8001fcc <HAL_DMA_Abort+0x460>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d027      	beq.n	8001e96 <HAL_DMA_Abort+0x32a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a61      	ldr	r2, [pc, #388]	@ (8001fd0 <HAL_DMA_Abort+0x464>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d022      	beq.n	8001e96 <HAL_DMA_Abort+0x32a>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a5f      	ldr	r2, [pc, #380]	@ (8001fd4 <HAL_DMA_Abort+0x468>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d01d      	beq.n	8001e96 <HAL_DMA_Abort+0x32a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a5e      	ldr	r2, [pc, #376]	@ (8001fd8 <HAL_DMA_Abort+0x46c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d018      	beq.n	8001e96 <HAL_DMA_Abort+0x32a>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a5c      	ldr	r2, [pc, #368]	@ (8001fdc <HAL_DMA_Abort+0x470>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d013      	beq.n	8001e96 <HAL_DMA_Abort+0x32a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a5b      	ldr	r2, [pc, #364]	@ (8001fe0 <HAL_DMA_Abort+0x474>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d00e      	beq.n	8001e96 <HAL_DMA_Abort+0x32a>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a59      	ldr	r2, [pc, #356]	@ (8001fe4 <HAL_DMA_Abort+0x478>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d009      	beq.n	8001e96 <HAL_DMA_Abort+0x32a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a58      	ldr	r2, [pc, #352]	@ (8001fe8 <HAL_DMA_Abort+0x47c>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d004      	beq.n	8001e96 <HAL_DMA_Abort+0x32a>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a56      	ldr	r2, [pc, #344]	@ (8001fec <HAL_DMA_Abort+0x480>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d108      	bne.n	8001ea8 <HAL_DMA_Abort+0x33c>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0201 	bic.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	e007      	b.n	8001eb8 <HAL_DMA_Abort+0x34c>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0201 	bic.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001eb8:	e013      	b.n	8001ee2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eba:	f7ff f95b 	bl	8001174 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b05      	cmp	r3, #5
 8001ec6:	d90c      	bls.n	8001ee2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e12d      	b.n	800213e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1e5      	bne.n	8001eba <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a2f      	ldr	r2, [pc, #188]	@ (8001fb0 <HAL_DMA_Abort+0x444>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d04a      	beq.n	8001f8e <HAL_DMA_Abort+0x422>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a2d      	ldr	r2, [pc, #180]	@ (8001fb4 <HAL_DMA_Abort+0x448>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d045      	beq.n	8001f8e <HAL_DMA_Abort+0x422>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a2c      	ldr	r2, [pc, #176]	@ (8001fb8 <HAL_DMA_Abort+0x44c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d040      	beq.n	8001f8e <HAL_DMA_Abort+0x422>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a2a      	ldr	r2, [pc, #168]	@ (8001fbc <HAL_DMA_Abort+0x450>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d03b      	beq.n	8001f8e <HAL_DMA_Abort+0x422>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a29      	ldr	r2, [pc, #164]	@ (8001fc0 <HAL_DMA_Abort+0x454>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d036      	beq.n	8001f8e <HAL_DMA_Abort+0x422>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a27      	ldr	r2, [pc, #156]	@ (8001fc4 <HAL_DMA_Abort+0x458>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d031      	beq.n	8001f8e <HAL_DMA_Abort+0x422>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a26      	ldr	r2, [pc, #152]	@ (8001fc8 <HAL_DMA_Abort+0x45c>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d02c      	beq.n	8001f8e <HAL_DMA_Abort+0x422>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a24      	ldr	r2, [pc, #144]	@ (8001fcc <HAL_DMA_Abort+0x460>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d027      	beq.n	8001f8e <HAL_DMA_Abort+0x422>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a23      	ldr	r2, [pc, #140]	@ (8001fd0 <HAL_DMA_Abort+0x464>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d022      	beq.n	8001f8e <HAL_DMA_Abort+0x422>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a21      	ldr	r2, [pc, #132]	@ (8001fd4 <HAL_DMA_Abort+0x468>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d01d      	beq.n	8001f8e <HAL_DMA_Abort+0x422>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a20      	ldr	r2, [pc, #128]	@ (8001fd8 <HAL_DMA_Abort+0x46c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d018      	beq.n	8001f8e <HAL_DMA_Abort+0x422>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a1e      	ldr	r2, [pc, #120]	@ (8001fdc <HAL_DMA_Abort+0x470>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d013      	beq.n	8001f8e <HAL_DMA_Abort+0x422>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe0 <HAL_DMA_Abort+0x474>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d00e      	beq.n	8001f8e <HAL_DMA_Abort+0x422>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe4 <HAL_DMA_Abort+0x478>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d009      	beq.n	8001f8e <HAL_DMA_Abort+0x422>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a1a      	ldr	r2, [pc, #104]	@ (8001fe8 <HAL_DMA_Abort+0x47c>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d004      	beq.n	8001f8e <HAL_DMA_Abort+0x422>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a18      	ldr	r2, [pc, #96]	@ (8001fec <HAL_DMA_Abort+0x480>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d101      	bne.n	8001f92 <HAL_DMA_Abort+0x426>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <HAL_DMA_Abort+0x428>
 8001f92:	2300      	movs	r3, #0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d02b      	beq.n	8001ff0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa2:	f003 031f 	and.w	r3, r3, #31
 8001fa6:	223f      	movs	r2, #63	@ 0x3f
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	e02a      	b.n	8002006 <HAL_DMA_Abort+0x49a>
 8001fb0:	40020010 	.word	0x40020010
 8001fb4:	40020028 	.word	0x40020028
 8001fb8:	40020040 	.word	0x40020040
 8001fbc:	40020058 	.word	0x40020058
 8001fc0:	40020070 	.word	0x40020070
 8001fc4:	40020088 	.word	0x40020088
 8001fc8:	400200a0 	.word	0x400200a0
 8001fcc:	400200b8 	.word	0x400200b8
 8001fd0:	40020410 	.word	0x40020410
 8001fd4:	40020428 	.word	0x40020428
 8001fd8:	40020440 	.word	0x40020440
 8001fdc:	40020458 	.word	0x40020458
 8001fe0:	40020470 	.word	0x40020470
 8001fe4:	40020488 	.word	0x40020488
 8001fe8:	400204a0 	.word	0x400204a0
 8001fec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ffa:	f003 031f 	and.w	r3, r3, #31
 8001ffe:	2201      	movs	r2, #1
 8002000:	409a      	lsls	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a4f      	ldr	r2, [pc, #316]	@ (8002148 <HAL_DMA_Abort+0x5dc>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d072      	beq.n	80020f6 <HAL_DMA_Abort+0x58a>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a4d      	ldr	r2, [pc, #308]	@ (800214c <HAL_DMA_Abort+0x5e0>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d06d      	beq.n	80020f6 <HAL_DMA_Abort+0x58a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a4c      	ldr	r2, [pc, #304]	@ (8002150 <HAL_DMA_Abort+0x5e4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d068      	beq.n	80020f6 <HAL_DMA_Abort+0x58a>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a4a      	ldr	r2, [pc, #296]	@ (8002154 <HAL_DMA_Abort+0x5e8>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d063      	beq.n	80020f6 <HAL_DMA_Abort+0x58a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a49      	ldr	r2, [pc, #292]	@ (8002158 <HAL_DMA_Abort+0x5ec>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d05e      	beq.n	80020f6 <HAL_DMA_Abort+0x58a>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a47      	ldr	r2, [pc, #284]	@ (800215c <HAL_DMA_Abort+0x5f0>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d059      	beq.n	80020f6 <HAL_DMA_Abort+0x58a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a46      	ldr	r2, [pc, #280]	@ (8002160 <HAL_DMA_Abort+0x5f4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d054      	beq.n	80020f6 <HAL_DMA_Abort+0x58a>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a44      	ldr	r2, [pc, #272]	@ (8002164 <HAL_DMA_Abort+0x5f8>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d04f      	beq.n	80020f6 <HAL_DMA_Abort+0x58a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a43      	ldr	r2, [pc, #268]	@ (8002168 <HAL_DMA_Abort+0x5fc>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d04a      	beq.n	80020f6 <HAL_DMA_Abort+0x58a>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a41      	ldr	r2, [pc, #260]	@ (800216c <HAL_DMA_Abort+0x600>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d045      	beq.n	80020f6 <HAL_DMA_Abort+0x58a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a40      	ldr	r2, [pc, #256]	@ (8002170 <HAL_DMA_Abort+0x604>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d040      	beq.n	80020f6 <HAL_DMA_Abort+0x58a>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a3e      	ldr	r2, [pc, #248]	@ (8002174 <HAL_DMA_Abort+0x608>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d03b      	beq.n	80020f6 <HAL_DMA_Abort+0x58a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a3d      	ldr	r2, [pc, #244]	@ (8002178 <HAL_DMA_Abort+0x60c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d036      	beq.n	80020f6 <HAL_DMA_Abort+0x58a>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a3b      	ldr	r2, [pc, #236]	@ (800217c <HAL_DMA_Abort+0x610>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d031      	beq.n	80020f6 <HAL_DMA_Abort+0x58a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a3a      	ldr	r2, [pc, #232]	@ (8002180 <HAL_DMA_Abort+0x614>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d02c      	beq.n	80020f6 <HAL_DMA_Abort+0x58a>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a38      	ldr	r2, [pc, #224]	@ (8002184 <HAL_DMA_Abort+0x618>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d027      	beq.n	80020f6 <HAL_DMA_Abort+0x58a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a37      	ldr	r2, [pc, #220]	@ (8002188 <HAL_DMA_Abort+0x61c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d022      	beq.n	80020f6 <HAL_DMA_Abort+0x58a>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a35      	ldr	r2, [pc, #212]	@ (800218c <HAL_DMA_Abort+0x620>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01d      	beq.n	80020f6 <HAL_DMA_Abort+0x58a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a34      	ldr	r2, [pc, #208]	@ (8002190 <HAL_DMA_Abort+0x624>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d018      	beq.n	80020f6 <HAL_DMA_Abort+0x58a>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a32      	ldr	r2, [pc, #200]	@ (8002194 <HAL_DMA_Abort+0x628>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d013      	beq.n	80020f6 <HAL_DMA_Abort+0x58a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a31      	ldr	r2, [pc, #196]	@ (8002198 <HAL_DMA_Abort+0x62c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d00e      	beq.n	80020f6 <HAL_DMA_Abort+0x58a>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a2f      	ldr	r2, [pc, #188]	@ (800219c <HAL_DMA_Abort+0x630>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d009      	beq.n	80020f6 <HAL_DMA_Abort+0x58a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a2e      	ldr	r2, [pc, #184]	@ (80021a0 <HAL_DMA_Abort+0x634>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d004      	beq.n	80020f6 <HAL_DMA_Abort+0x58a>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a2c      	ldr	r2, [pc, #176]	@ (80021a4 <HAL_DMA_Abort+0x638>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d101      	bne.n	80020fa <HAL_DMA_Abort+0x58e>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <HAL_DMA_Abort+0x590>
 80020fa:	2300      	movs	r3, #0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d015      	beq.n	800212c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002108:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00c      	beq.n	800212c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800211c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002120:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800212a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40020010 	.word	0x40020010
 800214c:	40020028 	.word	0x40020028
 8002150:	40020040 	.word	0x40020040
 8002154:	40020058 	.word	0x40020058
 8002158:	40020070 	.word	0x40020070
 800215c:	40020088 	.word	0x40020088
 8002160:	400200a0 	.word	0x400200a0
 8002164:	400200b8 	.word	0x400200b8
 8002168:	40020410 	.word	0x40020410
 800216c:	40020428 	.word	0x40020428
 8002170:	40020440 	.word	0x40020440
 8002174:	40020458 	.word	0x40020458
 8002178:	40020470 	.word	0x40020470
 800217c:	40020488 	.word	0x40020488
 8002180:	400204a0 	.word	0x400204a0
 8002184:	400204b8 	.word	0x400204b8
 8002188:	58025408 	.word	0x58025408
 800218c:	5802541c 	.word	0x5802541c
 8002190:	58025430 	.word	0x58025430
 8002194:	58025444 	.word	0x58025444
 8002198:	58025458 	.word	0x58025458
 800219c:	5802546c 	.word	0x5802546c
 80021a0:	58025480 	.word	0x58025480
 80021a4:	58025494 	.word	0x58025494

080021a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e237      	b.n	800262a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d004      	beq.n	80021d0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2280      	movs	r2, #128	@ 0x80
 80021ca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e22c      	b.n	800262a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a5c      	ldr	r2, [pc, #368]	@ (8002348 <HAL_DMA_Abort_IT+0x1a0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d04a      	beq.n	8002270 <HAL_DMA_Abort_IT+0xc8>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a5b      	ldr	r2, [pc, #364]	@ (800234c <HAL_DMA_Abort_IT+0x1a4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d045      	beq.n	8002270 <HAL_DMA_Abort_IT+0xc8>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a59      	ldr	r2, [pc, #356]	@ (8002350 <HAL_DMA_Abort_IT+0x1a8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d040      	beq.n	8002270 <HAL_DMA_Abort_IT+0xc8>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a58      	ldr	r2, [pc, #352]	@ (8002354 <HAL_DMA_Abort_IT+0x1ac>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d03b      	beq.n	8002270 <HAL_DMA_Abort_IT+0xc8>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a56      	ldr	r2, [pc, #344]	@ (8002358 <HAL_DMA_Abort_IT+0x1b0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d036      	beq.n	8002270 <HAL_DMA_Abort_IT+0xc8>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a55      	ldr	r2, [pc, #340]	@ (800235c <HAL_DMA_Abort_IT+0x1b4>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d031      	beq.n	8002270 <HAL_DMA_Abort_IT+0xc8>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a53      	ldr	r2, [pc, #332]	@ (8002360 <HAL_DMA_Abort_IT+0x1b8>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d02c      	beq.n	8002270 <HAL_DMA_Abort_IT+0xc8>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a52      	ldr	r2, [pc, #328]	@ (8002364 <HAL_DMA_Abort_IT+0x1bc>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d027      	beq.n	8002270 <HAL_DMA_Abort_IT+0xc8>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a50      	ldr	r2, [pc, #320]	@ (8002368 <HAL_DMA_Abort_IT+0x1c0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d022      	beq.n	8002270 <HAL_DMA_Abort_IT+0xc8>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a4f      	ldr	r2, [pc, #316]	@ (800236c <HAL_DMA_Abort_IT+0x1c4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d01d      	beq.n	8002270 <HAL_DMA_Abort_IT+0xc8>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a4d      	ldr	r2, [pc, #308]	@ (8002370 <HAL_DMA_Abort_IT+0x1c8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d018      	beq.n	8002270 <HAL_DMA_Abort_IT+0xc8>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a4c      	ldr	r2, [pc, #304]	@ (8002374 <HAL_DMA_Abort_IT+0x1cc>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d013      	beq.n	8002270 <HAL_DMA_Abort_IT+0xc8>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a4a      	ldr	r2, [pc, #296]	@ (8002378 <HAL_DMA_Abort_IT+0x1d0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d00e      	beq.n	8002270 <HAL_DMA_Abort_IT+0xc8>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a49      	ldr	r2, [pc, #292]	@ (800237c <HAL_DMA_Abort_IT+0x1d4>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d009      	beq.n	8002270 <HAL_DMA_Abort_IT+0xc8>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a47      	ldr	r2, [pc, #284]	@ (8002380 <HAL_DMA_Abort_IT+0x1d8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d004      	beq.n	8002270 <HAL_DMA_Abort_IT+0xc8>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a46      	ldr	r2, [pc, #280]	@ (8002384 <HAL_DMA_Abort_IT+0x1dc>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d101      	bne.n	8002274 <HAL_DMA_Abort_IT+0xcc>
 8002270:	2301      	movs	r3, #1
 8002272:	e000      	b.n	8002276 <HAL_DMA_Abort_IT+0xce>
 8002274:	2300      	movs	r3, #0
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 8086 	beq.w	8002388 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2204      	movs	r2, #4
 8002280:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a2f      	ldr	r2, [pc, #188]	@ (8002348 <HAL_DMA_Abort_IT+0x1a0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d04a      	beq.n	8002324 <HAL_DMA_Abort_IT+0x17c>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a2e      	ldr	r2, [pc, #184]	@ (800234c <HAL_DMA_Abort_IT+0x1a4>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d045      	beq.n	8002324 <HAL_DMA_Abort_IT+0x17c>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a2c      	ldr	r2, [pc, #176]	@ (8002350 <HAL_DMA_Abort_IT+0x1a8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d040      	beq.n	8002324 <HAL_DMA_Abort_IT+0x17c>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a2b      	ldr	r2, [pc, #172]	@ (8002354 <HAL_DMA_Abort_IT+0x1ac>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d03b      	beq.n	8002324 <HAL_DMA_Abort_IT+0x17c>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a29      	ldr	r2, [pc, #164]	@ (8002358 <HAL_DMA_Abort_IT+0x1b0>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d036      	beq.n	8002324 <HAL_DMA_Abort_IT+0x17c>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a28      	ldr	r2, [pc, #160]	@ (800235c <HAL_DMA_Abort_IT+0x1b4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d031      	beq.n	8002324 <HAL_DMA_Abort_IT+0x17c>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a26      	ldr	r2, [pc, #152]	@ (8002360 <HAL_DMA_Abort_IT+0x1b8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d02c      	beq.n	8002324 <HAL_DMA_Abort_IT+0x17c>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a25      	ldr	r2, [pc, #148]	@ (8002364 <HAL_DMA_Abort_IT+0x1bc>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d027      	beq.n	8002324 <HAL_DMA_Abort_IT+0x17c>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a23      	ldr	r2, [pc, #140]	@ (8002368 <HAL_DMA_Abort_IT+0x1c0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d022      	beq.n	8002324 <HAL_DMA_Abort_IT+0x17c>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a22      	ldr	r2, [pc, #136]	@ (800236c <HAL_DMA_Abort_IT+0x1c4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d01d      	beq.n	8002324 <HAL_DMA_Abort_IT+0x17c>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a20      	ldr	r2, [pc, #128]	@ (8002370 <HAL_DMA_Abort_IT+0x1c8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d018      	beq.n	8002324 <HAL_DMA_Abort_IT+0x17c>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002374 <HAL_DMA_Abort_IT+0x1cc>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d013      	beq.n	8002324 <HAL_DMA_Abort_IT+0x17c>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a1d      	ldr	r2, [pc, #116]	@ (8002378 <HAL_DMA_Abort_IT+0x1d0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00e      	beq.n	8002324 <HAL_DMA_Abort_IT+0x17c>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a1c      	ldr	r2, [pc, #112]	@ (800237c <HAL_DMA_Abort_IT+0x1d4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d009      	beq.n	8002324 <HAL_DMA_Abort_IT+0x17c>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a1a      	ldr	r2, [pc, #104]	@ (8002380 <HAL_DMA_Abort_IT+0x1d8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d004      	beq.n	8002324 <HAL_DMA_Abort_IT+0x17c>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a19      	ldr	r2, [pc, #100]	@ (8002384 <HAL_DMA_Abort_IT+0x1dc>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d108      	bne.n	8002336 <HAL_DMA_Abort_IT+0x18e>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0201 	bic.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	e178      	b.n	8002628 <HAL_DMA_Abort_IT+0x480>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0201 	bic.w	r2, r2, #1
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	e16f      	b.n	8002628 <HAL_DMA_Abort_IT+0x480>
 8002348:	40020010 	.word	0x40020010
 800234c:	40020028 	.word	0x40020028
 8002350:	40020040 	.word	0x40020040
 8002354:	40020058 	.word	0x40020058
 8002358:	40020070 	.word	0x40020070
 800235c:	40020088 	.word	0x40020088
 8002360:	400200a0 	.word	0x400200a0
 8002364:	400200b8 	.word	0x400200b8
 8002368:	40020410 	.word	0x40020410
 800236c:	40020428 	.word	0x40020428
 8002370:	40020440 	.word	0x40020440
 8002374:	40020458 	.word	0x40020458
 8002378:	40020470 	.word	0x40020470
 800237c:	40020488 	.word	0x40020488
 8002380:	400204a0 	.word	0x400204a0
 8002384:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 020e 	bic.w	r2, r2, #14
 8002396:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a6c      	ldr	r2, [pc, #432]	@ (8002550 <HAL_DMA_Abort_IT+0x3a8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d04a      	beq.n	8002438 <HAL_DMA_Abort_IT+0x290>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a6b      	ldr	r2, [pc, #428]	@ (8002554 <HAL_DMA_Abort_IT+0x3ac>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d045      	beq.n	8002438 <HAL_DMA_Abort_IT+0x290>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a69      	ldr	r2, [pc, #420]	@ (8002558 <HAL_DMA_Abort_IT+0x3b0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d040      	beq.n	8002438 <HAL_DMA_Abort_IT+0x290>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a68      	ldr	r2, [pc, #416]	@ (800255c <HAL_DMA_Abort_IT+0x3b4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d03b      	beq.n	8002438 <HAL_DMA_Abort_IT+0x290>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a66      	ldr	r2, [pc, #408]	@ (8002560 <HAL_DMA_Abort_IT+0x3b8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d036      	beq.n	8002438 <HAL_DMA_Abort_IT+0x290>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a65      	ldr	r2, [pc, #404]	@ (8002564 <HAL_DMA_Abort_IT+0x3bc>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d031      	beq.n	8002438 <HAL_DMA_Abort_IT+0x290>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a63      	ldr	r2, [pc, #396]	@ (8002568 <HAL_DMA_Abort_IT+0x3c0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d02c      	beq.n	8002438 <HAL_DMA_Abort_IT+0x290>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a62      	ldr	r2, [pc, #392]	@ (800256c <HAL_DMA_Abort_IT+0x3c4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d027      	beq.n	8002438 <HAL_DMA_Abort_IT+0x290>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a60      	ldr	r2, [pc, #384]	@ (8002570 <HAL_DMA_Abort_IT+0x3c8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d022      	beq.n	8002438 <HAL_DMA_Abort_IT+0x290>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a5f      	ldr	r2, [pc, #380]	@ (8002574 <HAL_DMA_Abort_IT+0x3cc>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d01d      	beq.n	8002438 <HAL_DMA_Abort_IT+0x290>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a5d      	ldr	r2, [pc, #372]	@ (8002578 <HAL_DMA_Abort_IT+0x3d0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d018      	beq.n	8002438 <HAL_DMA_Abort_IT+0x290>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a5c      	ldr	r2, [pc, #368]	@ (800257c <HAL_DMA_Abort_IT+0x3d4>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d013      	beq.n	8002438 <HAL_DMA_Abort_IT+0x290>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a5a      	ldr	r2, [pc, #360]	@ (8002580 <HAL_DMA_Abort_IT+0x3d8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00e      	beq.n	8002438 <HAL_DMA_Abort_IT+0x290>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a59      	ldr	r2, [pc, #356]	@ (8002584 <HAL_DMA_Abort_IT+0x3dc>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d009      	beq.n	8002438 <HAL_DMA_Abort_IT+0x290>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a57      	ldr	r2, [pc, #348]	@ (8002588 <HAL_DMA_Abort_IT+0x3e0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d004      	beq.n	8002438 <HAL_DMA_Abort_IT+0x290>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a56      	ldr	r2, [pc, #344]	@ (800258c <HAL_DMA_Abort_IT+0x3e4>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d108      	bne.n	800244a <HAL_DMA_Abort_IT+0x2a2>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0201 	bic.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	e007      	b.n	800245a <HAL_DMA_Abort_IT+0x2b2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0201 	bic.w	r2, r2, #1
 8002458:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a3c      	ldr	r2, [pc, #240]	@ (8002550 <HAL_DMA_Abort_IT+0x3a8>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d072      	beq.n	800254a <HAL_DMA_Abort_IT+0x3a2>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a3a      	ldr	r2, [pc, #232]	@ (8002554 <HAL_DMA_Abort_IT+0x3ac>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d06d      	beq.n	800254a <HAL_DMA_Abort_IT+0x3a2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a39      	ldr	r2, [pc, #228]	@ (8002558 <HAL_DMA_Abort_IT+0x3b0>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d068      	beq.n	800254a <HAL_DMA_Abort_IT+0x3a2>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a37      	ldr	r2, [pc, #220]	@ (800255c <HAL_DMA_Abort_IT+0x3b4>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d063      	beq.n	800254a <HAL_DMA_Abort_IT+0x3a2>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a36      	ldr	r2, [pc, #216]	@ (8002560 <HAL_DMA_Abort_IT+0x3b8>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d05e      	beq.n	800254a <HAL_DMA_Abort_IT+0x3a2>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a34      	ldr	r2, [pc, #208]	@ (8002564 <HAL_DMA_Abort_IT+0x3bc>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d059      	beq.n	800254a <HAL_DMA_Abort_IT+0x3a2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a33      	ldr	r2, [pc, #204]	@ (8002568 <HAL_DMA_Abort_IT+0x3c0>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d054      	beq.n	800254a <HAL_DMA_Abort_IT+0x3a2>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a31      	ldr	r2, [pc, #196]	@ (800256c <HAL_DMA_Abort_IT+0x3c4>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d04f      	beq.n	800254a <HAL_DMA_Abort_IT+0x3a2>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a30      	ldr	r2, [pc, #192]	@ (8002570 <HAL_DMA_Abort_IT+0x3c8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d04a      	beq.n	800254a <HAL_DMA_Abort_IT+0x3a2>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a2e      	ldr	r2, [pc, #184]	@ (8002574 <HAL_DMA_Abort_IT+0x3cc>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d045      	beq.n	800254a <HAL_DMA_Abort_IT+0x3a2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002578 <HAL_DMA_Abort_IT+0x3d0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d040      	beq.n	800254a <HAL_DMA_Abort_IT+0x3a2>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a2b      	ldr	r2, [pc, #172]	@ (800257c <HAL_DMA_Abort_IT+0x3d4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d03b      	beq.n	800254a <HAL_DMA_Abort_IT+0x3a2>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002580 <HAL_DMA_Abort_IT+0x3d8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d036      	beq.n	800254a <HAL_DMA_Abort_IT+0x3a2>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a28      	ldr	r2, [pc, #160]	@ (8002584 <HAL_DMA_Abort_IT+0x3dc>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d031      	beq.n	800254a <HAL_DMA_Abort_IT+0x3a2>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a27      	ldr	r2, [pc, #156]	@ (8002588 <HAL_DMA_Abort_IT+0x3e0>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d02c      	beq.n	800254a <HAL_DMA_Abort_IT+0x3a2>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a25      	ldr	r2, [pc, #148]	@ (800258c <HAL_DMA_Abort_IT+0x3e4>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d027      	beq.n	800254a <HAL_DMA_Abort_IT+0x3a2>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a24      	ldr	r2, [pc, #144]	@ (8002590 <HAL_DMA_Abort_IT+0x3e8>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d022      	beq.n	800254a <HAL_DMA_Abort_IT+0x3a2>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a22      	ldr	r2, [pc, #136]	@ (8002594 <HAL_DMA_Abort_IT+0x3ec>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d01d      	beq.n	800254a <HAL_DMA_Abort_IT+0x3a2>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a21      	ldr	r2, [pc, #132]	@ (8002598 <HAL_DMA_Abort_IT+0x3f0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d018      	beq.n	800254a <HAL_DMA_Abort_IT+0x3a2>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a1f      	ldr	r2, [pc, #124]	@ (800259c <HAL_DMA_Abort_IT+0x3f4>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d013      	beq.n	800254a <HAL_DMA_Abort_IT+0x3a2>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a1e      	ldr	r2, [pc, #120]	@ (80025a0 <HAL_DMA_Abort_IT+0x3f8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d00e      	beq.n	800254a <HAL_DMA_Abort_IT+0x3a2>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a1c      	ldr	r2, [pc, #112]	@ (80025a4 <HAL_DMA_Abort_IT+0x3fc>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d009      	beq.n	800254a <HAL_DMA_Abort_IT+0x3a2>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a1b      	ldr	r2, [pc, #108]	@ (80025a8 <HAL_DMA_Abort_IT+0x400>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d004      	beq.n	800254a <HAL_DMA_Abort_IT+0x3a2>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a19      	ldr	r2, [pc, #100]	@ (80025ac <HAL_DMA_Abort_IT+0x404>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d132      	bne.n	80025b0 <HAL_DMA_Abort_IT+0x408>
 800254a:	2301      	movs	r3, #1
 800254c:	e031      	b.n	80025b2 <HAL_DMA_Abort_IT+0x40a>
 800254e:	bf00      	nop
 8002550:	40020010 	.word	0x40020010
 8002554:	40020028 	.word	0x40020028
 8002558:	40020040 	.word	0x40020040
 800255c:	40020058 	.word	0x40020058
 8002560:	40020070 	.word	0x40020070
 8002564:	40020088 	.word	0x40020088
 8002568:	400200a0 	.word	0x400200a0
 800256c:	400200b8 	.word	0x400200b8
 8002570:	40020410 	.word	0x40020410
 8002574:	40020428 	.word	0x40020428
 8002578:	40020440 	.word	0x40020440
 800257c:	40020458 	.word	0x40020458
 8002580:	40020470 	.word	0x40020470
 8002584:	40020488 	.word	0x40020488
 8002588:	400204a0 	.word	0x400204a0
 800258c:	400204b8 	.word	0x400204b8
 8002590:	58025408 	.word	0x58025408
 8002594:	5802541c 	.word	0x5802541c
 8002598:	58025430 	.word	0x58025430
 800259c:	58025444 	.word	0x58025444
 80025a0:	58025458 	.word	0x58025458
 80025a4:	5802546c 	.word	0x5802546c
 80025a8:	58025480 	.word	0x58025480
 80025ac:	58025494 	.word	0x58025494
 80025b0:	2300      	movs	r3, #0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d028      	beq.n	8002608 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025c4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ca:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d0:	f003 031f 	and.w	r3, r3, #31
 80025d4:	2201      	movs	r2, #1
 80025d6:	409a      	lsls	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80025e4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00c      	beq.n	8002608 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025fc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002606:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop

08002634 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	@ 0x28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002640:	4b67      	ldr	r3, [pc, #412]	@ (80027e0 <HAL_DMA_IRQHandler+0x1ac>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a67      	ldr	r2, [pc, #412]	@ (80027e4 <HAL_DMA_IRQHandler+0x1b0>)
 8002646:	fba2 2303 	umull	r2, r3, r2, r3
 800264a:	0a9b      	lsrs	r3, r3, #10
 800264c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002652:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002658:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a5f      	ldr	r2, [pc, #380]	@ (80027e8 <HAL_DMA_IRQHandler+0x1b4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d04a      	beq.n	8002706 <HAL_DMA_IRQHandler+0xd2>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a5d      	ldr	r2, [pc, #372]	@ (80027ec <HAL_DMA_IRQHandler+0x1b8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d045      	beq.n	8002706 <HAL_DMA_IRQHandler+0xd2>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a5c      	ldr	r2, [pc, #368]	@ (80027f0 <HAL_DMA_IRQHandler+0x1bc>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d040      	beq.n	8002706 <HAL_DMA_IRQHandler+0xd2>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a5a      	ldr	r2, [pc, #360]	@ (80027f4 <HAL_DMA_IRQHandler+0x1c0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d03b      	beq.n	8002706 <HAL_DMA_IRQHandler+0xd2>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a59      	ldr	r2, [pc, #356]	@ (80027f8 <HAL_DMA_IRQHandler+0x1c4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d036      	beq.n	8002706 <HAL_DMA_IRQHandler+0xd2>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a57      	ldr	r2, [pc, #348]	@ (80027fc <HAL_DMA_IRQHandler+0x1c8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d031      	beq.n	8002706 <HAL_DMA_IRQHandler+0xd2>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a56      	ldr	r2, [pc, #344]	@ (8002800 <HAL_DMA_IRQHandler+0x1cc>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d02c      	beq.n	8002706 <HAL_DMA_IRQHandler+0xd2>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a54      	ldr	r2, [pc, #336]	@ (8002804 <HAL_DMA_IRQHandler+0x1d0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d027      	beq.n	8002706 <HAL_DMA_IRQHandler+0xd2>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a53      	ldr	r2, [pc, #332]	@ (8002808 <HAL_DMA_IRQHandler+0x1d4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d022      	beq.n	8002706 <HAL_DMA_IRQHandler+0xd2>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a51      	ldr	r2, [pc, #324]	@ (800280c <HAL_DMA_IRQHandler+0x1d8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d01d      	beq.n	8002706 <HAL_DMA_IRQHandler+0xd2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a50      	ldr	r2, [pc, #320]	@ (8002810 <HAL_DMA_IRQHandler+0x1dc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d018      	beq.n	8002706 <HAL_DMA_IRQHandler+0xd2>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002814 <HAL_DMA_IRQHandler+0x1e0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d013      	beq.n	8002706 <HAL_DMA_IRQHandler+0xd2>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a4d      	ldr	r2, [pc, #308]	@ (8002818 <HAL_DMA_IRQHandler+0x1e4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d00e      	beq.n	8002706 <HAL_DMA_IRQHandler+0xd2>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a4b      	ldr	r2, [pc, #300]	@ (800281c <HAL_DMA_IRQHandler+0x1e8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d009      	beq.n	8002706 <HAL_DMA_IRQHandler+0xd2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a4a      	ldr	r2, [pc, #296]	@ (8002820 <HAL_DMA_IRQHandler+0x1ec>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d004      	beq.n	8002706 <HAL_DMA_IRQHandler+0xd2>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a48      	ldr	r2, [pc, #288]	@ (8002824 <HAL_DMA_IRQHandler+0x1f0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d101      	bne.n	800270a <HAL_DMA_IRQHandler+0xd6>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_DMA_IRQHandler+0xd8>
 800270a:	2300      	movs	r3, #0
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 842b 	beq.w	8002f68 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	2208      	movs	r2, #8
 800271c:	409a      	lsls	r2, r3
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 80a2 	beq.w	800286c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a2e      	ldr	r2, [pc, #184]	@ (80027e8 <HAL_DMA_IRQHandler+0x1b4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d04a      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x194>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a2d      	ldr	r2, [pc, #180]	@ (80027ec <HAL_DMA_IRQHandler+0x1b8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d045      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x194>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a2b      	ldr	r2, [pc, #172]	@ (80027f0 <HAL_DMA_IRQHandler+0x1bc>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d040      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x194>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a2a      	ldr	r2, [pc, #168]	@ (80027f4 <HAL_DMA_IRQHandler+0x1c0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d03b      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x194>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a28      	ldr	r2, [pc, #160]	@ (80027f8 <HAL_DMA_IRQHandler+0x1c4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d036      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x194>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a27      	ldr	r2, [pc, #156]	@ (80027fc <HAL_DMA_IRQHandler+0x1c8>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d031      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x194>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a25      	ldr	r2, [pc, #148]	@ (8002800 <HAL_DMA_IRQHandler+0x1cc>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d02c      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x194>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a24      	ldr	r2, [pc, #144]	@ (8002804 <HAL_DMA_IRQHandler+0x1d0>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d027      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x194>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a22      	ldr	r2, [pc, #136]	@ (8002808 <HAL_DMA_IRQHandler+0x1d4>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d022      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x194>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a21      	ldr	r2, [pc, #132]	@ (800280c <HAL_DMA_IRQHandler+0x1d8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d01d      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x194>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a1f      	ldr	r2, [pc, #124]	@ (8002810 <HAL_DMA_IRQHandler+0x1dc>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d018      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x194>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a1e      	ldr	r2, [pc, #120]	@ (8002814 <HAL_DMA_IRQHandler+0x1e0>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d013      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x194>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002818 <HAL_DMA_IRQHandler+0x1e4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d00e      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x194>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a1b      	ldr	r2, [pc, #108]	@ (800281c <HAL_DMA_IRQHandler+0x1e8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d009      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x194>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a19      	ldr	r2, [pc, #100]	@ (8002820 <HAL_DMA_IRQHandler+0x1ec>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d004      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x194>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a18      	ldr	r2, [pc, #96]	@ (8002824 <HAL_DMA_IRQHandler+0x1f0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d12f      	bne.n	8002828 <HAL_DMA_IRQHandler+0x1f4>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	bf14      	ite	ne
 80027d6:	2301      	movne	r3, #1
 80027d8:	2300      	moveq	r3, #0
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	e02e      	b.n	800283c <HAL_DMA_IRQHandler+0x208>
 80027de:	bf00      	nop
 80027e0:	24000000 	.word	0x24000000
 80027e4:	1b4e81b5 	.word	0x1b4e81b5
 80027e8:	40020010 	.word	0x40020010
 80027ec:	40020028 	.word	0x40020028
 80027f0:	40020040 	.word	0x40020040
 80027f4:	40020058 	.word	0x40020058
 80027f8:	40020070 	.word	0x40020070
 80027fc:	40020088 	.word	0x40020088
 8002800:	400200a0 	.word	0x400200a0
 8002804:	400200b8 	.word	0x400200b8
 8002808:	40020410 	.word	0x40020410
 800280c:	40020428 	.word	0x40020428
 8002810:	40020440 	.word	0x40020440
 8002814:	40020458 	.word	0x40020458
 8002818:	40020470 	.word	0x40020470
 800281c:	40020488 	.word	0x40020488
 8002820:	400204a0 	.word	0x400204a0
 8002824:	400204b8 	.word	0x400204b8
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	bf14      	ite	ne
 8002836:	2301      	movne	r3, #1
 8002838:	2300      	moveq	r3, #0
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d015      	beq.n	800286c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0204 	bic.w	r2, r2, #4
 800284e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002854:	f003 031f 	and.w	r3, r3, #31
 8002858:	2208      	movs	r2, #8
 800285a:	409a      	lsls	r2, r3
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002864:	f043 0201 	orr.w	r2, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	fa22 f303 	lsr.w	r3, r2, r3
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d06e      	beq.n	8002960 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a69      	ldr	r2, [pc, #420]	@ (8002a2c <HAL_DMA_IRQHandler+0x3f8>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d04a      	beq.n	8002922 <HAL_DMA_IRQHandler+0x2ee>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a67      	ldr	r2, [pc, #412]	@ (8002a30 <HAL_DMA_IRQHandler+0x3fc>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d045      	beq.n	8002922 <HAL_DMA_IRQHandler+0x2ee>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a66      	ldr	r2, [pc, #408]	@ (8002a34 <HAL_DMA_IRQHandler+0x400>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d040      	beq.n	8002922 <HAL_DMA_IRQHandler+0x2ee>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a64      	ldr	r2, [pc, #400]	@ (8002a38 <HAL_DMA_IRQHandler+0x404>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d03b      	beq.n	8002922 <HAL_DMA_IRQHandler+0x2ee>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a63      	ldr	r2, [pc, #396]	@ (8002a3c <HAL_DMA_IRQHandler+0x408>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d036      	beq.n	8002922 <HAL_DMA_IRQHandler+0x2ee>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a61      	ldr	r2, [pc, #388]	@ (8002a40 <HAL_DMA_IRQHandler+0x40c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d031      	beq.n	8002922 <HAL_DMA_IRQHandler+0x2ee>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a60      	ldr	r2, [pc, #384]	@ (8002a44 <HAL_DMA_IRQHandler+0x410>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d02c      	beq.n	8002922 <HAL_DMA_IRQHandler+0x2ee>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a5e      	ldr	r2, [pc, #376]	@ (8002a48 <HAL_DMA_IRQHandler+0x414>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d027      	beq.n	8002922 <HAL_DMA_IRQHandler+0x2ee>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a5d      	ldr	r2, [pc, #372]	@ (8002a4c <HAL_DMA_IRQHandler+0x418>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d022      	beq.n	8002922 <HAL_DMA_IRQHandler+0x2ee>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a5b      	ldr	r2, [pc, #364]	@ (8002a50 <HAL_DMA_IRQHandler+0x41c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d01d      	beq.n	8002922 <HAL_DMA_IRQHandler+0x2ee>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a5a      	ldr	r2, [pc, #360]	@ (8002a54 <HAL_DMA_IRQHandler+0x420>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d018      	beq.n	8002922 <HAL_DMA_IRQHandler+0x2ee>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a58      	ldr	r2, [pc, #352]	@ (8002a58 <HAL_DMA_IRQHandler+0x424>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d013      	beq.n	8002922 <HAL_DMA_IRQHandler+0x2ee>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a57      	ldr	r2, [pc, #348]	@ (8002a5c <HAL_DMA_IRQHandler+0x428>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d00e      	beq.n	8002922 <HAL_DMA_IRQHandler+0x2ee>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a55      	ldr	r2, [pc, #340]	@ (8002a60 <HAL_DMA_IRQHandler+0x42c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d009      	beq.n	8002922 <HAL_DMA_IRQHandler+0x2ee>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a54      	ldr	r2, [pc, #336]	@ (8002a64 <HAL_DMA_IRQHandler+0x430>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d004      	beq.n	8002922 <HAL_DMA_IRQHandler+0x2ee>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a52      	ldr	r2, [pc, #328]	@ (8002a68 <HAL_DMA_IRQHandler+0x434>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d10a      	bne.n	8002938 <HAL_DMA_IRQHandler+0x304>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800292c:	2b00      	cmp	r3, #0
 800292e:	bf14      	ite	ne
 8002930:	2301      	movne	r3, #1
 8002932:	2300      	moveq	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	e003      	b.n	8002940 <HAL_DMA_IRQHandler+0x30c>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2300      	movs	r3, #0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00d      	beq.n	8002960 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	2201      	movs	r2, #1
 800294e:	409a      	lsls	r2, r3
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002958:	f043 0202 	orr.w	r2, r3, #2
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002964:	f003 031f 	and.w	r3, r3, #31
 8002968:	2204      	movs	r2, #4
 800296a:	409a      	lsls	r2, r3
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 808f 	beq.w	8002a94 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a2c      	ldr	r2, [pc, #176]	@ (8002a2c <HAL_DMA_IRQHandler+0x3f8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d04a      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x3e2>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a2a      	ldr	r2, [pc, #168]	@ (8002a30 <HAL_DMA_IRQHandler+0x3fc>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d045      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x3e2>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a29      	ldr	r2, [pc, #164]	@ (8002a34 <HAL_DMA_IRQHandler+0x400>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d040      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x3e2>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a27      	ldr	r2, [pc, #156]	@ (8002a38 <HAL_DMA_IRQHandler+0x404>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d03b      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x3e2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a26      	ldr	r2, [pc, #152]	@ (8002a3c <HAL_DMA_IRQHandler+0x408>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d036      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x3e2>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a24      	ldr	r2, [pc, #144]	@ (8002a40 <HAL_DMA_IRQHandler+0x40c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d031      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x3e2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a23      	ldr	r2, [pc, #140]	@ (8002a44 <HAL_DMA_IRQHandler+0x410>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d02c      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x3e2>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a21      	ldr	r2, [pc, #132]	@ (8002a48 <HAL_DMA_IRQHandler+0x414>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d027      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x3e2>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a20      	ldr	r2, [pc, #128]	@ (8002a4c <HAL_DMA_IRQHandler+0x418>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d022      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x3e2>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002a50 <HAL_DMA_IRQHandler+0x41c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d01d      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x3e2>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a1d      	ldr	r2, [pc, #116]	@ (8002a54 <HAL_DMA_IRQHandler+0x420>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d018      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x3e2>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002a58 <HAL_DMA_IRQHandler+0x424>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d013      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x3e2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a1a      	ldr	r2, [pc, #104]	@ (8002a5c <HAL_DMA_IRQHandler+0x428>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d00e      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x3e2>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a18      	ldr	r2, [pc, #96]	@ (8002a60 <HAL_DMA_IRQHandler+0x42c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d009      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x3e2>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a17      	ldr	r2, [pc, #92]	@ (8002a64 <HAL_DMA_IRQHandler+0x430>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d004      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x3e2>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a15      	ldr	r2, [pc, #84]	@ (8002a68 <HAL_DMA_IRQHandler+0x434>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d12a      	bne.n	8002a6c <HAL_DMA_IRQHandler+0x438>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	bf14      	ite	ne
 8002a24:	2301      	movne	r3, #1
 8002a26:	2300      	moveq	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	e023      	b.n	8002a74 <HAL_DMA_IRQHandler+0x440>
 8002a2c:	40020010 	.word	0x40020010
 8002a30:	40020028 	.word	0x40020028
 8002a34:	40020040 	.word	0x40020040
 8002a38:	40020058 	.word	0x40020058
 8002a3c:	40020070 	.word	0x40020070
 8002a40:	40020088 	.word	0x40020088
 8002a44:	400200a0 	.word	0x400200a0
 8002a48:	400200b8 	.word	0x400200b8
 8002a4c:	40020410 	.word	0x40020410
 8002a50:	40020428 	.word	0x40020428
 8002a54:	40020440 	.word	0x40020440
 8002a58:	40020458 	.word	0x40020458
 8002a5c:	40020470 	.word	0x40020470
 8002a60:	40020488 	.word	0x40020488
 8002a64:	400204a0 	.word	0x400204a0
 8002a68:	400204b8 	.word	0x400204b8
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2300      	movs	r3, #0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00d      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	2204      	movs	r2, #4
 8002a82:	409a      	lsls	r2, r3
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8c:	f043 0204 	orr.w	r2, r3, #4
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a98:	f003 031f 	and.w	r3, r3, #31
 8002a9c:	2210      	movs	r2, #16
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 80a6 	beq.w	8002bf6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a85      	ldr	r2, [pc, #532]	@ (8002cc4 <HAL_DMA_IRQHandler+0x690>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d04a      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x516>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a83      	ldr	r2, [pc, #524]	@ (8002cc8 <HAL_DMA_IRQHandler+0x694>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d045      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x516>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a82      	ldr	r2, [pc, #520]	@ (8002ccc <HAL_DMA_IRQHandler+0x698>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d040      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x516>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a80      	ldr	r2, [pc, #512]	@ (8002cd0 <HAL_DMA_IRQHandler+0x69c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d03b      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x516>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a7f      	ldr	r2, [pc, #508]	@ (8002cd4 <HAL_DMA_IRQHandler+0x6a0>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d036      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x516>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a7d      	ldr	r2, [pc, #500]	@ (8002cd8 <HAL_DMA_IRQHandler+0x6a4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d031      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x516>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a7c      	ldr	r2, [pc, #496]	@ (8002cdc <HAL_DMA_IRQHandler+0x6a8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d02c      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x516>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a7a      	ldr	r2, [pc, #488]	@ (8002ce0 <HAL_DMA_IRQHandler+0x6ac>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d027      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x516>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a79      	ldr	r2, [pc, #484]	@ (8002ce4 <HAL_DMA_IRQHandler+0x6b0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d022      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x516>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a77      	ldr	r2, [pc, #476]	@ (8002ce8 <HAL_DMA_IRQHandler+0x6b4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d01d      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x516>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a76      	ldr	r2, [pc, #472]	@ (8002cec <HAL_DMA_IRQHandler+0x6b8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d018      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x516>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a74      	ldr	r2, [pc, #464]	@ (8002cf0 <HAL_DMA_IRQHandler+0x6bc>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d013      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x516>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a73      	ldr	r2, [pc, #460]	@ (8002cf4 <HAL_DMA_IRQHandler+0x6c0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d00e      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x516>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a71      	ldr	r2, [pc, #452]	@ (8002cf8 <HAL_DMA_IRQHandler+0x6c4>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d009      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x516>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a70      	ldr	r2, [pc, #448]	@ (8002cfc <HAL_DMA_IRQHandler+0x6c8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d004      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x516>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a6e      	ldr	r2, [pc, #440]	@ (8002d00 <HAL_DMA_IRQHandler+0x6cc>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d10a      	bne.n	8002b60 <HAL_DMA_IRQHandler+0x52c>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bf14      	ite	ne
 8002b58:	2301      	movne	r3, #1
 8002b5a:	2300      	moveq	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	e009      	b.n	8002b74 <HAL_DMA_IRQHandler+0x540>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	bf14      	ite	ne
 8002b6e:	2301      	movne	r3, #1
 8002b70:	2300      	moveq	r3, #0
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d03e      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7c:	f003 031f 	and.w	r3, r3, #31
 8002b80:	2210      	movs	r2, #16
 8002b82:	409a      	lsls	r2, r3
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d018      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d108      	bne.n	8002bb6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d024      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	4798      	blx	r3
 8002bb4:	e01f      	b.n	8002bf6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d01b      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	4798      	blx	r3
 8002bc6:	e016      	b.n	8002bf6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d107      	bne.n	8002be6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0208 	bic.w	r2, r2, #8
 8002be4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	2220      	movs	r2, #32
 8002c00:	409a      	lsls	r2, r3
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 8110 	beq.w	8002e2c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a2c      	ldr	r2, [pc, #176]	@ (8002cc4 <HAL_DMA_IRQHandler+0x690>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d04a      	beq.n	8002cac <HAL_DMA_IRQHandler+0x678>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a2b      	ldr	r2, [pc, #172]	@ (8002cc8 <HAL_DMA_IRQHandler+0x694>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d045      	beq.n	8002cac <HAL_DMA_IRQHandler+0x678>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a29      	ldr	r2, [pc, #164]	@ (8002ccc <HAL_DMA_IRQHandler+0x698>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d040      	beq.n	8002cac <HAL_DMA_IRQHandler+0x678>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a28      	ldr	r2, [pc, #160]	@ (8002cd0 <HAL_DMA_IRQHandler+0x69c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d03b      	beq.n	8002cac <HAL_DMA_IRQHandler+0x678>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a26      	ldr	r2, [pc, #152]	@ (8002cd4 <HAL_DMA_IRQHandler+0x6a0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d036      	beq.n	8002cac <HAL_DMA_IRQHandler+0x678>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a25      	ldr	r2, [pc, #148]	@ (8002cd8 <HAL_DMA_IRQHandler+0x6a4>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d031      	beq.n	8002cac <HAL_DMA_IRQHandler+0x678>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a23      	ldr	r2, [pc, #140]	@ (8002cdc <HAL_DMA_IRQHandler+0x6a8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d02c      	beq.n	8002cac <HAL_DMA_IRQHandler+0x678>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a22      	ldr	r2, [pc, #136]	@ (8002ce0 <HAL_DMA_IRQHandler+0x6ac>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d027      	beq.n	8002cac <HAL_DMA_IRQHandler+0x678>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a20      	ldr	r2, [pc, #128]	@ (8002ce4 <HAL_DMA_IRQHandler+0x6b0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d022      	beq.n	8002cac <HAL_DMA_IRQHandler+0x678>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ce8 <HAL_DMA_IRQHandler+0x6b4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d01d      	beq.n	8002cac <HAL_DMA_IRQHandler+0x678>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a1d      	ldr	r2, [pc, #116]	@ (8002cec <HAL_DMA_IRQHandler+0x6b8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d018      	beq.n	8002cac <HAL_DMA_IRQHandler+0x678>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a1c      	ldr	r2, [pc, #112]	@ (8002cf0 <HAL_DMA_IRQHandler+0x6bc>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d013      	beq.n	8002cac <HAL_DMA_IRQHandler+0x678>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a1a      	ldr	r2, [pc, #104]	@ (8002cf4 <HAL_DMA_IRQHandler+0x6c0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00e      	beq.n	8002cac <HAL_DMA_IRQHandler+0x678>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a19      	ldr	r2, [pc, #100]	@ (8002cf8 <HAL_DMA_IRQHandler+0x6c4>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d009      	beq.n	8002cac <HAL_DMA_IRQHandler+0x678>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a17      	ldr	r2, [pc, #92]	@ (8002cfc <HAL_DMA_IRQHandler+0x6c8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d004      	beq.n	8002cac <HAL_DMA_IRQHandler+0x678>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a16      	ldr	r2, [pc, #88]	@ (8002d00 <HAL_DMA_IRQHandler+0x6cc>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d12b      	bne.n	8002d04 <HAL_DMA_IRQHandler+0x6d0>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	bf14      	ite	ne
 8002cba:	2301      	movne	r3, #1
 8002cbc:	2300      	moveq	r3, #0
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	e02a      	b.n	8002d18 <HAL_DMA_IRQHandler+0x6e4>
 8002cc2:	bf00      	nop
 8002cc4:	40020010 	.word	0x40020010
 8002cc8:	40020028 	.word	0x40020028
 8002ccc:	40020040 	.word	0x40020040
 8002cd0:	40020058 	.word	0x40020058
 8002cd4:	40020070 	.word	0x40020070
 8002cd8:	40020088 	.word	0x40020088
 8002cdc:	400200a0 	.word	0x400200a0
 8002ce0:	400200b8 	.word	0x400200b8
 8002ce4:	40020410 	.word	0x40020410
 8002ce8:	40020428 	.word	0x40020428
 8002cec:	40020440 	.word	0x40020440
 8002cf0:	40020458 	.word	0x40020458
 8002cf4:	40020470 	.word	0x40020470
 8002cf8:	40020488 	.word	0x40020488
 8002cfc:	400204a0 	.word	0x400204a0
 8002d00:	400204b8 	.word	0x400204b8
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	bf14      	ite	ne
 8002d12:	2301      	movne	r3, #1
 8002d14:	2300      	moveq	r3, #0
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 8087 	beq.w	8002e2c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d22:	f003 031f 	and.w	r3, r3, #31
 8002d26:	2220      	movs	r2, #32
 8002d28:	409a      	lsls	r2, r3
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d139      	bne.n	8002dae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0216 	bic.w	r2, r2, #22
 8002d48:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695a      	ldr	r2, [r3, #20]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d58:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d103      	bne.n	8002d6a <HAL_DMA_IRQHandler+0x736>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0208 	bic.w	r2, r2, #8
 8002d78:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7e:	f003 031f 	and.w	r3, r3, #31
 8002d82:	223f      	movs	r2, #63	@ 0x3f
 8002d84:	409a      	lsls	r2, r3
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 834a 	beq.w	8003438 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	4798      	blx	r3
          }
          return;
 8002dac:	e344      	b.n	8003438 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d018      	beq.n	8002dee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d108      	bne.n	8002ddc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d02c      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	4798      	blx	r3
 8002dda:	e027      	b.n	8002e2c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d023      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	4798      	blx	r3
 8002dec:	e01e      	b.n	8002e2c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10f      	bne.n	8002e1c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0210 	bic.w	r2, r2, #16
 8002e0a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 8306 	beq.w	8003442 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 8088 	beq.w	8002f54 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2204      	movs	r2, #4
 8002e48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a7a      	ldr	r2, [pc, #488]	@ (800303c <HAL_DMA_IRQHandler+0xa08>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d04a      	beq.n	8002eec <HAL_DMA_IRQHandler+0x8b8>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a79      	ldr	r2, [pc, #484]	@ (8003040 <HAL_DMA_IRQHandler+0xa0c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d045      	beq.n	8002eec <HAL_DMA_IRQHandler+0x8b8>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a77      	ldr	r2, [pc, #476]	@ (8003044 <HAL_DMA_IRQHandler+0xa10>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d040      	beq.n	8002eec <HAL_DMA_IRQHandler+0x8b8>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a76      	ldr	r2, [pc, #472]	@ (8003048 <HAL_DMA_IRQHandler+0xa14>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d03b      	beq.n	8002eec <HAL_DMA_IRQHandler+0x8b8>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a74      	ldr	r2, [pc, #464]	@ (800304c <HAL_DMA_IRQHandler+0xa18>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d036      	beq.n	8002eec <HAL_DMA_IRQHandler+0x8b8>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a73      	ldr	r2, [pc, #460]	@ (8003050 <HAL_DMA_IRQHandler+0xa1c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d031      	beq.n	8002eec <HAL_DMA_IRQHandler+0x8b8>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a71      	ldr	r2, [pc, #452]	@ (8003054 <HAL_DMA_IRQHandler+0xa20>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d02c      	beq.n	8002eec <HAL_DMA_IRQHandler+0x8b8>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a70      	ldr	r2, [pc, #448]	@ (8003058 <HAL_DMA_IRQHandler+0xa24>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d027      	beq.n	8002eec <HAL_DMA_IRQHandler+0x8b8>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a6e      	ldr	r2, [pc, #440]	@ (800305c <HAL_DMA_IRQHandler+0xa28>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d022      	beq.n	8002eec <HAL_DMA_IRQHandler+0x8b8>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a6d      	ldr	r2, [pc, #436]	@ (8003060 <HAL_DMA_IRQHandler+0xa2c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d01d      	beq.n	8002eec <HAL_DMA_IRQHandler+0x8b8>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a6b      	ldr	r2, [pc, #428]	@ (8003064 <HAL_DMA_IRQHandler+0xa30>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d018      	beq.n	8002eec <HAL_DMA_IRQHandler+0x8b8>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a6a      	ldr	r2, [pc, #424]	@ (8003068 <HAL_DMA_IRQHandler+0xa34>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d013      	beq.n	8002eec <HAL_DMA_IRQHandler+0x8b8>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a68      	ldr	r2, [pc, #416]	@ (800306c <HAL_DMA_IRQHandler+0xa38>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00e      	beq.n	8002eec <HAL_DMA_IRQHandler+0x8b8>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a67      	ldr	r2, [pc, #412]	@ (8003070 <HAL_DMA_IRQHandler+0xa3c>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d009      	beq.n	8002eec <HAL_DMA_IRQHandler+0x8b8>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a65      	ldr	r2, [pc, #404]	@ (8003074 <HAL_DMA_IRQHandler+0xa40>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d004      	beq.n	8002eec <HAL_DMA_IRQHandler+0x8b8>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a64      	ldr	r2, [pc, #400]	@ (8003078 <HAL_DMA_IRQHandler+0xa44>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d108      	bne.n	8002efe <HAL_DMA_IRQHandler+0x8ca>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0201 	bic.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	e007      	b.n	8002f0e <HAL_DMA_IRQHandler+0x8da>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0201 	bic.w	r2, r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	3301      	adds	r3, #1
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d307      	bcc.n	8002f2a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1f2      	bne.n	8002f0e <HAL_DMA_IRQHandler+0x8da>
 8002f28:	e000      	b.n	8002f2c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002f2a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d004      	beq.n	8002f44 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002f42:	e003      	b.n	8002f4c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 8272 	beq.w	8003442 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	4798      	blx	r3
 8002f66:	e26c      	b.n	8003442 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a43      	ldr	r2, [pc, #268]	@ (800307c <HAL_DMA_IRQHandler+0xa48>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d022      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x984>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a42      	ldr	r2, [pc, #264]	@ (8003080 <HAL_DMA_IRQHandler+0xa4c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d01d      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x984>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a40      	ldr	r2, [pc, #256]	@ (8003084 <HAL_DMA_IRQHandler+0xa50>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d018      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x984>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a3f      	ldr	r2, [pc, #252]	@ (8003088 <HAL_DMA_IRQHandler+0xa54>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d013      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x984>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a3d      	ldr	r2, [pc, #244]	@ (800308c <HAL_DMA_IRQHandler+0xa58>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00e      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x984>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a3c      	ldr	r2, [pc, #240]	@ (8003090 <HAL_DMA_IRQHandler+0xa5c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d009      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x984>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a3a      	ldr	r2, [pc, #232]	@ (8003094 <HAL_DMA_IRQHandler+0xa60>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d004      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x984>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a39      	ldr	r2, [pc, #228]	@ (8003098 <HAL_DMA_IRQHandler+0xa64>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d101      	bne.n	8002fbc <HAL_DMA_IRQHandler+0x988>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <HAL_DMA_IRQHandler+0x98a>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 823f 	beq.w	8003442 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	2204      	movs	r2, #4
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 80cd 	beq.w	800317c <HAL_DMA_IRQHandler+0xb48>
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 80c7 	beq.w	800317c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff2:	f003 031f 	and.w	r3, r3, #31
 8002ff6:	2204      	movs	r2, #4
 8002ff8:	409a      	lsls	r2, r3
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d049      	beq.n	800309c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 8210 	beq.w	800343c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003024:	e20a      	b.n	800343c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 8206 	beq.w	800343c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003038:	e200      	b.n	800343c <HAL_DMA_IRQHandler+0xe08>
 800303a:	bf00      	nop
 800303c:	40020010 	.word	0x40020010
 8003040:	40020028 	.word	0x40020028
 8003044:	40020040 	.word	0x40020040
 8003048:	40020058 	.word	0x40020058
 800304c:	40020070 	.word	0x40020070
 8003050:	40020088 	.word	0x40020088
 8003054:	400200a0 	.word	0x400200a0
 8003058:	400200b8 	.word	0x400200b8
 800305c:	40020410 	.word	0x40020410
 8003060:	40020428 	.word	0x40020428
 8003064:	40020440 	.word	0x40020440
 8003068:	40020458 	.word	0x40020458
 800306c:	40020470 	.word	0x40020470
 8003070:	40020488 	.word	0x40020488
 8003074:	400204a0 	.word	0x400204a0
 8003078:	400204b8 	.word	0x400204b8
 800307c:	58025408 	.word	0x58025408
 8003080:	5802541c 	.word	0x5802541c
 8003084:	58025430 	.word	0x58025430
 8003088:	58025444 	.word	0x58025444
 800308c:	58025458 	.word	0x58025458
 8003090:	5802546c 	.word	0x5802546c
 8003094:	58025480 	.word	0x58025480
 8003098:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d160      	bne.n	8003168 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a7f      	ldr	r2, [pc, #508]	@ (80032a8 <HAL_DMA_IRQHandler+0xc74>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d04a      	beq.n	8003146 <HAL_DMA_IRQHandler+0xb12>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a7d      	ldr	r2, [pc, #500]	@ (80032ac <HAL_DMA_IRQHandler+0xc78>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d045      	beq.n	8003146 <HAL_DMA_IRQHandler+0xb12>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a7c      	ldr	r2, [pc, #496]	@ (80032b0 <HAL_DMA_IRQHandler+0xc7c>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d040      	beq.n	8003146 <HAL_DMA_IRQHandler+0xb12>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a7a      	ldr	r2, [pc, #488]	@ (80032b4 <HAL_DMA_IRQHandler+0xc80>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d03b      	beq.n	8003146 <HAL_DMA_IRQHandler+0xb12>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a79      	ldr	r2, [pc, #484]	@ (80032b8 <HAL_DMA_IRQHandler+0xc84>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d036      	beq.n	8003146 <HAL_DMA_IRQHandler+0xb12>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a77      	ldr	r2, [pc, #476]	@ (80032bc <HAL_DMA_IRQHandler+0xc88>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d031      	beq.n	8003146 <HAL_DMA_IRQHandler+0xb12>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a76      	ldr	r2, [pc, #472]	@ (80032c0 <HAL_DMA_IRQHandler+0xc8c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d02c      	beq.n	8003146 <HAL_DMA_IRQHandler+0xb12>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a74      	ldr	r2, [pc, #464]	@ (80032c4 <HAL_DMA_IRQHandler+0xc90>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d027      	beq.n	8003146 <HAL_DMA_IRQHandler+0xb12>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a73      	ldr	r2, [pc, #460]	@ (80032c8 <HAL_DMA_IRQHandler+0xc94>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d022      	beq.n	8003146 <HAL_DMA_IRQHandler+0xb12>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a71      	ldr	r2, [pc, #452]	@ (80032cc <HAL_DMA_IRQHandler+0xc98>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d01d      	beq.n	8003146 <HAL_DMA_IRQHandler+0xb12>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a70      	ldr	r2, [pc, #448]	@ (80032d0 <HAL_DMA_IRQHandler+0xc9c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d018      	beq.n	8003146 <HAL_DMA_IRQHandler+0xb12>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a6e      	ldr	r2, [pc, #440]	@ (80032d4 <HAL_DMA_IRQHandler+0xca0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d013      	beq.n	8003146 <HAL_DMA_IRQHandler+0xb12>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a6d      	ldr	r2, [pc, #436]	@ (80032d8 <HAL_DMA_IRQHandler+0xca4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d00e      	beq.n	8003146 <HAL_DMA_IRQHandler+0xb12>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a6b      	ldr	r2, [pc, #428]	@ (80032dc <HAL_DMA_IRQHandler+0xca8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d009      	beq.n	8003146 <HAL_DMA_IRQHandler+0xb12>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a6a      	ldr	r2, [pc, #424]	@ (80032e0 <HAL_DMA_IRQHandler+0xcac>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d004      	beq.n	8003146 <HAL_DMA_IRQHandler+0xb12>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a68      	ldr	r2, [pc, #416]	@ (80032e4 <HAL_DMA_IRQHandler+0xcb0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d108      	bne.n	8003158 <HAL_DMA_IRQHandler+0xb24>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0208 	bic.w	r2, r2, #8
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	e007      	b.n	8003168 <HAL_DMA_IRQHandler+0xb34>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0204 	bic.w	r2, r2, #4
 8003166:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 8165 	beq.w	800343c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800317a:	e15f      	b.n	800343c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	2202      	movs	r2, #2
 8003186:	409a      	lsls	r2, r3
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	4013      	ands	r3, r2
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80c5 	beq.w	800331c <HAL_DMA_IRQHandler+0xce8>
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 80bf 	beq.w	800331c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a2:	f003 031f 	and.w	r3, r3, #31
 80031a6:	2202      	movs	r2, #2
 80031a8:	409a      	lsls	r2, r3
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d018      	beq.n	80031ea <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d109      	bne.n	80031d6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 813a 	beq.w	8003440 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031d4:	e134      	b.n	8003440 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 8130 	beq.w	8003440 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031e8:	e12a      	b.n	8003440 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f040 8089 	bne.w	8003308 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a2b      	ldr	r2, [pc, #172]	@ (80032a8 <HAL_DMA_IRQHandler+0xc74>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d04a      	beq.n	8003296 <HAL_DMA_IRQHandler+0xc62>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a29      	ldr	r2, [pc, #164]	@ (80032ac <HAL_DMA_IRQHandler+0xc78>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d045      	beq.n	8003296 <HAL_DMA_IRQHandler+0xc62>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a28      	ldr	r2, [pc, #160]	@ (80032b0 <HAL_DMA_IRQHandler+0xc7c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d040      	beq.n	8003296 <HAL_DMA_IRQHandler+0xc62>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a26      	ldr	r2, [pc, #152]	@ (80032b4 <HAL_DMA_IRQHandler+0xc80>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d03b      	beq.n	8003296 <HAL_DMA_IRQHandler+0xc62>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a25      	ldr	r2, [pc, #148]	@ (80032b8 <HAL_DMA_IRQHandler+0xc84>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d036      	beq.n	8003296 <HAL_DMA_IRQHandler+0xc62>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a23      	ldr	r2, [pc, #140]	@ (80032bc <HAL_DMA_IRQHandler+0xc88>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d031      	beq.n	8003296 <HAL_DMA_IRQHandler+0xc62>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a22      	ldr	r2, [pc, #136]	@ (80032c0 <HAL_DMA_IRQHandler+0xc8c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d02c      	beq.n	8003296 <HAL_DMA_IRQHandler+0xc62>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a20      	ldr	r2, [pc, #128]	@ (80032c4 <HAL_DMA_IRQHandler+0xc90>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d027      	beq.n	8003296 <HAL_DMA_IRQHandler+0xc62>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a1f      	ldr	r2, [pc, #124]	@ (80032c8 <HAL_DMA_IRQHandler+0xc94>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d022      	beq.n	8003296 <HAL_DMA_IRQHandler+0xc62>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a1d      	ldr	r2, [pc, #116]	@ (80032cc <HAL_DMA_IRQHandler+0xc98>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d01d      	beq.n	8003296 <HAL_DMA_IRQHandler+0xc62>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a1c      	ldr	r2, [pc, #112]	@ (80032d0 <HAL_DMA_IRQHandler+0xc9c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d018      	beq.n	8003296 <HAL_DMA_IRQHandler+0xc62>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a1a      	ldr	r2, [pc, #104]	@ (80032d4 <HAL_DMA_IRQHandler+0xca0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d013      	beq.n	8003296 <HAL_DMA_IRQHandler+0xc62>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a19      	ldr	r2, [pc, #100]	@ (80032d8 <HAL_DMA_IRQHandler+0xca4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d00e      	beq.n	8003296 <HAL_DMA_IRQHandler+0xc62>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a17      	ldr	r2, [pc, #92]	@ (80032dc <HAL_DMA_IRQHandler+0xca8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d009      	beq.n	8003296 <HAL_DMA_IRQHandler+0xc62>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a16      	ldr	r2, [pc, #88]	@ (80032e0 <HAL_DMA_IRQHandler+0xcac>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d004      	beq.n	8003296 <HAL_DMA_IRQHandler+0xc62>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a14      	ldr	r2, [pc, #80]	@ (80032e4 <HAL_DMA_IRQHandler+0xcb0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d128      	bne.n	80032e8 <HAL_DMA_IRQHandler+0xcb4>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0214 	bic.w	r2, r2, #20
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	e027      	b.n	80032f8 <HAL_DMA_IRQHandler+0xcc4>
 80032a8:	40020010 	.word	0x40020010
 80032ac:	40020028 	.word	0x40020028
 80032b0:	40020040 	.word	0x40020040
 80032b4:	40020058 	.word	0x40020058
 80032b8:	40020070 	.word	0x40020070
 80032bc:	40020088 	.word	0x40020088
 80032c0:	400200a0 	.word	0x400200a0
 80032c4:	400200b8 	.word	0x400200b8
 80032c8:	40020410 	.word	0x40020410
 80032cc:	40020428 	.word	0x40020428
 80032d0:	40020440 	.word	0x40020440
 80032d4:	40020458 	.word	0x40020458
 80032d8:	40020470 	.word	0x40020470
 80032dc:	40020488 	.word	0x40020488
 80032e0:	400204a0 	.word	0x400204a0
 80032e4:	400204b8 	.word	0x400204b8
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 020a 	bic.w	r2, r2, #10
 80032f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 8097 	beq.w	8003440 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800331a:	e091      	b.n	8003440 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003320:	f003 031f 	and.w	r3, r3, #31
 8003324:	2208      	movs	r2, #8
 8003326:	409a      	lsls	r2, r3
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 8088 	beq.w	8003442 <HAL_DMA_IRQHandler+0xe0e>
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 8082 	beq.w	8003442 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a41      	ldr	r2, [pc, #260]	@ (8003448 <HAL_DMA_IRQHandler+0xe14>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d04a      	beq.n	80033de <HAL_DMA_IRQHandler+0xdaa>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a3f      	ldr	r2, [pc, #252]	@ (800344c <HAL_DMA_IRQHandler+0xe18>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d045      	beq.n	80033de <HAL_DMA_IRQHandler+0xdaa>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a3e      	ldr	r2, [pc, #248]	@ (8003450 <HAL_DMA_IRQHandler+0xe1c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d040      	beq.n	80033de <HAL_DMA_IRQHandler+0xdaa>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a3c      	ldr	r2, [pc, #240]	@ (8003454 <HAL_DMA_IRQHandler+0xe20>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d03b      	beq.n	80033de <HAL_DMA_IRQHandler+0xdaa>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a3b      	ldr	r2, [pc, #236]	@ (8003458 <HAL_DMA_IRQHandler+0xe24>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d036      	beq.n	80033de <HAL_DMA_IRQHandler+0xdaa>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a39      	ldr	r2, [pc, #228]	@ (800345c <HAL_DMA_IRQHandler+0xe28>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d031      	beq.n	80033de <HAL_DMA_IRQHandler+0xdaa>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a38      	ldr	r2, [pc, #224]	@ (8003460 <HAL_DMA_IRQHandler+0xe2c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d02c      	beq.n	80033de <HAL_DMA_IRQHandler+0xdaa>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a36      	ldr	r2, [pc, #216]	@ (8003464 <HAL_DMA_IRQHandler+0xe30>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d027      	beq.n	80033de <HAL_DMA_IRQHandler+0xdaa>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a35      	ldr	r2, [pc, #212]	@ (8003468 <HAL_DMA_IRQHandler+0xe34>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d022      	beq.n	80033de <HAL_DMA_IRQHandler+0xdaa>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a33      	ldr	r2, [pc, #204]	@ (800346c <HAL_DMA_IRQHandler+0xe38>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d01d      	beq.n	80033de <HAL_DMA_IRQHandler+0xdaa>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a32      	ldr	r2, [pc, #200]	@ (8003470 <HAL_DMA_IRQHandler+0xe3c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d018      	beq.n	80033de <HAL_DMA_IRQHandler+0xdaa>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a30      	ldr	r2, [pc, #192]	@ (8003474 <HAL_DMA_IRQHandler+0xe40>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d013      	beq.n	80033de <HAL_DMA_IRQHandler+0xdaa>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a2f      	ldr	r2, [pc, #188]	@ (8003478 <HAL_DMA_IRQHandler+0xe44>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d00e      	beq.n	80033de <HAL_DMA_IRQHandler+0xdaa>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a2d      	ldr	r2, [pc, #180]	@ (800347c <HAL_DMA_IRQHandler+0xe48>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d009      	beq.n	80033de <HAL_DMA_IRQHandler+0xdaa>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003480 <HAL_DMA_IRQHandler+0xe4c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d004      	beq.n	80033de <HAL_DMA_IRQHandler+0xdaa>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a2a      	ldr	r2, [pc, #168]	@ (8003484 <HAL_DMA_IRQHandler+0xe50>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d108      	bne.n	80033f0 <HAL_DMA_IRQHandler+0xdbc>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 021c 	bic.w	r2, r2, #28
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	e007      	b.n	8003400 <HAL_DMA_IRQHandler+0xdcc>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 020e 	bic.w	r2, r2, #14
 80033fe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	2201      	movs	r2, #1
 800340a:	409a      	lsls	r2, r3
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d009      	beq.n	8003442 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	4798      	blx	r3
 8003436:	e004      	b.n	8003442 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003438:	bf00      	nop
 800343a:	e002      	b.n	8003442 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800343c:	bf00      	nop
 800343e:	e000      	b.n	8003442 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003440:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003442:	3728      	adds	r7, #40	@ 0x28
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40020010 	.word	0x40020010
 800344c:	40020028 	.word	0x40020028
 8003450:	40020040 	.word	0x40020040
 8003454:	40020058 	.word	0x40020058
 8003458:	40020070 	.word	0x40020070
 800345c:	40020088 	.word	0x40020088
 8003460:	400200a0 	.word	0x400200a0
 8003464:	400200b8 	.word	0x400200b8
 8003468:	40020410 	.word	0x40020410
 800346c:	40020428 	.word	0x40020428
 8003470:	40020440 	.word	0x40020440
 8003474:	40020458 	.word	0x40020458
 8003478:	40020470 	.word	0x40020470
 800347c:	40020488 	.word	0x40020488
 8003480:	400204a0 	.word	0x400204a0
 8003484:	400204b8 	.word	0x400204b8

08003488 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a42      	ldr	r2, [pc, #264]	@ (80035a0 <DMA_CalcBaseAndBitshift+0x118>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d04a      	beq.n	8003530 <DMA_CalcBaseAndBitshift+0xa8>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a41      	ldr	r2, [pc, #260]	@ (80035a4 <DMA_CalcBaseAndBitshift+0x11c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d045      	beq.n	8003530 <DMA_CalcBaseAndBitshift+0xa8>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a3f      	ldr	r2, [pc, #252]	@ (80035a8 <DMA_CalcBaseAndBitshift+0x120>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d040      	beq.n	8003530 <DMA_CalcBaseAndBitshift+0xa8>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a3e      	ldr	r2, [pc, #248]	@ (80035ac <DMA_CalcBaseAndBitshift+0x124>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d03b      	beq.n	8003530 <DMA_CalcBaseAndBitshift+0xa8>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a3c      	ldr	r2, [pc, #240]	@ (80035b0 <DMA_CalcBaseAndBitshift+0x128>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d036      	beq.n	8003530 <DMA_CalcBaseAndBitshift+0xa8>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a3b      	ldr	r2, [pc, #236]	@ (80035b4 <DMA_CalcBaseAndBitshift+0x12c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d031      	beq.n	8003530 <DMA_CalcBaseAndBitshift+0xa8>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a39      	ldr	r2, [pc, #228]	@ (80035b8 <DMA_CalcBaseAndBitshift+0x130>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d02c      	beq.n	8003530 <DMA_CalcBaseAndBitshift+0xa8>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a38      	ldr	r2, [pc, #224]	@ (80035bc <DMA_CalcBaseAndBitshift+0x134>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d027      	beq.n	8003530 <DMA_CalcBaseAndBitshift+0xa8>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a36      	ldr	r2, [pc, #216]	@ (80035c0 <DMA_CalcBaseAndBitshift+0x138>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d022      	beq.n	8003530 <DMA_CalcBaseAndBitshift+0xa8>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a35      	ldr	r2, [pc, #212]	@ (80035c4 <DMA_CalcBaseAndBitshift+0x13c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d01d      	beq.n	8003530 <DMA_CalcBaseAndBitshift+0xa8>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a33      	ldr	r2, [pc, #204]	@ (80035c8 <DMA_CalcBaseAndBitshift+0x140>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d018      	beq.n	8003530 <DMA_CalcBaseAndBitshift+0xa8>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a32      	ldr	r2, [pc, #200]	@ (80035cc <DMA_CalcBaseAndBitshift+0x144>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d013      	beq.n	8003530 <DMA_CalcBaseAndBitshift+0xa8>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a30      	ldr	r2, [pc, #192]	@ (80035d0 <DMA_CalcBaseAndBitshift+0x148>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00e      	beq.n	8003530 <DMA_CalcBaseAndBitshift+0xa8>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a2f      	ldr	r2, [pc, #188]	@ (80035d4 <DMA_CalcBaseAndBitshift+0x14c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d009      	beq.n	8003530 <DMA_CalcBaseAndBitshift+0xa8>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a2d      	ldr	r2, [pc, #180]	@ (80035d8 <DMA_CalcBaseAndBitshift+0x150>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d004      	beq.n	8003530 <DMA_CalcBaseAndBitshift+0xa8>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a2c      	ldr	r2, [pc, #176]	@ (80035dc <DMA_CalcBaseAndBitshift+0x154>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d101      	bne.n	8003534 <DMA_CalcBaseAndBitshift+0xac>
 8003530:	2301      	movs	r3, #1
 8003532:	e000      	b.n	8003536 <DMA_CalcBaseAndBitshift+0xae>
 8003534:	2300      	movs	r3, #0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d024      	beq.n	8003584 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	b2db      	uxtb	r3, r3
 8003540:	3b10      	subs	r3, #16
 8003542:	4a27      	ldr	r2, [pc, #156]	@ (80035e0 <DMA_CalcBaseAndBitshift+0x158>)
 8003544:	fba2 2303 	umull	r2, r3, r2, r3
 8003548:	091b      	lsrs	r3, r3, #4
 800354a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	4a24      	ldr	r2, [pc, #144]	@ (80035e4 <DMA_CalcBaseAndBitshift+0x15c>)
 8003554:	5cd3      	ldrb	r3, [r2, r3]
 8003556:	461a      	mov	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b03      	cmp	r3, #3
 8003560:	d908      	bls.n	8003574 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	4b1f      	ldr	r3, [pc, #124]	@ (80035e8 <DMA_CalcBaseAndBitshift+0x160>)
 800356a:	4013      	ands	r3, r2
 800356c:	1d1a      	adds	r2, r3, #4
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	659a      	str	r2, [r3, #88]	@ 0x58
 8003572:	e00d      	b.n	8003590 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	4b1b      	ldr	r3, [pc, #108]	@ (80035e8 <DMA_CalcBaseAndBitshift+0x160>)
 800357c:	4013      	ands	r3, r2
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6593      	str	r3, [r2, #88]	@ 0x58
 8003582:	e005      	b.n	8003590 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	40020010 	.word	0x40020010
 80035a4:	40020028 	.word	0x40020028
 80035a8:	40020040 	.word	0x40020040
 80035ac:	40020058 	.word	0x40020058
 80035b0:	40020070 	.word	0x40020070
 80035b4:	40020088 	.word	0x40020088
 80035b8:	400200a0 	.word	0x400200a0
 80035bc:	400200b8 	.word	0x400200b8
 80035c0:	40020410 	.word	0x40020410
 80035c4:	40020428 	.word	0x40020428
 80035c8:	40020440 	.word	0x40020440
 80035cc:	40020458 	.word	0x40020458
 80035d0:	40020470 	.word	0x40020470
 80035d4:	40020488 	.word	0x40020488
 80035d8:	400204a0 	.word	0x400204a0
 80035dc:	400204b8 	.word	0x400204b8
 80035e0:	aaaaaaab 	.word	0xaaaaaaab
 80035e4:	080097a0 	.word	0x080097a0
 80035e8:	fffffc00 	.word	0xfffffc00

080035ec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d120      	bne.n	8003642 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003604:	2b03      	cmp	r3, #3
 8003606:	d858      	bhi.n	80036ba <DMA_CheckFifoParam+0xce>
 8003608:	a201      	add	r2, pc, #4	@ (adr r2, 8003610 <DMA_CheckFifoParam+0x24>)
 800360a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360e:	bf00      	nop
 8003610:	08003621 	.word	0x08003621
 8003614:	08003633 	.word	0x08003633
 8003618:	08003621 	.word	0x08003621
 800361c:	080036bb 	.word	0x080036bb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003624:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d048      	beq.n	80036be <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003630:	e045      	b.n	80036be <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003636:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800363a:	d142      	bne.n	80036c2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003640:	e03f      	b.n	80036c2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800364a:	d123      	bne.n	8003694 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003650:	2b03      	cmp	r3, #3
 8003652:	d838      	bhi.n	80036c6 <DMA_CheckFifoParam+0xda>
 8003654:	a201      	add	r2, pc, #4	@ (adr r2, 800365c <DMA_CheckFifoParam+0x70>)
 8003656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365a:	bf00      	nop
 800365c:	0800366d 	.word	0x0800366d
 8003660:	08003673 	.word	0x08003673
 8003664:	0800366d 	.word	0x0800366d
 8003668:	08003685 	.word	0x08003685
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	73fb      	strb	r3, [r7, #15]
        break;
 8003670:	e030      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003676:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d025      	beq.n	80036ca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003682:	e022      	b.n	80036ca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003688:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800368c:	d11f      	bne.n	80036ce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003692:	e01c      	b.n	80036ce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003698:	2b02      	cmp	r3, #2
 800369a:	d902      	bls.n	80036a2 <DMA_CheckFifoParam+0xb6>
 800369c:	2b03      	cmp	r3, #3
 800369e:	d003      	beq.n	80036a8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80036a0:	e018      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	73fb      	strb	r3, [r7, #15]
        break;
 80036a6:	e015      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00e      	beq.n	80036d2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
    break;
 80036b8:	e00b      	b.n	80036d2 <DMA_CheckFifoParam+0xe6>
        break;
 80036ba:	bf00      	nop
 80036bc:	e00a      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>
        break;
 80036be:	bf00      	nop
 80036c0:	e008      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>
        break;
 80036c2:	bf00      	nop
 80036c4:	e006      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>
        break;
 80036c6:	bf00      	nop
 80036c8:	e004      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>
        break;
 80036ca:	bf00      	nop
 80036cc:	e002      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>
        break;
 80036ce:	bf00      	nop
 80036d0:	e000      	b.n	80036d4 <DMA_CheckFifoParam+0xe8>
    break;
 80036d2:	bf00      	nop
    }
  }

  return status;
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop

080036e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a38      	ldr	r2, [pc, #224]	@ (80037d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d022      	beq.n	8003742 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a36      	ldr	r2, [pc, #216]	@ (80037dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d01d      	beq.n	8003742 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a35      	ldr	r2, [pc, #212]	@ (80037e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d018      	beq.n	8003742 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a33      	ldr	r2, [pc, #204]	@ (80037e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d013      	beq.n	8003742 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a32      	ldr	r2, [pc, #200]	@ (80037e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00e      	beq.n	8003742 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a30      	ldr	r2, [pc, #192]	@ (80037ec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d009      	beq.n	8003742 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a2f      	ldr	r2, [pc, #188]	@ (80037f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d004      	beq.n	8003742 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a2d      	ldr	r2, [pc, #180]	@ (80037f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d101      	bne.n	8003746 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003746:	2300      	movs	r3, #0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d01a      	beq.n	8003782 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	b2db      	uxtb	r3, r3
 8003752:	3b08      	subs	r3, #8
 8003754:	4a28      	ldr	r2, [pc, #160]	@ (80037f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003756:	fba2 2303 	umull	r2, r3, r2, r3
 800375a:	091b      	lsrs	r3, r3, #4
 800375c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4b26      	ldr	r3, [pc, #152]	@ (80037fc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	461a      	mov	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a24      	ldr	r2, [pc, #144]	@ (8003800 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003770:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	2201      	movs	r2, #1
 800377a:	409a      	lsls	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003780:	e024      	b.n	80037cc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	b2db      	uxtb	r3, r3
 8003788:	3b10      	subs	r3, #16
 800378a:	4a1e      	ldr	r2, [pc, #120]	@ (8003804 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800378c:	fba2 2303 	umull	r2, r3, r2, r3
 8003790:	091b      	lsrs	r3, r3, #4
 8003792:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	4a1c      	ldr	r2, [pc, #112]	@ (8003808 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d806      	bhi.n	80037aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4a1b      	ldr	r2, [pc, #108]	@ (800380c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d902      	bls.n	80037aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	3308      	adds	r3, #8
 80037a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	4b18      	ldr	r3, [pc, #96]	@ (8003810 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	461a      	mov	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a16      	ldr	r2, [pc, #88]	@ (8003814 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80037bc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f003 031f 	and.w	r3, r3, #31
 80037c4:	2201      	movs	r2, #1
 80037c6:	409a      	lsls	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80037cc:	bf00      	nop
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	58025408 	.word	0x58025408
 80037dc:	5802541c 	.word	0x5802541c
 80037e0:	58025430 	.word	0x58025430
 80037e4:	58025444 	.word	0x58025444
 80037e8:	58025458 	.word	0x58025458
 80037ec:	5802546c 	.word	0x5802546c
 80037f0:	58025480 	.word	0x58025480
 80037f4:	58025494 	.word	0x58025494
 80037f8:	cccccccd 	.word	0xcccccccd
 80037fc:	16009600 	.word	0x16009600
 8003800:	58025880 	.word	0x58025880
 8003804:	aaaaaaab 	.word	0xaaaaaaab
 8003808:	400204b8 	.word	0x400204b8
 800380c:	4002040f 	.word	0x4002040f
 8003810:	10008200 	.word	0x10008200
 8003814:	40020880 	.word	0x40020880

08003818 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d04a      	beq.n	80038c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2b08      	cmp	r3, #8
 8003832:	d847      	bhi.n	80038c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a25      	ldr	r2, [pc, #148]	@ (80038d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d022      	beq.n	8003884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a24      	ldr	r2, [pc, #144]	@ (80038d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d01d      	beq.n	8003884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a22      	ldr	r2, [pc, #136]	@ (80038d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d018      	beq.n	8003884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a21      	ldr	r2, [pc, #132]	@ (80038dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d013      	beq.n	8003884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1f      	ldr	r2, [pc, #124]	@ (80038e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00e      	beq.n	8003884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a1e      	ldr	r2, [pc, #120]	@ (80038e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d009      	beq.n	8003884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a1c      	ldr	r2, [pc, #112]	@ (80038e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d004      	beq.n	8003884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a1b      	ldr	r2, [pc, #108]	@ (80038ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d101      	bne.n	8003888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003884:	2301      	movs	r3, #1
 8003886:	e000      	b.n	800388a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003888:	2300      	movs	r3, #0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	4b17      	ldr	r3, [pc, #92]	@ (80038f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	461a      	mov	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a15      	ldr	r2, [pc, #84]	@ (80038f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80038a0:	671a      	str	r2, [r3, #112]	@ 0x70
 80038a2:	e009      	b.n	80038b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	4b14      	ldr	r3, [pc, #80]	@ (80038f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	461a      	mov	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a11      	ldr	r2, [pc, #68]	@ (80038fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80038b6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	2201      	movs	r2, #1
 80038be:	409a      	lsls	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80038c4:	bf00      	nop
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	58025408 	.word	0x58025408
 80038d4:	5802541c 	.word	0x5802541c
 80038d8:	58025430 	.word	0x58025430
 80038dc:	58025444 	.word	0x58025444
 80038e0:	58025458 	.word	0x58025458
 80038e4:	5802546c 	.word	0x5802546c
 80038e8:	58025480 	.word	0x58025480
 80038ec:	58025494 	.word	0x58025494
 80038f0:	1600963f 	.word	0x1600963f
 80038f4:	58025940 	.word	0x58025940
 80038f8:	1000823f 	.word	0x1000823f
 80038fc:	40020940 	.word	0x40020940

08003900 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003900:	b480      	push	{r7}
 8003902:	b089      	sub	sp, #36	@ 0x24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800390a:	2300      	movs	r3, #0
 800390c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800390e:	4b89      	ldr	r3, [pc, #548]	@ (8003b34 <HAL_GPIO_Init+0x234>)
 8003910:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003912:	e194      	b.n	8003c3e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	2101      	movs	r1, #1
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	fa01 f303 	lsl.w	r3, r1, r3
 8003920:	4013      	ands	r3, r2
 8003922:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 8186 	beq.w	8003c38 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	2b01      	cmp	r3, #1
 8003936:	d005      	beq.n	8003944 <HAL_GPIO_Init+0x44>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f003 0303 	and.w	r3, r3, #3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d130      	bne.n	80039a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	2203      	movs	r2, #3
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	43db      	mvns	r3, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4013      	ands	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800397a:	2201      	movs	r2, #1
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	43db      	mvns	r3, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4013      	ands	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	091b      	lsrs	r3, r3, #4
 8003990:	f003 0201 	and.w	r2, r3, #1
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	4313      	orrs	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d017      	beq.n	80039e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	2203      	movs	r2, #3
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43db      	mvns	r3, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4013      	ands	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	4313      	orrs	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d123      	bne.n	8003a36 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	08da      	lsrs	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3208      	adds	r2, #8
 80039f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	220f      	movs	r2, #15
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	691a      	ldr	r2, [r3, #16]
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	08da      	lsrs	r2, r3, #3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3208      	adds	r2, #8
 8003a30:	69b9      	ldr	r1, [r7, #24]
 8003a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	2203      	movs	r2, #3
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	43db      	mvns	r3, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f003 0203 	and.w	r2, r3, #3
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 80e0 	beq.w	8003c38 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a78:	4b2f      	ldr	r3, [pc, #188]	@ (8003b38 <HAL_GPIO_Init+0x238>)
 8003a7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a7e:	4a2e      	ldr	r2, [pc, #184]	@ (8003b38 <HAL_GPIO_Init+0x238>)
 8003a80:	f043 0302 	orr.w	r3, r3, #2
 8003a84:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003a88:	4b2b      	ldr	r3, [pc, #172]	@ (8003b38 <HAL_GPIO_Init+0x238>)
 8003a8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a96:	4a29      	ldr	r2, [pc, #164]	@ (8003b3c <HAL_GPIO_Init+0x23c>)
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	089b      	lsrs	r3, r3, #2
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	220f      	movs	r2, #15
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a20      	ldr	r2, [pc, #128]	@ (8003b40 <HAL_GPIO_Init+0x240>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d052      	beq.n	8003b68 <HAL_GPIO_Init+0x268>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a1f      	ldr	r2, [pc, #124]	@ (8003b44 <HAL_GPIO_Init+0x244>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d031      	beq.n	8003b2e <HAL_GPIO_Init+0x22e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a1e      	ldr	r2, [pc, #120]	@ (8003b48 <HAL_GPIO_Init+0x248>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d02b      	beq.n	8003b2a <HAL_GPIO_Init+0x22a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b4c <HAL_GPIO_Init+0x24c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d025      	beq.n	8003b26 <HAL_GPIO_Init+0x226>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a1c      	ldr	r2, [pc, #112]	@ (8003b50 <HAL_GPIO_Init+0x250>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d01f      	beq.n	8003b22 <HAL_GPIO_Init+0x222>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8003b54 <HAL_GPIO_Init+0x254>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d019      	beq.n	8003b1e <HAL_GPIO_Init+0x21e>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a1a      	ldr	r2, [pc, #104]	@ (8003b58 <HAL_GPIO_Init+0x258>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d013      	beq.n	8003b1a <HAL_GPIO_Init+0x21a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a19      	ldr	r2, [pc, #100]	@ (8003b5c <HAL_GPIO_Init+0x25c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00d      	beq.n	8003b16 <HAL_GPIO_Init+0x216>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a18      	ldr	r2, [pc, #96]	@ (8003b60 <HAL_GPIO_Init+0x260>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d007      	beq.n	8003b12 <HAL_GPIO_Init+0x212>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a17      	ldr	r2, [pc, #92]	@ (8003b64 <HAL_GPIO_Init+0x264>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d101      	bne.n	8003b0e <HAL_GPIO_Init+0x20e>
 8003b0a:	2309      	movs	r3, #9
 8003b0c:	e02d      	b.n	8003b6a <HAL_GPIO_Init+0x26a>
 8003b0e:	230a      	movs	r3, #10
 8003b10:	e02b      	b.n	8003b6a <HAL_GPIO_Init+0x26a>
 8003b12:	2308      	movs	r3, #8
 8003b14:	e029      	b.n	8003b6a <HAL_GPIO_Init+0x26a>
 8003b16:	2307      	movs	r3, #7
 8003b18:	e027      	b.n	8003b6a <HAL_GPIO_Init+0x26a>
 8003b1a:	2306      	movs	r3, #6
 8003b1c:	e025      	b.n	8003b6a <HAL_GPIO_Init+0x26a>
 8003b1e:	2305      	movs	r3, #5
 8003b20:	e023      	b.n	8003b6a <HAL_GPIO_Init+0x26a>
 8003b22:	2304      	movs	r3, #4
 8003b24:	e021      	b.n	8003b6a <HAL_GPIO_Init+0x26a>
 8003b26:	2303      	movs	r3, #3
 8003b28:	e01f      	b.n	8003b6a <HAL_GPIO_Init+0x26a>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e01d      	b.n	8003b6a <HAL_GPIO_Init+0x26a>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e01b      	b.n	8003b6a <HAL_GPIO_Init+0x26a>
 8003b32:	bf00      	nop
 8003b34:	58000080 	.word	0x58000080
 8003b38:	58024400 	.word	0x58024400
 8003b3c:	58000400 	.word	0x58000400
 8003b40:	58020000 	.word	0x58020000
 8003b44:	58020400 	.word	0x58020400
 8003b48:	58020800 	.word	0x58020800
 8003b4c:	58020c00 	.word	0x58020c00
 8003b50:	58021000 	.word	0x58021000
 8003b54:	58021400 	.word	0x58021400
 8003b58:	58021800 	.word	0x58021800
 8003b5c:	58021c00 	.word	0x58021c00
 8003b60:	58022000 	.word	0x58022000
 8003b64:	58022400 	.word	0x58022400
 8003b68:	2300      	movs	r3, #0
 8003b6a:	69fa      	ldr	r2, [r7, #28]
 8003b6c:	f002 0203 	and.w	r2, r2, #3
 8003b70:	0092      	lsls	r2, r2, #2
 8003b72:	4093      	lsls	r3, r2
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b7a:	4938      	ldr	r1, [pc, #224]	@ (8003c5c <HAL_GPIO_Init+0x35c>)
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	089b      	lsrs	r3, r3, #2
 8003b80:	3302      	adds	r3, #2
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	43db      	mvns	r3, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4013      	ands	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003bae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003bb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003bdc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	43db      	mvns	r3, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	fa22 f303 	lsr.w	r3, r2, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f47f ae63 	bne.w	8003914 <HAL_GPIO_Init+0x14>
  }
}
 8003c4e:	bf00      	nop
 8003c50:	bf00      	nop
 8003c52:	3724      	adds	r7, #36	@ 0x24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	58000400 	.word	0x58000400

08003c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	807b      	strh	r3, [r7, #2]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c70:	787b      	ldrb	r3, [r7, #1]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c76:	887a      	ldrh	r2, [r7, #2]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003c7c:	e003      	b.n	8003c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c7e:	887b      	ldrh	r3, [r7, #2]
 8003c80:	041a      	lsls	r2, r3, #16
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	619a      	str	r2, [r3, #24]
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b085      	sub	sp, #20
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ca4:	887a      	ldrh	r2, [r7, #2]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	041a      	lsls	r2, r3, #16
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	43d9      	mvns	r1, r3
 8003cb0:	887b      	ldrh	r3, [r7, #2]
 8003cb2:	400b      	ands	r3, r1
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	619a      	str	r2, [r3, #24]
}
 8003cba:	bf00      	nop
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
	...

08003cc8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003cd0:	4b19      	ldr	r3, [pc, #100]	@ (8003d38 <HAL_PWREx_ConfigSupply+0x70>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d00a      	beq.n	8003cf2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003cdc:	4b16      	ldr	r3, [pc, #88]	@ (8003d38 <HAL_PWREx_ConfigSupply+0x70>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d001      	beq.n	8003cee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e01f      	b.n	8003d2e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	e01d      	b.n	8003d2e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003cf2:	4b11      	ldr	r3, [pc, #68]	@ (8003d38 <HAL_PWREx_ConfigSupply+0x70>)
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f023 0207 	bic.w	r2, r3, #7
 8003cfa:	490f      	ldr	r1, [pc, #60]	@ (8003d38 <HAL_PWREx_ConfigSupply+0x70>)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003d02:	f7fd fa37 	bl	8001174 <HAL_GetTick>
 8003d06:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d08:	e009      	b.n	8003d1e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d0a:	f7fd fa33 	bl	8001174 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d18:	d901      	bls.n	8003d1e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e007      	b.n	8003d2e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d1e:	4b06      	ldr	r3, [pc, #24]	@ (8003d38 <HAL_PWREx_ConfigSupply+0x70>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d2a:	d1ee      	bne.n	8003d0a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	58024800 	.word	0x58024800

08003d3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08c      	sub	sp, #48	@ 0x30
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d102      	bne.n	8003d50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	f000 bc48 	b.w	80045e0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 8088 	beq.w	8003e6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d5e:	4b99      	ldr	r3, [pc, #612]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d68:	4b96      	ldr	r3, [pc, #600]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d70:	2b10      	cmp	r3, #16
 8003d72:	d007      	beq.n	8003d84 <HAL_RCC_OscConfig+0x48>
 8003d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d76:	2b18      	cmp	r3, #24
 8003d78:	d111      	bne.n	8003d9e <HAL_RCC_OscConfig+0x62>
 8003d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d10c      	bne.n	8003d9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d84:	4b8f      	ldr	r3, [pc, #572]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d06d      	beq.n	8003e6c <HAL_RCC_OscConfig+0x130>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d169      	bne.n	8003e6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	f000 bc21 	b.w	80045e0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003da6:	d106      	bne.n	8003db6 <HAL_RCC_OscConfig+0x7a>
 8003da8:	4b86      	ldr	r3, [pc, #536]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a85      	ldr	r2, [pc, #532]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003dae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	e02e      	b.n	8003e14 <HAL_RCC_OscConfig+0xd8>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10c      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x9c>
 8003dbe:	4b81      	ldr	r3, [pc, #516]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a80      	ldr	r2, [pc, #512]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003dc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	4b7e      	ldr	r3, [pc, #504]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a7d      	ldr	r2, [pc, #500]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003dd0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	e01d      	b.n	8003e14 <HAL_RCC_OscConfig+0xd8>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003de0:	d10c      	bne.n	8003dfc <HAL_RCC_OscConfig+0xc0>
 8003de2:	4b78      	ldr	r3, [pc, #480]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a77      	ldr	r2, [pc, #476]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003de8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	4b75      	ldr	r3, [pc, #468]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a74      	ldr	r2, [pc, #464]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003df4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	e00b      	b.n	8003e14 <HAL_RCC_OscConfig+0xd8>
 8003dfc:	4b71      	ldr	r3, [pc, #452]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a70      	ldr	r2, [pc, #448]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003e02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	4b6e      	ldr	r3, [pc, #440]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a6d      	ldr	r2, [pc, #436]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003e0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d013      	beq.n	8003e44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1c:	f7fd f9aa 	bl	8001174 <HAL_GetTick>
 8003e20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e24:	f7fd f9a6 	bl	8001174 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b64      	cmp	r3, #100	@ 0x64
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e3d4      	b.n	80045e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e36:	4b63      	ldr	r3, [pc, #396]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0f0      	beq.n	8003e24 <HAL_RCC_OscConfig+0xe8>
 8003e42:	e014      	b.n	8003e6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e44:	f7fd f996 	bl	8001174 <HAL_GetTick>
 8003e48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e4c:	f7fd f992 	bl	8001174 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b64      	cmp	r3, #100	@ 0x64
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e3c0      	b.n	80045e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e5e:	4b59      	ldr	r3, [pc, #356]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f0      	bne.n	8003e4c <HAL_RCC_OscConfig+0x110>
 8003e6a:	e000      	b.n	8003e6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 80ca 	beq.w	8004010 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e7c:	4b51      	ldr	r3, [pc, #324]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e84:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e86:	4b4f      	ldr	r3, [pc, #316]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d007      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x166>
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	2b18      	cmp	r3, #24
 8003e96:	d156      	bne.n	8003f46 <HAL_RCC_OscConfig+0x20a>
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d151      	bne.n	8003f46 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ea2:	4b48      	ldr	r3, [pc, #288]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d005      	beq.n	8003eba <HAL_RCC_OscConfig+0x17e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e392      	b.n	80045e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003eba:	4b42      	ldr	r3, [pc, #264]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 0219 	bic.w	r2, r3, #25
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	493f      	ldr	r1, [pc, #252]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ecc:	f7fd f952 	bl	8001174 <HAL_GetTick>
 8003ed0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed4:	f7fd f94e 	bl	8001174 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e37c      	b.n	80045e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ee6:	4b37      	ldr	r3, [pc, #220]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef2:	f7fd f94b 	bl	800118c <HAL_GetREVID>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d817      	bhi.n	8003f30 <HAL_RCC_OscConfig+0x1f4>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	2b40      	cmp	r3, #64	@ 0x40
 8003f06:	d108      	bne.n	8003f1a <HAL_RCC_OscConfig+0x1de>
 8003f08:	4b2e      	ldr	r3, [pc, #184]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003f10:	4a2c      	ldr	r2, [pc, #176]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003f12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f16:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f18:	e07a      	b.n	8004010 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f1a:	4b2a      	ldr	r3, [pc, #168]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	031b      	lsls	r3, r3, #12
 8003f28:	4926      	ldr	r1, [pc, #152]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f2e:	e06f      	b.n	8004010 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f30:	4b24      	ldr	r3, [pc, #144]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	061b      	lsls	r3, r3, #24
 8003f3e:	4921      	ldr	r1, [pc, #132]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f44:	e064      	b.n	8004010 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d047      	beq.n	8003fde <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f023 0219 	bic.w	r2, r3, #25
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	491a      	ldr	r1, [pc, #104]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f60:	f7fd f908 	bl	8001174 <HAL_GetTick>
 8003f64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f68:	f7fd f904 	bl	8001174 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e332      	b.n	80045e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f7a:	4b12      	ldr	r3, [pc, #72]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f86:	f7fd f901 	bl	800118c <HAL_GetREVID>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d819      	bhi.n	8003fc8 <HAL_RCC_OscConfig+0x28c>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	2b40      	cmp	r3, #64	@ 0x40
 8003f9a:	d108      	bne.n	8003fae <HAL_RCC_OscConfig+0x272>
 8003f9c:	4b09      	ldr	r3, [pc, #36]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003fa4:	4a07      	ldr	r2, [pc, #28]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003fa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003faa:	6053      	str	r3, [r2, #4]
 8003fac:	e030      	b.n	8004010 <HAL_RCC_OscConfig+0x2d4>
 8003fae:	4b05      	ldr	r3, [pc, #20]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	031b      	lsls	r3, r3, #12
 8003fbc:	4901      	ldr	r1, [pc, #4]	@ (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	604b      	str	r3, [r1, #4]
 8003fc2:	e025      	b.n	8004010 <HAL_RCC_OscConfig+0x2d4>
 8003fc4:	58024400 	.word	0x58024400
 8003fc8:	4b9a      	ldr	r3, [pc, #616]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	061b      	lsls	r3, r3, #24
 8003fd6:	4997      	ldr	r1, [pc, #604]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	604b      	str	r3, [r1, #4]
 8003fdc:	e018      	b.n	8004010 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fde:	4b95      	ldr	r3, [pc, #596]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a94      	ldr	r2, [pc, #592]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8003fe4:	f023 0301 	bic.w	r3, r3, #1
 8003fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fea:	f7fd f8c3 	bl	8001174 <HAL_GetTick>
 8003fee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ff2:	f7fd f8bf 	bl	8001174 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e2ed      	b.n	80045e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004004:	4b8b      	ldr	r3, [pc, #556]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1f0      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 80a9 	beq.w	8004170 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800401e:	4b85      	ldr	r3, [pc, #532]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004026:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004028:	4b82      	ldr	r3, [pc, #520]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 800402a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2b08      	cmp	r3, #8
 8004032:	d007      	beq.n	8004044 <HAL_RCC_OscConfig+0x308>
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	2b18      	cmp	r3, #24
 8004038:	d13a      	bne.n	80040b0 <HAL_RCC_OscConfig+0x374>
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	2b01      	cmp	r3, #1
 8004042:	d135      	bne.n	80040b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004044:	4b7b      	ldr	r3, [pc, #492]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <HAL_RCC_OscConfig+0x320>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	2b80      	cmp	r3, #128	@ 0x80
 8004056:	d001      	beq.n	800405c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e2c1      	b.n	80045e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800405c:	f7fd f896 	bl	800118c <HAL_GetREVID>
 8004060:	4603      	mov	r3, r0
 8004062:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004066:	4293      	cmp	r3, r2
 8004068:	d817      	bhi.n	800409a <HAL_RCC_OscConfig+0x35e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	2b20      	cmp	r3, #32
 8004070:	d108      	bne.n	8004084 <HAL_RCC_OscConfig+0x348>
 8004072:	4b70      	ldr	r3, [pc, #448]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800407a:	4a6e      	ldr	r2, [pc, #440]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 800407c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004080:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004082:	e075      	b.n	8004170 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004084:	4b6b      	ldr	r3, [pc, #428]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	069b      	lsls	r3, r3, #26
 8004092:	4968      	ldr	r1, [pc, #416]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004094:	4313      	orrs	r3, r2
 8004096:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004098:	e06a      	b.n	8004170 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800409a:	4b66      	ldr	r3, [pc, #408]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	061b      	lsls	r3, r3, #24
 80040a8:	4962      	ldr	r1, [pc, #392]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040ae:	e05f      	b.n	8004170 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d042      	beq.n	800413e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80040b8:	4b5e      	ldr	r3, [pc, #376]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a5d      	ldr	r2, [pc, #372]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 80040be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c4:	f7fd f856 	bl	8001174 <HAL_GetTick>
 80040c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80040cc:	f7fd f852 	bl	8001174 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e280      	b.n	80045e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040de:	4b55      	ldr	r3, [pc, #340]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0f0      	beq.n	80040cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040ea:	f7fd f84f 	bl	800118c <HAL_GetREVID>
 80040ee:	4603      	mov	r3, r0
 80040f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d817      	bhi.n	8004128 <HAL_RCC_OscConfig+0x3ec>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	2b20      	cmp	r3, #32
 80040fe:	d108      	bne.n	8004112 <HAL_RCC_OscConfig+0x3d6>
 8004100:	4b4c      	ldr	r3, [pc, #304]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004108:	4a4a      	ldr	r2, [pc, #296]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 800410a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800410e:	6053      	str	r3, [r2, #4]
 8004110:	e02e      	b.n	8004170 <HAL_RCC_OscConfig+0x434>
 8004112:	4b48      	ldr	r3, [pc, #288]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	069b      	lsls	r3, r3, #26
 8004120:	4944      	ldr	r1, [pc, #272]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004122:	4313      	orrs	r3, r2
 8004124:	604b      	str	r3, [r1, #4]
 8004126:	e023      	b.n	8004170 <HAL_RCC_OscConfig+0x434>
 8004128:	4b42      	ldr	r3, [pc, #264]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	061b      	lsls	r3, r3, #24
 8004136:	493f      	ldr	r1, [pc, #252]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004138:	4313      	orrs	r3, r2
 800413a:	60cb      	str	r3, [r1, #12]
 800413c:	e018      	b.n	8004170 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800413e:	4b3d      	ldr	r3, [pc, #244]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a3c      	ldr	r2, [pc, #240]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004144:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414a:	f7fd f813 	bl	8001174 <HAL_GetTick>
 800414e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004152:	f7fd f80f 	bl	8001174 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e23d      	b.n	80045e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004164:	4b33      	ldr	r3, [pc, #204]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1f0      	bne.n	8004152 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	2b00      	cmp	r3, #0
 800417a:	d036      	beq.n	80041ea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d019      	beq.n	80041b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004184:	4b2b      	ldr	r3, [pc, #172]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004186:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004188:	4a2a      	ldr	r2, [pc, #168]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 800418a:	f043 0301 	orr.w	r3, r3, #1
 800418e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004190:	f7fc fff0 	bl	8001174 <HAL_GetTick>
 8004194:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004198:	f7fc ffec 	bl	8001174 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e21a      	b.n	80045e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041aa:	4b22      	ldr	r3, [pc, #136]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 80041ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0f0      	beq.n	8004198 <HAL_RCC_OscConfig+0x45c>
 80041b6:	e018      	b.n	80041ea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 80041ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 80041be:	f023 0301 	bic.w	r3, r3, #1
 80041c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c4:	f7fc ffd6 	bl	8001174 <HAL_GetTick>
 80041c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041cc:	f7fc ffd2 	bl	8001174 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e200      	b.n	80045e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041de:	4b15      	ldr	r3, [pc, #84]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 80041e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1f0      	bne.n	80041cc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d039      	beq.n	800426a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d01c      	beq.n	8004238 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a0c      	ldr	r2, [pc, #48]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004204:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004208:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800420a:	f7fc ffb3 	bl	8001174 <HAL_GetTick>
 800420e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004212:	f7fc ffaf 	bl	8001174 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e1dd      	b.n	80045e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004224:	4b03      	ldr	r3, [pc, #12]	@ (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0f0      	beq.n	8004212 <HAL_RCC_OscConfig+0x4d6>
 8004230:	e01b      	b.n	800426a <HAL_RCC_OscConfig+0x52e>
 8004232:	bf00      	nop
 8004234:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004238:	4b9b      	ldr	r3, [pc, #620]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a9a      	ldr	r2, [pc, #616]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 800423e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004242:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004244:	f7fc ff96 	bl	8001174 <HAL_GetTick>
 8004248:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800424c:	f7fc ff92 	bl	8001174 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e1c0      	b.n	80045e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800425e:	4b92      	ldr	r3, [pc, #584]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 8081 	beq.w	800437a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004278:	4b8c      	ldr	r3, [pc, #560]	@ (80044ac <HAL_RCC_OscConfig+0x770>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a8b      	ldr	r2, [pc, #556]	@ (80044ac <HAL_RCC_OscConfig+0x770>)
 800427e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004282:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004284:	f7fc ff76 	bl	8001174 <HAL_GetTick>
 8004288:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800428c:	f7fc ff72 	bl	8001174 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b64      	cmp	r3, #100	@ 0x64
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e1a0      	b.n	80045e0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800429e:	4b83      	ldr	r3, [pc, #524]	@ (80044ac <HAL_RCC_OscConfig+0x770>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f0      	beq.n	800428c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d106      	bne.n	80042c0 <HAL_RCC_OscConfig+0x584>
 80042b2:	4b7d      	ldr	r3, [pc, #500]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b6:	4a7c      	ldr	r2, [pc, #496]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80042b8:	f043 0301 	orr.w	r3, r3, #1
 80042bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80042be:	e02d      	b.n	800431c <HAL_RCC_OscConfig+0x5e0>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10c      	bne.n	80042e2 <HAL_RCC_OscConfig+0x5a6>
 80042c8:	4b77      	ldr	r3, [pc, #476]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80042ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042cc:	4a76      	ldr	r2, [pc, #472]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80042ce:	f023 0301 	bic.w	r3, r3, #1
 80042d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042d4:	4b74      	ldr	r3, [pc, #464]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d8:	4a73      	ldr	r2, [pc, #460]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80042da:	f023 0304 	bic.w	r3, r3, #4
 80042de:	6713      	str	r3, [r2, #112]	@ 0x70
 80042e0:	e01c      	b.n	800431c <HAL_RCC_OscConfig+0x5e0>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b05      	cmp	r3, #5
 80042e8:	d10c      	bne.n	8004304 <HAL_RCC_OscConfig+0x5c8>
 80042ea:	4b6f      	ldr	r3, [pc, #444]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80042ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ee:	4a6e      	ldr	r2, [pc, #440]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80042f0:	f043 0304 	orr.w	r3, r3, #4
 80042f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042f6:	4b6c      	ldr	r3, [pc, #432]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80042f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042fa:	4a6b      	ldr	r2, [pc, #428]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	6713      	str	r3, [r2, #112]	@ 0x70
 8004302:	e00b      	b.n	800431c <HAL_RCC_OscConfig+0x5e0>
 8004304:	4b68      	ldr	r3, [pc, #416]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004308:	4a67      	ldr	r2, [pc, #412]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 800430a:	f023 0301 	bic.w	r3, r3, #1
 800430e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004310:	4b65      	ldr	r3, [pc, #404]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004314:	4a64      	ldr	r2, [pc, #400]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004316:	f023 0304 	bic.w	r3, r3, #4
 800431a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d015      	beq.n	8004350 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004324:	f7fc ff26 	bl	8001174 <HAL_GetTick>
 8004328:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800432a:	e00a      	b.n	8004342 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800432c:	f7fc ff22 	bl	8001174 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800433a:	4293      	cmp	r3, r2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e14e      	b.n	80045e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004342:	4b59      	ldr	r3, [pc, #356]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0ee      	beq.n	800432c <HAL_RCC_OscConfig+0x5f0>
 800434e:	e014      	b.n	800437a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004350:	f7fc ff10 	bl	8001174 <HAL_GetTick>
 8004354:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004356:	e00a      	b.n	800436e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004358:	f7fc ff0c 	bl	8001174 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004366:	4293      	cmp	r3, r2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e138      	b.n	80045e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800436e:	4b4e      	ldr	r3, [pc, #312]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1ee      	bne.n	8004358 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 812d 	beq.w	80045de <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004384:	4b48      	ldr	r3, [pc, #288]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800438c:	2b18      	cmp	r3, #24
 800438e:	f000 80bd 	beq.w	800450c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004396:	2b02      	cmp	r3, #2
 8004398:	f040 809e 	bne.w	80044d8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439c:	4b42      	ldr	r3, [pc, #264]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a41      	ldr	r2, [pc, #260]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80043a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a8:	f7fc fee4 	bl	8001174 <HAL_GetTick>
 80043ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b0:	f7fc fee0 	bl	8001174 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e10e      	b.n	80045e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043c2:	4b39      	ldr	r3, [pc, #228]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f0      	bne.n	80043b0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043ce:	4b36      	ldr	r3, [pc, #216]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80043d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80043d2:	4b37      	ldr	r3, [pc, #220]	@ (80044b0 <HAL_RCC_OscConfig+0x774>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80043de:	0112      	lsls	r2, r2, #4
 80043e0:	430a      	orrs	r2, r1
 80043e2:	4931      	ldr	r1, [pc, #196]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ec:	3b01      	subs	r3, #1
 80043ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043f6:	3b01      	subs	r3, #1
 80043f8:	025b      	lsls	r3, r3, #9
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004402:	3b01      	subs	r3, #1
 8004404:	041b      	lsls	r3, r3, #16
 8004406:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004410:	3b01      	subs	r3, #1
 8004412:	061b      	lsls	r3, r3, #24
 8004414:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004418:	4923      	ldr	r1, [pc, #140]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 800441a:	4313      	orrs	r3, r2
 800441c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800441e:	4b22      	ldr	r3, [pc, #136]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004422:	4a21      	ldr	r2, [pc, #132]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004424:	f023 0301 	bic.w	r3, r3, #1
 8004428:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800442a:	4b1f      	ldr	r3, [pc, #124]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 800442c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800442e:	4b21      	ldr	r3, [pc, #132]	@ (80044b4 <HAL_RCC_OscConfig+0x778>)
 8004430:	4013      	ands	r3, r2
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004436:	00d2      	lsls	r2, r2, #3
 8004438:	491b      	ldr	r1, [pc, #108]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 800443a:	4313      	orrs	r3, r2
 800443c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800443e:	4b1a      	ldr	r3, [pc, #104]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004442:	f023 020c 	bic.w	r2, r3, #12
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444a:	4917      	ldr	r1, [pc, #92]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 800444c:	4313      	orrs	r3, r2
 800444e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004450:	4b15      	ldr	r3, [pc, #84]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004454:	f023 0202 	bic.w	r2, r3, #2
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445c:	4912      	ldr	r1, [pc, #72]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 800445e:	4313      	orrs	r3, r2
 8004460:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004462:	4b11      	ldr	r3, [pc, #68]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004466:	4a10      	ldr	r2, [pc, #64]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800446c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800446e:	4b0e      	ldr	r3, [pc, #56]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004472:	4a0d      	ldr	r2, [pc, #52]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004474:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004478:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800447a:	4b0b      	ldr	r3, [pc, #44]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 800447c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447e:	4a0a      	ldr	r2, [pc, #40]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004480:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004484:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004486:	4b08      	ldr	r3, [pc, #32]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448a:	4a07      	ldr	r2, [pc, #28]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 800448c:	f043 0301 	orr.w	r3, r3, #1
 8004490:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004492:	4b05      	ldr	r3, [pc, #20]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a04      	ldr	r2, [pc, #16]	@ (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004498:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800449c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449e:	f7fc fe69 	bl	8001174 <HAL_GetTick>
 80044a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044a4:	e011      	b.n	80044ca <HAL_RCC_OscConfig+0x78e>
 80044a6:	bf00      	nop
 80044a8:	58024400 	.word	0x58024400
 80044ac:	58024800 	.word	0x58024800
 80044b0:	fffffc0c 	.word	0xfffffc0c
 80044b4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b8:	f7fc fe5c 	bl	8001174 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e08a      	b.n	80045e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044ca:	4b47      	ldr	r3, [pc, #284]	@ (80045e8 <HAL_RCC_OscConfig+0x8ac>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCC_OscConfig+0x77c>
 80044d6:	e082      	b.n	80045de <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d8:	4b43      	ldr	r3, [pc, #268]	@ (80045e8 <HAL_RCC_OscConfig+0x8ac>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a42      	ldr	r2, [pc, #264]	@ (80045e8 <HAL_RCC_OscConfig+0x8ac>)
 80044de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e4:	f7fc fe46 	bl	8001174 <HAL_GetTick>
 80044e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ec:	f7fc fe42 	bl	8001174 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e070      	b.n	80045e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044fe:	4b3a      	ldr	r3, [pc, #232]	@ (80045e8 <HAL_RCC_OscConfig+0x8ac>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f0      	bne.n	80044ec <HAL_RCC_OscConfig+0x7b0>
 800450a:	e068      	b.n	80045de <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800450c:	4b36      	ldr	r3, [pc, #216]	@ (80045e8 <HAL_RCC_OscConfig+0x8ac>)
 800450e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004510:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004512:	4b35      	ldr	r3, [pc, #212]	@ (80045e8 <HAL_RCC_OscConfig+0x8ac>)
 8004514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004516:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451c:	2b01      	cmp	r3, #1
 800451e:	d031      	beq.n	8004584 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f003 0203 	and.w	r2, r3, #3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800452a:	429a      	cmp	r2, r3
 800452c:	d12a      	bne.n	8004584 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	091b      	lsrs	r3, r3, #4
 8004532:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453a:	429a      	cmp	r2, r3
 800453c:	d122      	bne.n	8004584 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004548:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800454a:	429a      	cmp	r2, r3
 800454c:	d11a      	bne.n	8004584 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	0a5b      	lsrs	r3, r3, #9
 8004552:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800455a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800455c:	429a      	cmp	r2, r3
 800455e:	d111      	bne.n	8004584 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	0c1b      	lsrs	r3, r3, #16
 8004564:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800456e:	429a      	cmp	r2, r3
 8004570:	d108      	bne.n	8004584 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	0e1b      	lsrs	r3, r3, #24
 8004576:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800457e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004580:	429a      	cmp	r2, r3
 8004582:	d001      	beq.n	8004588 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e02b      	b.n	80045e0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004588:	4b17      	ldr	r3, [pc, #92]	@ (80045e8 <HAL_RCC_OscConfig+0x8ac>)
 800458a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800458c:	08db      	lsrs	r3, r3, #3
 800458e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004592:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	429a      	cmp	r2, r3
 800459c:	d01f      	beq.n	80045de <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800459e:	4b12      	ldr	r3, [pc, #72]	@ (80045e8 <HAL_RCC_OscConfig+0x8ac>)
 80045a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a2:	4a11      	ldr	r2, [pc, #68]	@ (80045e8 <HAL_RCC_OscConfig+0x8ac>)
 80045a4:	f023 0301 	bic.w	r3, r3, #1
 80045a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045aa:	f7fc fde3 	bl	8001174 <HAL_GetTick>
 80045ae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80045b0:	bf00      	nop
 80045b2:	f7fc fddf 	bl	8001174 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d0f9      	beq.n	80045b2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80045be:	4b0a      	ldr	r3, [pc, #40]	@ (80045e8 <HAL_RCC_OscConfig+0x8ac>)
 80045c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045c2:	4b0a      	ldr	r3, [pc, #40]	@ (80045ec <HAL_RCC_OscConfig+0x8b0>)
 80045c4:	4013      	ands	r3, r2
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80045ca:	00d2      	lsls	r2, r2, #3
 80045cc:	4906      	ldr	r1, [pc, #24]	@ (80045e8 <HAL_RCC_OscConfig+0x8ac>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80045d2:	4b05      	ldr	r3, [pc, #20]	@ (80045e8 <HAL_RCC_OscConfig+0x8ac>)
 80045d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d6:	4a04      	ldr	r2, [pc, #16]	@ (80045e8 <HAL_RCC_OscConfig+0x8ac>)
 80045d8:	f043 0301 	orr.w	r3, r3, #1
 80045dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3730      	adds	r7, #48	@ 0x30
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	58024400 	.word	0x58024400
 80045ec:	ffff0007 	.word	0xffff0007

080045f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e19c      	b.n	800493e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004604:	4b8a      	ldr	r3, [pc, #552]	@ (8004830 <HAL_RCC_ClockConfig+0x240>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 030f 	and.w	r3, r3, #15
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d910      	bls.n	8004634 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004612:	4b87      	ldr	r3, [pc, #540]	@ (8004830 <HAL_RCC_ClockConfig+0x240>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f023 020f 	bic.w	r2, r3, #15
 800461a:	4985      	ldr	r1, [pc, #532]	@ (8004830 <HAL_RCC_ClockConfig+0x240>)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	4313      	orrs	r3, r2
 8004620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004622:	4b83      	ldr	r3, [pc, #524]	@ (8004830 <HAL_RCC_ClockConfig+0x240>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	429a      	cmp	r2, r3
 800462e:	d001      	beq.n	8004634 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e184      	b.n	800493e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d010      	beq.n	8004662 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	4b7b      	ldr	r3, [pc, #492]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800464c:	429a      	cmp	r2, r3
 800464e:	d908      	bls.n	8004662 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004650:	4b78      	ldr	r3, [pc, #480]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	4975      	ldr	r1, [pc, #468]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 800465e:	4313      	orrs	r3, r2
 8004660:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	2b00      	cmp	r3, #0
 800466c:	d010      	beq.n	8004690 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695a      	ldr	r2, [r3, #20]
 8004672:	4b70      	ldr	r3, [pc, #448]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800467a:	429a      	cmp	r2, r3
 800467c:	d908      	bls.n	8004690 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800467e:	4b6d      	ldr	r3, [pc, #436]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	496a      	ldr	r1, [pc, #424]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 800468c:	4313      	orrs	r3, r2
 800468e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	2b00      	cmp	r3, #0
 800469a:	d010      	beq.n	80046be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	699a      	ldr	r2, [r3, #24]
 80046a0:	4b64      	ldr	r3, [pc, #400]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d908      	bls.n	80046be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80046ac:	4b61      	ldr	r3, [pc, #388]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	495e      	ldr	r1, [pc, #376]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d010      	beq.n	80046ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69da      	ldr	r2, [r3, #28]
 80046ce:	4b59      	ldr	r3, [pc, #356]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d908      	bls.n	80046ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80046da:	4b56      	ldr	r3, [pc, #344]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	4953      	ldr	r1, [pc, #332]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d010      	beq.n	800471a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	4b4d      	ldr	r3, [pc, #308]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	f003 030f 	and.w	r3, r3, #15
 8004704:	429a      	cmp	r2, r3
 8004706:	d908      	bls.n	800471a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004708:	4b4a      	ldr	r3, [pc, #296]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	f023 020f 	bic.w	r2, r3, #15
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	4947      	ldr	r1, [pc, #284]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 8004716:	4313      	orrs	r3, r2
 8004718:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d055      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004726:	4b43      	ldr	r3, [pc, #268]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	4940      	ldr	r1, [pc, #256]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 8004734:	4313      	orrs	r3, r2
 8004736:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2b02      	cmp	r3, #2
 800473e:	d107      	bne.n	8004750 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004740:	4b3c      	ldr	r3, [pc, #240]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d121      	bne.n	8004790 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e0f6      	b.n	800493e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2b03      	cmp	r3, #3
 8004756:	d107      	bne.n	8004768 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004758:	4b36      	ldr	r3, [pc, #216]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d115      	bne.n	8004790 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e0ea      	b.n	800493e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d107      	bne.n	8004780 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004770:	4b30      	ldr	r3, [pc, #192]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004778:	2b00      	cmp	r3, #0
 800477a:	d109      	bne.n	8004790 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e0de      	b.n	800493e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004780:	4b2c      	ldr	r3, [pc, #176]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e0d6      	b.n	800493e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004790:	4b28      	ldr	r3, [pc, #160]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	f023 0207 	bic.w	r2, r3, #7
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	4925      	ldr	r1, [pc, #148]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047a2:	f7fc fce7 	bl	8001174 <HAL_GetTick>
 80047a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a8:	e00a      	b.n	80047c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047aa:	f7fc fce3 	bl	8001174 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e0be      	b.n	800493e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c0:	4b1c      	ldr	r3, [pc, #112]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d1eb      	bne.n	80047aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d010      	beq.n	8004800 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	4b14      	ldr	r3, [pc, #80]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d208      	bcs.n	8004800 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ee:	4b11      	ldr	r3, [pc, #68]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	f023 020f 	bic.w	r2, r3, #15
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	490e      	ldr	r1, [pc, #56]	@ (8004834 <HAL_RCC_ClockConfig+0x244>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004800:	4b0b      	ldr	r3, [pc, #44]	@ (8004830 <HAL_RCC_ClockConfig+0x240>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 030f 	and.w	r3, r3, #15
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d214      	bcs.n	8004838 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480e:	4b08      	ldr	r3, [pc, #32]	@ (8004830 <HAL_RCC_ClockConfig+0x240>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f023 020f 	bic.w	r2, r3, #15
 8004816:	4906      	ldr	r1, [pc, #24]	@ (8004830 <HAL_RCC_ClockConfig+0x240>)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	4313      	orrs	r3, r2
 800481c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800481e:	4b04      	ldr	r3, [pc, #16]	@ (8004830 <HAL_RCC_ClockConfig+0x240>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	429a      	cmp	r2, r3
 800482a:	d005      	beq.n	8004838 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e086      	b.n	800493e <HAL_RCC_ClockConfig+0x34e>
 8004830:	52002000 	.word	0x52002000
 8004834:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	2b00      	cmp	r3, #0
 8004842:	d010      	beq.n	8004866 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	4b3f      	ldr	r3, [pc, #252]	@ (8004948 <HAL_RCC_ClockConfig+0x358>)
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004850:	429a      	cmp	r2, r3
 8004852:	d208      	bcs.n	8004866 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004854:	4b3c      	ldr	r3, [pc, #240]	@ (8004948 <HAL_RCC_ClockConfig+0x358>)
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	4939      	ldr	r1, [pc, #228]	@ (8004948 <HAL_RCC_ClockConfig+0x358>)
 8004862:	4313      	orrs	r3, r2
 8004864:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0308 	and.w	r3, r3, #8
 800486e:	2b00      	cmp	r3, #0
 8004870:	d010      	beq.n	8004894 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	695a      	ldr	r2, [r3, #20]
 8004876:	4b34      	ldr	r3, [pc, #208]	@ (8004948 <HAL_RCC_ClockConfig+0x358>)
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800487e:	429a      	cmp	r2, r3
 8004880:	d208      	bcs.n	8004894 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004882:	4b31      	ldr	r3, [pc, #196]	@ (8004948 <HAL_RCC_ClockConfig+0x358>)
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	492e      	ldr	r1, [pc, #184]	@ (8004948 <HAL_RCC_ClockConfig+0x358>)
 8004890:	4313      	orrs	r3, r2
 8004892:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0310 	and.w	r3, r3, #16
 800489c:	2b00      	cmp	r3, #0
 800489e:	d010      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	4b28      	ldr	r3, [pc, #160]	@ (8004948 <HAL_RCC_ClockConfig+0x358>)
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d208      	bcs.n	80048c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80048b0:	4b25      	ldr	r3, [pc, #148]	@ (8004948 <HAL_RCC_ClockConfig+0x358>)
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	4922      	ldr	r1, [pc, #136]	@ (8004948 <HAL_RCC_ClockConfig+0x358>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0320 	and.w	r3, r3, #32
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d010      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69da      	ldr	r2, [r3, #28]
 80048d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004948 <HAL_RCC_ClockConfig+0x358>)
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048da:	429a      	cmp	r2, r3
 80048dc:	d208      	bcs.n	80048f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80048de:	4b1a      	ldr	r3, [pc, #104]	@ (8004948 <HAL_RCC_ClockConfig+0x358>)
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	4917      	ldr	r1, [pc, #92]	@ (8004948 <HAL_RCC_ClockConfig+0x358>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80048f0:	f000 f834 	bl	800495c <HAL_RCC_GetSysClockFreq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4b14      	ldr	r3, [pc, #80]	@ (8004948 <HAL_RCC_ClockConfig+0x358>)
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	0a1b      	lsrs	r3, r3, #8
 80048fc:	f003 030f 	and.w	r3, r3, #15
 8004900:	4912      	ldr	r1, [pc, #72]	@ (800494c <HAL_RCC_ClockConfig+0x35c>)
 8004902:	5ccb      	ldrb	r3, [r1, r3]
 8004904:	f003 031f 	and.w	r3, r3, #31
 8004908:	fa22 f303 	lsr.w	r3, r2, r3
 800490c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800490e:	4b0e      	ldr	r3, [pc, #56]	@ (8004948 <HAL_RCC_ClockConfig+0x358>)
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	4a0d      	ldr	r2, [pc, #52]	@ (800494c <HAL_RCC_ClockConfig+0x35c>)
 8004918:	5cd3      	ldrb	r3, [r2, r3]
 800491a:	f003 031f 	and.w	r3, r3, #31
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	fa22 f303 	lsr.w	r3, r2, r3
 8004924:	4a0a      	ldr	r2, [pc, #40]	@ (8004950 <HAL_RCC_ClockConfig+0x360>)
 8004926:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004928:	4a0a      	ldr	r2, [pc, #40]	@ (8004954 <HAL_RCC_ClockConfig+0x364>)
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800492e:	4b0a      	ldr	r3, [pc, #40]	@ (8004958 <HAL_RCC_ClockConfig+0x368>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f7fc fbd4 	bl	80010e0 <HAL_InitTick>
 8004938:	4603      	mov	r3, r0
 800493a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800493c:	7bfb      	ldrb	r3, [r7, #15]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	58024400 	.word	0x58024400
 800494c:	08009790 	.word	0x08009790
 8004950:	24000004 	.word	0x24000004
 8004954:	24000000 	.word	0x24000000
 8004958:	24000008 	.word	0x24000008

0800495c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800495c:	b480      	push	{r7}
 800495e:	b089      	sub	sp, #36	@ 0x24
 8004960:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004962:	4bb3      	ldr	r3, [pc, #716]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800496a:	2b18      	cmp	r3, #24
 800496c:	f200 8155 	bhi.w	8004c1a <HAL_RCC_GetSysClockFreq+0x2be>
 8004970:	a201      	add	r2, pc, #4	@ (adr r2, 8004978 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004976:	bf00      	nop
 8004978:	080049dd 	.word	0x080049dd
 800497c:	08004c1b 	.word	0x08004c1b
 8004980:	08004c1b 	.word	0x08004c1b
 8004984:	08004c1b 	.word	0x08004c1b
 8004988:	08004c1b 	.word	0x08004c1b
 800498c:	08004c1b 	.word	0x08004c1b
 8004990:	08004c1b 	.word	0x08004c1b
 8004994:	08004c1b 	.word	0x08004c1b
 8004998:	08004a03 	.word	0x08004a03
 800499c:	08004c1b 	.word	0x08004c1b
 80049a0:	08004c1b 	.word	0x08004c1b
 80049a4:	08004c1b 	.word	0x08004c1b
 80049a8:	08004c1b 	.word	0x08004c1b
 80049ac:	08004c1b 	.word	0x08004c1b
 80049b0:	08004c1b 	.word	0x08004c1b
 80049b4:	08004c1b 	.word	0x08004c1b
 80049b8:	08004a09 	.word	0x08004a09
 80049bc:	08004c1b 	.word	0x08004c1b
 80049c0:	08004c1b 	.word	0x08004c1b
 80049c4:	08004c1b 	.word	0x08004c1b
 80049c8:	08004c1b 	.word	0x08004c1b
 80049cc:	08004c1b 	.word	0x08004c1b
 80049d0:	08004c1b 	.word	0x08004c1b
 80049d4:	08004c1b 	.word	0x08004c1b
 80049d8:	08004a0f 	.word	0x08004a0f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049dc:	4b94      	ldr	r3, [pc, #592]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0320 	and.w	r3, r3, #32
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d009      	beq.n	80049fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049e8:	4b91      	ldr	r3, [pc, #580]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	08db      	lsrs	r3, r3, #3
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	4a90      	ldr	r2, [pc, #576]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049f4:	fa22 f303 	lsr.w	r3, r2, r3
 80049f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80049fa:	e111      	b.n	8004c20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80049fc:	4b8d      	ldr	r3, [pc, #564]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049fe:	61bb      	str	r3, [r7, #24]
      break;
 8004a00:	e10e      	b.n	8004c20 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004a02:	4b8d      	ldr	r3, [pc, #564]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a04:	61bb      	str	r3, [r7, #24]
      break;
 8004a06:	e10b      	b.n	8004c20 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004a08:	4b8c      	ldr	r3, [pc, #560]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004a0a:	61bb      	str	r3, [r7, #24]
      break;
 8004a0c:	e108      	b.n	8004c20 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a0e:	4b88      	ldr	r3, [pc, #544]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004a18:	4b85      	ldr	r3, [pc, #532]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a1c:	091b      	lsrs	r3, r3, #4
 8004a1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a22:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a24:	4b82      	ldr	r3, [pc, #520]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004a2e:	4b80      	ldr	r3, [pc, #512]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a32:	08db      	lsrs	r3, r3, #3
 8004a34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	fb02 f303 	mul.w	r3, r2, r3
 8004a3e:	ee07 3a90 	vmov	s15, r3
 8004a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a46:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 80e1 	beq.w	8004c14 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	f000 8083 	beq.w	8004b60 <HAL_RCC_GetSysClockFreq+0x204>
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	f200 80a1 	bhi.w	8004ba4 <HAL_RCC_GetSysClockFreq+0x248>
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <HAL_RCC_GetSysClockFreq+0x114>
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d056      	beq.n	8004b1c <HAL_RCC_GetSysClockFreq+0x1c0>
 8004a6e:	e099      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a70:	4b6f      	ldr	r3, [pc, #444]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0320 	and.w	r3, r3, #32
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d02d      	beq.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a7c:	4b6c      	ldr	r3, [pc, #432]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	08db      	lsrs	r3, r3, #3
 8004a82:	f003 0303 	and.w	r3, r3, #3
 8004a86:	4a6b      	ldr	r2, [pc, #428]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a88:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	ee07 3a90 	vmov	s15, r3
 8004a94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aa6:	4b62      	ldr	r3, [pc, #392]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004ad6:	e087      	b.n	8004be8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004c44 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aea:	4b51      	ldr	r3, [pc, #324]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af2:	ee07 3a90 	vmov	s15, r3
 8004af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004afe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b1a:	e065      	b.n	8004be8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	ee07 3a90 	vmov	s15, r3
 8004b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b26:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004c48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b2e:	4b40      	ldr	r3, [pc, #256]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b36:	ee07 3a90 	vmov	s15, r3
 8004b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b42:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b5e:	e043      	b.n	8004be8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	ee07 3a90 	vmov	s15, r3
 8004b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b6a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004c4c <HAL_RCC_GetSysClockFreq+0x2f0>
 8004b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b72:	4b2f      	ldr	r3, [pc, #188]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b7a:	ee07 3a90 	vmov	s15, r3
 8004b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b82:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b86:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ba2:	e021      	b.n	8004be8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	ee07 3a90 	vmov	s15, r3
 8004baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004c48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bbe:	ee07 3a90 	vmov	s15, r3
 8004bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004be2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004be6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004be8:	4b11      	ldr	r3, [pc, #68]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bec:	0a5b      	lsrs	r3, r3, #9
 8004bee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	ee07 3a90 	vmov	s15, r3
 8004bfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c00:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c0c:	ee17 3a90 	vmov	r3, s15
 8004c10:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004c12:	e005      	b.n	8004c20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	61bb      	str	r3, [r7, #24]
      break;
 8004c18:	e002      	b.n	8004c20 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004c1a:	4b07      	ldr	r3, [pc, #28]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c1c:	61bb      	str	r3, [r7, #24]
      break;
 8004c1e:	bf00      	nop
  }

  return sysclockfreq;
 8004c20:	69bb      	ldr	r3, [r7, #24]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3724      	adds	r7, #36	@ 0x24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	58024400 	.word	0x58024400
 8004c34:	03d09000 	.word	0x03d09000
 8004c38:	003d0900 	.word	0x003d0900
 8004c3c:	017d7840 	.word	0x017d7840
 8004c40:	46000000 	.word	0x46000000
 8004c44:	4c742400 	.word	0x4c742400
 8004c48:	4a742400 	.word	0x4a742400
 8004c4c:	4bbebc20 	.word	0x4bbebc20

08004c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004c56:	f7ff fe81 	bl	800495c <HAL_RCC_GetSysClockFreq>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	4b10      	ldr	r3, [pc, #64]	@ (8004ca0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	0a1b      	lsrs	r3, r3, #8
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	490f      	ldr	r1, [pc, #60]	@ (8004ca4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004c68:	5ccb      	ldrb	r3, [r1, r3]
 8004c6a:	f003 031f 	and.w	r3, r3, #31
 8004c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c72:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c74:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	4a09      	ldr	r2, [pc, #36]	@ (8004ca4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004c7e:	5cd3      	ldrb	r3, [r2, r3]
 8004c80:	f003 031f 	and.w	r3, r3, #31
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8a:	4a07      	ldr	r2, [pc, #28]	@ (8004ca8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c8c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c8e:	4a07      	ldr	r2, [pc, #28]	@ (8004cac <HAL_RCC_GetHCLKFreq+0x5c>)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004c94:	4b04      	ldr	r3, [pc, #16]	@ (8004ca8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c96:	681b      	ldr	r3, [r3, #0]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	58024400 	.word	0x58024400
 8004ca4:	08009790 	.word	0x08009790
 8004ca8:	24000004 	.word	0x24000004
 8004cac:	24000000 	.word	0x24000000

08004cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004cb4:	f7ff ffcc 	bl	8004c50 <HAL_RCC_GetHCLKFreq>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	4b06      	ldr	r3, [pc, #24]	@ (8004cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	091b      	lsrs	r3, r3, #4
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	4904      	ldr	r1, [pc, #16]	@ (8004cd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cc6:	5ccb      	ldrb	r3, [r1, r3]
 8004cc8:	f003 031f 	and.w	r3, r3, #31
 8004ccc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	58024400 	.word	0x58024400
 8004cd8:	08009790 	.word	0x08009790

08004cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004ce0:	f7ff ffb6 	bl	8004c50 <HAL_RCC_GetHCLKFreq>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	4b06      	ldr	r3, [pc, #24]	@ (8004d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	0a1b      	lsrs	r3, r3, #8
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	4904      	ldr	r1, [pc, #16]	@ (8004d04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cf2:	5ccb      	ldrb	r3, [r1, r3]
 8004cf4:	f003 031f 	and.w	r3, r3, #31
 8004cf8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	58024400 	.word	0x58024400
 8004d04:	08009790 	.word	0x08009790

08004d08 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d0c:	b0ca      	sub	sp, #296	@ 0x128
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d14:	2300      	movs	r3, #0
 8004d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d28:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004d2c:	2500      	movs	r5, #0
 8004d2e:	ea54 0305 	orrs.w	r3, r4, r5
 8004d32:	d049      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d3e:	d02f      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004d40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d44:	d828      	bhi.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004d46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d4a:	d01a      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004d4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d50:	d822      	bhi.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004d56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d5a:	d007      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d5c:	e01c      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d5e:	4bb8      	ldr	r3, [pc, #736]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d62:	4ab7      	ldr	r2, [pc, #732]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004d6a:	e01a      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d70:	3308      	adds	r3, #8
 8004d72:	2102      	movs	r1, #2
 8004d74:	4618      	mov	r0, r3
 8004d76:	f001 fc8f 	bl	8006698 <RCCEx_PLL2_Config>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004d80:	e00f      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d86:	3328      	adds	r3, #40	@ 0x28
 8004d88:	2102      	movs	r1, #2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f001 fd36 	bl	80067fc <RCCEx_PLL3_Config>
 8004d90:	4603      	mov	r3, r0
 8004d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004d96:	e004      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d9e:	e000      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004da0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004da2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10a      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004daa:	4ba5      	ldr	r3, [pc, #660]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004db8:	4aa1      	ldr	r2, [pc, #644]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dba:	430b      	orrs	r3, r1
 8004dbc:	6513      	str	r3, [r2, #80]	@ 0x50
 8004dbe:	e003      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004dd4:	f04f 0900 	mov.w	r9, #0
 8004dd8:	ea58 0309 	orrs.w	r3, r8, r9
 8004ddc:	d047      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d82a      	bhi.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004de8:	a201      	add	r2, pc, #4	@ (adr r2, 8004df0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dee:	bf00      	nop
 8004df0:	08004e05 	.word	0x08004e05
 8004df4:	08004e13 	.word	0x08004e13
 8004df8:	08004e29 	.word	0x08004e29
 8004dfc:	08004e47 	.word	0x08004e47
 8004e00:	08004e47 	.word	0x08004e47
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e04:	4b8e      	ldr	r3, [pc, #568]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e08:	4a8d      	ldr	r2, [pc, #564]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e10:	e01a      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e16:	3308      	adds	r3, #8
 8004e18:	2100      	movs	r1, #0
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f001 fc3c 	bl	8006698 <RCCEx_PLL2_Config>
 8004e20:	4603      	mov	r3, r0
 8004e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e26:	e00f      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e2c:	3328      	adds	r3, #40	@ 0x28
 8004e2e:	2100      	movs	r1, #0
 8004e30:	4618      	mov	r0, r3
 8004e32:	f001 fce3 	bl	80067fc <RCCEx_PLL3_Config>
 8004e36:	4603      	mov	r3, r0
 8004e38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e3c:	e004      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e44:	e000      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004e46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10a      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e50:	4b7b      	ldr	r3, [pc, #492]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e54:	f023 0107 	bic.w	r1, r3, #7
 8004e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e5e:	4a78      	ldr	r2, [pc, #480]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e60:	430b      	orrs	r3, r1
 8004e62:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e64:	e003      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e76:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004e7a:	f04f 0b00 	mov.w	fp, #0
 8004e7e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004e82:	d04c      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e8e:	d030      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004e90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e94:	d829      	bhi.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004e96:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e98:	d02d      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004e9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e9c:	d825      	bhi.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004e9e:	2b80      	cmp	r3, #128	@ 0x80
 8004ea0:	d018      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004ea2:	2b80      	cmp	r3, #128	@ 0x80
 8004ea4:	d821      	bhi.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004eaa:	2b40      	cmp	r3, #64	@ 0x40
 8004eac:	d007      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004eae:	e01c      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eb0:	4b63      	ldr	r3, [pc, #396]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb4:	4a62      	ldr	r2, [pc, #392]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004eb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004eba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004ebc:	e01c      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec2:	3308      	adds	r3, #8
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f001 fbe6 	bl	8006698 <RCCEx_PLL2_Config>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004ed2:	e011      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed8:	3328      	adds	r3, #40	@ 0x28
 8004eda:	2100      	movs	r1, #0
 8004edc:	4618      	mov	r0, r3
 8004ede:	f001 fc8d 	bl	80067fc <RCCEx_PLL3_Config>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004ee8:	e006      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ef0:	e002      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004ef2:	bf00      	nop
 8004ef4:	e000      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004ef6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ef8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10a      	bne.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004f00:	4b4f      	ldr	r3, [pc, #316]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f04:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f0e:	4a4c      	ldr	r2, [pc, #304]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f10:	430b      	orrs	r3, r1
 8004f12:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f14:	e003      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f26:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004f2a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004f34:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	d053      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004f46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f4a:	d035      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004f4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f50:	d82e      	bhi.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004f52:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004f56:	d031      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004f58:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004f5c:	d828      	bhi.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004f5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f62:	d01a      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004f64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f68:	d822      	bhi.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004f6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f72:	d007      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004f74:	e01c      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f76:	4b32      	ldr	r3, [pc, #200]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7a:	4a31      	ldr	r2, [pc, #196]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f82:	e01c      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f88:	3308      	adds	r3, #8
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f001 fb83 	bl	8006698 <RCCEx_PLL2_Config>
 8004f92:	4603      	mov	r3, r0
 8004f94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004f98:	e011      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f9e:	3328      	adds	r3, #40	@ 0x28
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f001 fc2a 	bl	80067fc <RCCEx_PLL3_Config>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fae:	e006      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fb6:	e002      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004fb8:	bf00      	nop
 8004fba:	e000      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004fbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10b      	bne.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fca:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004fd6:	4a1a      	ldr	r2, [pc, #104]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004fd8:	430b      	orrs	r3, r1
 8004fda:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fdc:	e003      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fee:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004ff2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004ffc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005000:	460b      	mov	r3, r1
 8005002:	4313      	orrs	r3, r2
 8005004:	d056      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800500a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800500e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005012:	d038      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005014:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005018:	d831      	bhi.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800501a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800501e:	d034      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005020:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005024:	d82b      	bhi.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005026:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800502a:	d01d      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800502c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005030:	d825      	bhi.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005032:	2b00      	cmp	r3, #0
 8005034:	d006      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005036:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800503a:	d00a      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800503c:	e01f      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800503e:	bf00      	nop
 8005040:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005044:	4ba2      	ldr	r3, [pc, #648]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005048:	4aa1      	ldr	r2, [pc, #644]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800504a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800504e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005050:	e01c      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005056:	3308      	adds	r3, #8
 8005058:	2100      	movs	r1, #0
 800505a:	4618      	mov	r0, r3
 800505c:	f001 fb1c 	bl	8006698 <RCCEx_PLL2_Config>
 8005060:	4603      	mov	r3, r0
 8005062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005066:	e011      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800506c:	3328      	adds	r3, #40	@ 0x28
 800506e:	2100      	movs	r1, #0
 8005070:	4618      	mov	r0, r3
 8005072:	f001 fbc3 	bl	80067fc <RCCEx_PLL3_Config>
 8005076:	4603      	mov	r3, r0
 8005078:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800507c:	e006      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005084:	e002      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005086:	bf00      	nop
 8005088:	e000      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800508a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800508c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10b      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005094:	4b8e      	ldr	r3, [pc, #568]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005098:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800509c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80050a4:	4a8a      	ldr	r2, [pc, #552]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050a6:	430b      	orrs	r3, r1
 80050a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80050aa:	e003      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80050b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050bc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80050c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80050c4:	2300      	movs	r3, #0
 80050c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80050ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80050ce:	460b      	mov	r3, r1
 80050d0:	4313      	orrs	r3, r2
 80050d2:	d03a      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80050d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050da:	2b30      	cmp	r3, #48	@ 0x30
 80050dc:	d01f      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80050de:	2b30      	cmp	r3, #48	@ 0x30
 80050e0:	d819      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80050e2:	2b20      	cmp	r3, #32
 80050e4:	d00c      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80050e6:	2b20      	cmp	r3, #32
 80050e8:	d815      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d019      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80050ee:	2b10      	cmp	r3, #16
 80050f0:	d111      	bne.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050f2:	4b77      	ldr	r3, [pc, #476]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f6:	4a76      	ldr	r2, [pc, #472]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80050fe:	e011      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005104:	3308      	adds	r3, #8
 8005106:	2102      	movs	r1, #2
 8005108:	4618      	mov	r0, r3
 800510a:	f001 fac5 	bl	8006698 <RCCEx_PLL2_Config>
 800510e:	4603      	mov	r3, r0
 8005110:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005114:	e006      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800511c:	e002      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800511e:	bf00      	nop
 8005120:	e000      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005122:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10a      	bne.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800512c:	4b68      	ldr	r3, [pc, #416]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800512e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005130:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800513a:	4a65      	ldr	r2, [pc, #404]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800513c:	430b      	orrs	r3, r1
 800513e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005140:	e003      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005142:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005146:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800514a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800514e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005152:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005156:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800515a:	2300      	movs	r3, #0
 800515c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005160:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005164:	460b      	mov	r3, r1
 8005166:	4313      	orrs	r3, r2
 8005168:	d051      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800516a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800516e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005170:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005174:	d035      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005176:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800517a:	d82e      	bhi.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800517c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005180:	d031      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005182:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005186:	d828      	bhi.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005188:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800518c:	d01a      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800518e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005192:	d822      	bhi.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800519c:	d007      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800519e:	e01c      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051a0:	4b4b      	ldr	r3, [pc, #300]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a4:	4a4a      	ldr	r2, [pc, #296]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80051ac:	e01c      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b2:	3308      	adds	r3, #8
 80051b4:	2100      	movs	r1, #0
 80051b6:	4618      	mov	r0, r3
 80051b8:	f001 fa6e 	bl	8006698 <RCCEx_PLL2_Config>
 80051bc:	4603      	mov	r3, r0
 80051be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80051c2:	e011      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c8:	3328      	adds	r3, #40	@ 0x28
 80051ca:	2100      	movs	r1, #0
 80051cc:	4618      	mov	r0, r3
 80051ce:	f001 fb15 	bl	80067fc <RCCEx_PLL3_Config>
 80051d2:	4603      	mov	r3, r0
 80051d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80051d8:	e006      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051e0:	e002      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80051e2:	bf00      	nop
 80051e4:	e000      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80051e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10a      	bne.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80051f0:	4b37      	ldr	r3, [pc, #220]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051f4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80051f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051fe:	4a34      	ldr	r2, [pc, #208]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005200:	430b      	orrs	r3, r1
 8005202:	6513      	str	r3, [r2, #80]	@ 0x50
 8005204:	e003      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005206:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800520a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800520e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005216:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800521a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800521e:	2300      	movs	r3, #0
 8005220:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005224:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005228:	460b      	mov	r3, r1
 800522a:	4313      	orrs	r3, r2
 800522c:	d056      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800522e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005234:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005238:	d033      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800523a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800523e:	d82c      	bhi.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005240:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005244:	d02f      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005246:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800524a:	d826      	bhi.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800524c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005250:	d02b      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005252:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005256:	d820      	bhi.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005258:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800525c:	d012      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800525e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005262:	d81a      	bhi.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005264:	2b00      	cmp	r3, #0
 8005266:	d022      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800526c:	d115      	bne.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800526e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005272:	3308      	adds	r3, #8
 8005274:	2101      	movs	r1, #1
 8005276:	4618      	mov	r0, r3
 8005278:	f001 fa0e 	bl	8006698 <RCCEx_PLL2_Config>
 800527c:	4603      	mov	r3, r0
 800527e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005282:	e015      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005288:	3328      	adds	r3, #40	@ 0x28
 800528a:	2101      	movs	r1, #1
 800528c:	4618      	mov	r0, r3
 800528e:	f001 fab5 	bl	80067fc <RCCEx_PLL3_Config>
 8005292:	4603      	mov	r3, r0
 8005294:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005298:	e00a      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052a0:	e006      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052a2:	bf00      	nop
 80052a4:	e004      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052a6:	bf00      	nop
 80052a8:	e002      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052aa:	bf00      	nop
 80052ac:	e000      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80052ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10d      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80052b8:	4b05      	ldr	r3, [pc, #20]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052bc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80052c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052c6:	4a02      	ldr	r2, [pc, #8]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052c8:	430b      	orrs	r3, r1
 80052ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80052cc:	e006      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80052ce:	bf00      	nop
 80052d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80052dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80052e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80052ec:	2300      	movs	r3, #0
 80052ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80052f2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4313      	orrs	r3, r2
 80052fa:	d055      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80052fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005300:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005304:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005308:	d033      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800530a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800530e:	d82c      	bhi.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005314:	d02f      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800531a:	d826      	bhi.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800531c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005320:	d02b      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005322:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005326:	d820      	bhi.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005328:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800532c:	d012      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800532e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005332:	d81a      	bhi.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005334:	2b00      	cmp	r3, #0
 8005336:	d022      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005338:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800533c:	d115      	bne.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800533e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005342:	3308      	adds	r3, #8
 8005344:	2101      	movs	r1, #1
 8005346:	4618      	mov	r0, r3
 8005348:	f001 f9a6 	bl	8006698 <RCCEx_PLL2_Config>
 800534c:	4603      	mov	r3, r0
 800534e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005352:	e015      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005358:	3328      	adds	r3, #40	@ 0x28
 800535a:	2101      	movs	r1, #1
 800535c:	4618      	mov	r0, r3
 800535e:	f001 fa4d 	bl	80067fc <RCCEx_PLL3_Config>
 8005362:	4603      	mov	r3, r0
 8005364:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005368:	e00a      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005370:	e006      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005372:	bf00      	nop
 8005374:	e004      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005376:	bf00      	nop
 8005378:	e002      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800537a:	bf00      	nop
 800537c:	e000      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800537e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005380:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10b      	bne.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005388:	4ba3      	ldr	r3, [pc, #652]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800538a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800538c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005394:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005398:	4a9f      	ldr	r2, [pc, #636]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800539a:	430b      	orrs	r3, r1
 800539c:	6593      	str	r3, [r2, #88]	@ 0x58
 800539e:	e003      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80053a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80053b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053b8:	2300      	movs	r3, #0
 80053ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80053be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80053c2:	460b      	mov	r3, r1
 80053c4:	4313      	orrs	r3, r2
 80053c6:	d037      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80053c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053d2:	d00e      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80053d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053d8:	d816      	bhi.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d018      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80053de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053e2:	d111      	bne.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053e4:	4b8c      	ldr	r3, [pc, #560]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e8:	4a8b      	ldr	r2, [pc, #556]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80053f0:	e00f      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f6:	3308      	adds	r3, #8
 80053f8:	2101      	movs	r1, #1
 80053fa:	4618      	mov	r0, r3
 80053fc:	f001 f94c 	bl	8006698 <RCCEx_PLL2_Config>
 8005400:	4603      	mov	r3, r0
 8005402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005406:	e004      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800540e:	e000      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10a      	bne.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800541a:	4b7f      	ldr	r3, [pc, #508]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800541c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800541e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005428:	4a7b      	ldr	r2, [pc, #492]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800542a:	430b      	orrs	r3, r1
 800542c:	6513      	str	r3, [r2, #80]	@ 0x50
 800542e:	e003      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005430:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005434:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800543c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005440:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005444:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005448:	2300      	movs	r3, #0
 800544a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800544e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005452:	460b      	mov	r3, r1
 8005454:	4313      	orrs	r3, r2
 8005456:	d039      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800545c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800545e:	2b03      	cmp	r3, #3
 8005460:	d81c      	bhi.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005462:	a201      	add	r2, pc, #4	@ (adr r2, 8005468 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005468:	080054a5 	.word	0x080054a5
 800546c:	08005479 	.word	0x08005479
 8005470:	08005487 	.word	0x08005487
 8005474:	080054a5 	.word	0x080054a5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005478:	4b67      	ldr	r3, [pc, #412]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800547a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547c:	4a66      	ldr	r2, [pc, #408]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800547e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005482:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005484:	e00f      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800548a:	3308      	adds	r3, #8
 800548c:	2102      	movs	r1, #2
 800548e:	4618      	mov	r0, r3
 8005490:	f001 f902 	bl	8006698 <RCCEx_PLL2_Config>
 8005494:	4603      	mov	r3, r0
 8005496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800549a:	e004      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054a2:	e000      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80054a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10a      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80054ae:	4b5a      	ldr	r3, [pc, #360]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054b2:	f023 0103 	bic.w	r1, r3, #3
 80054b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054bc:	4a56      	ldr	r2, [pc, #344]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054be:	430b      	orrs	r3, r1
 80054c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80054c2:	e003      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80054d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054dc:	2300      	movs	r3, #0
 80054de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80054e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80054e6:	460b      	mov	r3, r1
 80054e8:	4313      	orrs	r3, r2
 80054ea:	f000 809f 	beq.w	800562c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054ee:	4b4b      	ldr	r3, [pc, #300]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a4a      	ldr	r2, [pc, #296]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80054f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054fa:	f7fb fe3b 	bl	8001174 <HAL_GetTick>
 80054fe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005502:	e00b      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005504:	f7fb fe36 	bl	8001174 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	2b64      	cmp	r3, #100	@ 0x64
 8005512:	d903      	bls.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800551a:	e005      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800551c:	4b3f      	ldr	r3, [pc, #252]	@ (800561c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0ed      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005528:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800552c:	2b00      	cmp	r3, #0
 800552e:	d179      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005530:	4b39      	ldr	r3, [pc, #228]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005532:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005538:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800553c:	4053      	eors	r3, r2
 800553e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005542:	2b00      	cmp	r3, #0
 8005544:	d015      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005546:	4b34      	ldr	r3, [pc, #208]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800554a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800554e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005552:	4b31      	ldr	r3, [pc, #196]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005556:	4a30      	ldr	r2, [pc, #192]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800555c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800555e:	4b2e      	ldr	r3, [pc, #184]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005562:	4a2d      	ldr	r2, [pc, #180]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005564:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005568:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800556a:	4a2b      	ldr	r2, [pc, #172]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800556c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005570:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005576:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800557a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800557e:	d118      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005580:	f7fb fdf8 	bl	8001174 <HAL_GetTick>
 8005584:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005588:	e00d      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800558a:	f7fb fdf3 	bl	8001174 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005594:	1ad2      	subs	r2, r2, r3
 8005596:	f241 3388 	movw	r3, #5000	@ 0x1388
 800559a:	429a      	cmp	r2, r3
 800559c:	d903      	bls.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80055a4:	e005      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055a6:	4b1c      	ldr	r3, [pc, #112]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0eb      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80055b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d129      	bne.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055ca:	d10e      	bne.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80055cc:	4b12      	ldr	r3, [pc, #72]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80055d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055dc:	091a      	lsrs	r2, r3, #4
 80055de:	4b10      	ldr	r3, [pc, #64]	@ (8005620 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80055e0:	4013      	ands	r3, r2
 80055e2:	4a0d      	ldr	r2, [pc, #52]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055e4:	430b      	orrs	r3, r1
 80055e6:	6113      	str	r3, [r2, #16]
 80055e8:	e005      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80055ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80055f4:	6113      	str	r3, [r2, #16]
 80055f6:	4b08      	ldr	r3, [pc, #32]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80055f8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80055fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005606:	4a04      	ldr	r2, [pc, #16]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005608:	430b      	orrs	r3, r1
 800560a:	6713      	str	r3, [r2, #112]	@ 0x70
 800560c:	e00e      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800560e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005612:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005616:	e009      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005618:	58024400 	.word	0x58024400
 800561c:	58024800 	.word	0x58024800
 8005620:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005624:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005628:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800562c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005634:	f002 0301 	and.w	r3, r2, #1
 8005638:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800563c:	2300      	movs	r3, #0
 800563e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005642:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005646:	460b      	mov	r3, r1
 8005648:	4313      	orrs	r3, r2
 800564a:	f000 8089 	beq.w	8005760 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800564e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005652:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005654:	2b28      	cmp	r3, #40	@ 0x28
 8005656:	d86b      	bhi.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005658:	a201      	add	r2, pc, #4	@ (adr r2, 8005660 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800565a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565e:	bf00      	nop
 8005660:	08005739 	.word	0x08005739
 8005664:	08005731 	.word	0x08005731
 8005668:	08005731 	.word	0x08005731
 800566c:	08005731 	.word	0x08005731
 8005670:	08005731 	.word	0x08005731
 8005674:	08005731 	.word	0x08005731
 8005678:	08005731 	.word	0x08005731
 800567c:	08005731 	.word	0x08005731
 8005680:	08005705 	.word	0x08005705
 8005684:	08005731 	.word	0x08005731
 8005688:	08005731 	.word	0x08005731
 800568c:	08005731 	.word	0x08005731
 8005690:	08005731 	.word	0x08005731
 8005694:	08005731 	.word	0x08005731
 8005698:	08005731 	.word	0x08005731
 800569c:	08005731 	.word	0x08005731
 80056a0:	0800571b 	.word	0x0800571b
 80056a4:	08005731 	.word	0x08005731
 80056a8:	08005731 	.word	0x08005731
 80056ac:	08005731 	.word	0x08005731
 80056b0:	08005731 	.word	0x08005731
 80056b4:	08005731 	.word	0x08005731
 80056b8:	08005731 	.word	0x08005731
 80056bc:	08005731 	.word	0x08005731
 80056c0:	08005739 	.word	0x08005739
 80056c4:	08005731 	.word	0x08005731
 80056c8:	08005731 	.word	0x08005731
 80056cc:	08005731 	.word	0x08005731
 80056d0:	08005731 	.word	0x08005731
 80056d4:	08005731 	.word	0x08005731
 80056d8:	08005731 	.word	0x08005731
 80056dc:	08005731 	.word	0x08005731
 80056e0:	08005739 	.word	0x08005739
 80056e4:	08005731 	.word	0x08005731
 80056e8:	08005731 	.word	0x08005731
 80056ec:	08005731 	.word	0x08005731
 80056f0:	08005731 	.word	0x08005731
 80056f4:	08005731 	.word	0x08005731
 80056f8:	08005731 	.word	0x08005731
 80056fc:	08005731 	.word	0x08005731
 8005700:	08005739 	.word	0x08005739
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005708:	3308      	adds	r3, #8
 800570a:	2101      	movs	r1, #1
 800570c:	4618      	mov	r0, r3
 800570e:	f000 ffc3 	bl	8006698 <RCCEx_PLL2_Config>
 8005712:	4603      	mov	r3, r0
 8005714:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005718:	e00f      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800571a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800571e:	3328      	adds	r3, #40	@ 0x28
 8005720:	2101      	movs	r1, #1
 8005722:	4618      	mov	r0, r3
 8005724:	f001 f86a 	bl	80067fc <RCCEx_PLL3_Config>
 8005728:	4603      	mov	r3, r0
 800572a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800572e:	e004      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005736:	e000      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800573a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10a      	bne.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005742:	4bbf      	ldr	r3, [pc, #764]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005746:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800574a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005750:	4abb      	ldr	r2, [pc, #748]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005752:	430b      	orrs	r3, r1
 8005754:	6553      	str	r3, [r2, #84]	@ 0x54
 8005756:	e003      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005758:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800575c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005768:	f002 0302 	and.w	r3, r2, #2
 800576c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005770:	2300      	movs	r3, #0
 8005772:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005776:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800577a:	460b      	mov	r3, r1
 800577c:	4313      	orrs	r3, r2
 800577e:	d041      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005784:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005786:	2b05      	cmp	r3, #5
 8005788:	d824      	bhi.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800578a:	a201      	add	r2, pc, #4	@ (adr r2, 8005790 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800578c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005790:	080057dd 	.word	0x080057dd
 8005794:	080057a9 	.word	0x080057a9
 8005798:	080057bf 	.word	0x080057bf
 800579c:	080057dd 	.word	0x080057dd
 80057a0:	080057dd 	.word	0x080057dd
 80057a4:	080057dd 	.word	0x080057dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ac:	3308      	adds	r3, #8
 80057ae:	2101      	movs	r1, #1
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 ff71 	bl	8006698 <RCCEx_PLL2_Config>
 80057b6:	4603      	mov	r3, r0
 80057b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80057bc:	e00f      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c2:	3328      	adds	r3, #40	@ 0x28
 80057c4:	2101      	movs	r1, #1
 80057c6:	4618      	mov	r0, r3
 80057c8:	f001 f818 	bl	80067fc <RCCEx_PLL3_Config>
 80057cc:	4603      	mov	r3, r0
 80057ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80057d2:	e004      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057da:	e000      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80057dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10a      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80057e6:	4b96      	ldr	r3, [pc, #600]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ea:	f023 0107 	bic.w	r1, r3, #7
 80057ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057f4:	4a92      	ldr	r2, [pc, #584]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057f6:	430b      	orrs	r3, r1
 80057f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80057fa:	e003      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005800:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580c:	f002 0304 	and.w	r3, r2, #4
 8005810:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005814:	2300      	movs	r3, #0
 8005816:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800581a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800581e:	460b      	mov	r3, r1
 8005820:	4313      	orrs	r3, r2
 8005822:	d044      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005828:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800582c:	2b05      	cmp	r3, #5
 800582e:	d825      	bhi.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005830:	a201      	add	r2, pc, #4	@ (adr r2, 8005838 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005836:	bf00      	nop
 8005838:	08005885 	.word	0x08005885
 800583c:	08005851 	.word	0x08005851
 8005840:	08005867 	.word	0x08005867
 8005844:	08005885 	.word	0x08005885
 8005848:	08005885 	.word	0x08005885
 800584c:	08005885 	.word	0x08005885
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005854:	3308      	adds	r3, #8
 8005856:	2101      	movs	r1, #1
 8005858:	4618      	mov	r0, r3
 800585a:	f000 ff1d 	bl	8006698 <RCCEx_PLL2_Config>
 800585e:	4603      	mov	r3, r0
 8005860:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005864:	e00f      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800586a:	3328      	adds	r3, #40	@ 0x28
 800586c:	2101      	movs	r1, #1
 800586e:	4618      	mov	r0, r3
 8005870:	f000 ffc4 	bl	80067fc <RCCEx_PLL3_Config>
 8005874:	4603      	mov	r3, r0
 8005876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800587a:	e004      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005882:	e000      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10b      	bne.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800588e:	4b6c      	ldr	r3, [pc, #432]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005892:	f023 0107 	bic.w	r1, r3, #7
 8005896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800589a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800589e:	4a68      	ldr	r2, [pc, #416]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058a0:	430b      	orrs	r3, r1
 80058a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80058a4:	e003      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80058ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b6:	f002 0320 	and.w	r3, r2, #32
 80058ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058be:	2300      	movs	r3, #0
 80058c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80058c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80058c8:	460b      	mov	r3, r1
 80058ca:	4313      	orrs	r3, r2
 80058cc:	d055      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80058ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058da:	d033      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80058dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058e0:	d82c      	bhi.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80058e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058e6:	d02f      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80058e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ec:	d826      	bhi.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80058ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80058f2:	d02b      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80058f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80058f8:	d820      	bhi.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80058fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058fe:	d012      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005900:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005904:	d81a      	bhi.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005906:	2b00      	cmp	r3, #0
 8005908:	d022      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800590a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800590e:	d115      	bne.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005914:	3308      	adds	r3, #8
 8005916:	2100      	movs	r1, #0
 8005918:	4618      	mov	r0, r3
 800591a:	f000 febd 	bl	8006698 <RCCEx_PLL2_Config>
 800591e:	4603      	mov	r3, r0
 8005920:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005924:	e015      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800592a:	3328      	adds	r3, #40	@ 0x28
 800592c:	2102      	movs	r1, #2
 800592e:	4618      	mov	r0, r3
 8005930:	f000 ff64 	bl	80067fc <RCCEx_PLL3_Config>
 8005934:	4603      	mov	r3, r0
 8005936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800593a:	e00a      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005942:	e006      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005944:	bf00      	nop
 8005946:	e004      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005948:	bf00      	nop
 800594a:	e002      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800594c:	bf00      	nop
 800594e:	e000      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005950:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005952:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10b      	bne.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800595a:	4b39      	ldr	r3, [pc, #228]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800595c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800595e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800596a:	4a35      	ldr	r2, [pc, #212]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800596c:	430b      	orrs	r3, r1
 800596e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005970:	e003      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005976:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800597a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800597e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005982:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005986:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800598a:	2300      	movs	r3, #0
 800598c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005990:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005994:	460b      	mov	r3, r1
 8005996:	4313      	orrs	r3, r2
 8005998:	d058      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800599a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059a2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80059a6:	d033      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80059a8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80059ac:	d82c      	bhi.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80059ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059b2:	d02f      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80059b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059b8:	d826      	bhi.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80059ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059be:	d02b      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80059c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059c4:	d820      	bhi.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80059c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059ca:	d012      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80059cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059d0:	d81a      	bhi.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d022      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80059d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059da:	d115      	bne.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e0:	3308      	adds	r3, #8
 80059e2:	2100      	movs	r1, #0
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 fe57 	bl	8006698 <RCCEx_PLL2_Config>
 80059ea:	4603      	mov	r3, r0
 80059ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80059f0:	e015      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f6:	3328      	adds	r3, #40	@ 0x28
 80059f8:	2102      	movs	r1, #2
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 fefe 	bl	80067fc <RCCEx_PLL3_Config>
 8005a00:	4603      	mov	r3, r0
 8005a02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a06:	e00a      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a0e:	e006      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a10:	bf00      	nop
 8005a12:	e004      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a14:	bf00      	nop
 8005a16:	e002      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a18:	bf00      	nop
 8005a1a:	e000      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005a1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10e      	bne.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a26:	4b06      	ldr	r3, [pc, #24]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a2a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a36:	4a02      	ldr	r2, [pc, #8]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a3c:	e006      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005a3e:	bf00      	nop
 8005a40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a54:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005a58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a62:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005a66:	460b      	mov	r3, r1
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	d055      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005a74:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005a78:	d033      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005a7a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005a7e:	d82c      	bhi.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005a80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a84:	d02f      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005a86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a8a:	d826      	bhi.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005a8c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005a90:	d02b      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005a92:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005a96:	d820      	bhi.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005a98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a9c:	d012      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005a9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005aa2:	d81a      	bhi.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d022      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005aa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aac:	d115      	bne.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab2:	3308      	adds	r3, #8
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 fdee 	bl	8006698 <RCCEx_PLL2_Config>
 8005abc:	4603      	mov	r3, r0
 8005abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005ac2:	e015      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac8:	3328      	adds	r3, #40	@ 0x28
 8005aca:	2102      	movs	r1, #2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 fe95 	bl	80067fc <RCCEx_PLL3_Config>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005ad8:	e00a      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ae0:	e006      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005ae2:	bf00      	nop
 8005ae4:	e004      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005ae6:	bf00      	nop
 8005ae8:	e002      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005aea:	bf00      	nop
 8005aec:	e000      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005aee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005af0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10b      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005af8:	4ba1      	ldr	r3, [pc, #644]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005afc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b08:	4a9d      	ldr	r2, [pc, #628]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b0a:	430b      	orrs	r3, r1
 8005b0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b0e:	e003      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b20:	f002 0308 	and.w	r3, r2, #8
 8005b24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b28:	2300      	movs	r3, #0
 8005b2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b2e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005b32:	460b      	mov	r3, r1
 8005b34:	4313      	orrs	r3, r2
 8005b36:	d01e      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b44:	d10c      	bne.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b4a:	3328      	adds	r3, #40	@ 0x28
 8005b4c:	2102      	movs	r1, #2
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 fe54 	bl	80067fc <RCCEx_PLL3_Config>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005b60:	4b87      	ldr	r3, [pc, #540]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b64:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b70:	4a83      	ldr	r2, [pc, #524]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b72:	430b      	orrs	r3, r1
 8005b74:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7e:	f002 0310 	and.w	r3, r2, #16
 8005b82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b86:	2300      	movs	r3, #0
 8005b88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005b8c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005b90:	460b      	mov	r3, r1
 8005b92:	4313      	orrs	r3, r2
 8005b94:	d01e      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ba2:	d10c      	bne.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba8:	3328      	adds	r3, #40	@ 0x28
 8005baa:	2102      	movs	r1, #2
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 fe25 	bl	80067fc <RCCEx_PLL3_Config>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005bbe:	4b70      	ldr	r3, [pc, #448]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bce:	4a6c      	ldr	r2, [pc, #432]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bd0:	430b      	orrs	r3, r1
 8005bd2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bdc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005be0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005be4:	2300      	movs	r3, #0
 8005be6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005bea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	d03e      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005bfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c00:	d022      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005c02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c06:	d81b      	bhi.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005c0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c10:	d00b      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005c12:	e015      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c18:	3308      	adds	r3, #8
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f000 fd3b 	bl	8006698 <RCCEx_PLL2_Config>
 8005c22:	4603      	mov	r3, r0
 8005c24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005c28:	e00f      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c2e:	3328      	adds	r3, #40	@ 0x28
 8005c30:	2102      	movs	r1, #2
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 fde2 	bl	80067fc <RCCEx_PLL3_Config>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005c3e:	e004      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c46:	e000      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10b      	bne.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c52:	4b4b      	ldr	r3, [pc, #300]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c56:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c62:	4a47      	ldr	r2, [pc, #284]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c64:	430b      	orrs	r3, r1
 8005c66:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c68:	e003      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005c7e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c80:	2300      	movs	r3, #0
 8005c82:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c84:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	d03b      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c9a:	d01f      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005c9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ca0:	d818      	bhi.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005ca2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ca6:	d003      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005ca8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cac:	d007      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005cae:	e011      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cb0:	4b33      	ldr	r3, [pc, #204]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb4:	4a32      	ldr	r2, [pc, #200]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005cbc:	e00f      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc2:	3328      	adds	r3, #40	@ 0x28
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 fd98 	bl	80067fc <RCCEx_PLL3_Config>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005cd2:	e004      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cda:	e000      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10b      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ce6:	4b26      	ldr	r3, [pc, #152]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf6:	4a22      	ldr	r2, [pc, #136]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cf8:	430b      	orrs	r3, r1
 8005cfa:	6553      	str	r3, [r2, #84]	@ 0x54
 8005cfc:	e003      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005d12:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d14:	2300      	movs	r3, #0
 8005d16:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d18:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	d034      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d003      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d30:	d007      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005d32:	e011      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d34:	4b12      	ldr	r3, [pc, #72]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d38:	4a11      	ldr	r2, [pc, #68]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005d40:	e00e      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d46:	3308      	adds	r3, #8
 8005d48:	2102      	movs	r1, #2
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fca4 	bl	8006698 <RCCEx_PLL2_Config>
 8005d50:	4603      	mov	r3, r0
 8005d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005d56:	e003      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10d      	bne.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005d68:	4b05      	ldr	r3, [pc, #20]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d6c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d76:	4a02      	ldr	r2, [pc, #8]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005d78:	430b      	orrs	r3, r1
 8005d7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d7c:	e006      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005d7e:	bf00      	nop
 8005d80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d94:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005d98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d9e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005da2:	460b      	mov	r3, r1
 8005da4:	4313      	orrs	r3, r2
 8005da6:	d00c      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dac:	3328      	adds	r3, #40	@ 0x28
 8005dae:	2102      	movs	r1, #2
 8005db0:	4618      	mov	r0, r3
 8005db2:	f000 fd23 	bl	80067fc <RCCEx_PLL3_Config>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005dce:	663b      	str	r3, [r7, #96]	@ 0x60
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8005dd4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005dd8:	460b      	mov	r3, r1
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	d038      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005de6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dea:	d018      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005dec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005df0:	d811      	bhi.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005df2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005df6:	d014      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005df8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dfc:	d80b      	bhi.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d011      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005e02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e06:	d106      	bne.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e08:	4bc3      	ldr	r3, [pc, #780]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0c:	4ac2      	ldr	r2, [pc, #776]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005e14:	e008      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e1c:	e004      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005e1e:	bf00      	nop
 8005e20:	e002      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005e22:	bf00      	nop
 8005e24:	e000      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005e26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10b      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e30:	4bb9      	ldr	r3, [pc, #740]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e34:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e40:	4ab5      	ldr	r2, [pc, #724]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e42:	430b      	orrs	r3, r1
 8005e44:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e46:	e003      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e58:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005e5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e5e:	2300      	movs	r3, #0
 8005e60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e62:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005e66:	460b      	mov	r3, r1
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	d009      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005e6c:	4baa      	ldr	r3, [pc, #680]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e7a:	4aa7      	ldr	r2, [pc, #668]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e7c:	430b      	orrs	r3, r1
 8005e7e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e88:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005e8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e8e:	2300      	movs	r3, #0
 8005e90:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e92:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005e96:	460b      	mov	r3, r1
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	d00a      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005e9c:	4b9e      	ldr	r3, [pc, #632]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005eac:	4a9a      	ldr	r2, [pc, #616]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005eae:	430b      	orrs	r3, r1
 8005eb0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eba:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005ebe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ec4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	d009      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ece:	4b92      	ldr	r3, [pc, #584]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ed2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005edc:	4a8e      	ldr	r2, [pc, #568]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ede:	430b      	orrs	r3, r1
 8005ee0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eea:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005eee:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ef4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4313      	orrs	r3, r2
 8005efc:	d00e      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005efe:	4b86      	ldr	r3, [pc, #536]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	4a85      	ldr	r2, [pc, #532]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f04:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005f08:	6113      	str	r3, [r2, #16]
 8005f0a:	4b83      	ldr	r3, [pc, #524]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f0c:	6919      	ldr	r1, [r3, #16]
 8005f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005f16:	4a80      	ldr	r2, [pc, #512]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f18:	430b      	orrs	r3, r1
 8005f1a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f24:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005f28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f2e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005f32:	460b      	mov	r3, r1
 8005f34:	4313      	orrs	r3, r2
 8005f36:	d009      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005f38:	4b77      	ldr	r3, [pc, #476]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f3c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f46:	4a74      	ldr	r2, [pc, #464]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f48:	430b      	orrs	r3, r1
 8005f4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f54:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005f58:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f5e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005f62:	460b      	mov	r3, r1
 8005f64:	4313      	orrs	r3, r2
 8005f66:	d00a      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005f68:	4b6b      	ldr	r3, [pc, #428]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f6c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f78:	4a67      	ldr	r2, [pc, #412]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005f7a:	430b      	orrs	r3, r1
 8005f7c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f86:	2100      	movs	r1, #0
 8005f88:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f90:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005f94:	460b      	mov	r3, r1
 8005f96:	4313      	orrs	r3, r2
 8005f98:	d011      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f9e:	3308      	adds	r3, #8
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 fb78 	bl	8006698 <RCCEx_PLL2_Config>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005fae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	6239      	str	r1, [r7, #32]
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fd0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	d011      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fde:	3308      	adds	r3, #8
 8005fe0:	2101      	movs	r1, #1
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 fb58 	bl	8006698 <RCCEx_PLL2_Config>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005fee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ffa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006006:	2100      	movs	r1, #0
 8006008:	61b9      	str	r1, [r7, #24]
 800600a:	f003 0304 	and.w	r3, r3, #4
 800600e:	61fb      	str	r3, [r7, #28]
 8006010:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006014:	460b      	mov	r3, r1
 8006016:	4313      	orrs	r3, r2
 8006018:	d011      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800601a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800601e:	3308      	adds	r3, #8
 8006020:	2102      	movs	r1, #2
 8006022:	4618      	mov	r0, r3
 8006024:	f000 fb38 	bl	8006698 <RCCEx_PLL2_Config>
 8006028:	4603      	mov	r3, r0
 800602a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800602e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006036:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800603a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800603e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006046:	2100      	movs	r1, #0
 8006048:	6139      	str	r1, [r7, #16]
 800604a:	f003 0308 	and.w	r3, r3, #8
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006054:	460b      	mov	r3, r1
 8006056:	4313      	orrs	r3, r2
 8006058:	d011      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800605a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605e:	3328      	adds	r3, #40	@ 0x28
 8006060:	2100      	movs	r1, #0
 8006062:	4618      	mov	r0, r3
 8006064:	f000 fbca 	bl	80067fc <RCCEx_PLL3_Config>
 8006068:	4603      	mov	r3, r0
 800606a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800606e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006076:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800607a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800607e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006086:	2100      	movs	r1, #0
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	f003 0310 	and.w	r3, r3, #16
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006094:	460b      	mov	r3, r1
 8006096:	4313      	orrs	r3, r2
 8006098:	d011      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800609a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800609e:	3328      	adds	r3, #40	@ 0x28
 80060a0:	2101      	movs	r1, #1
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 fbaa 	bl	80067fc <RCCEx_PLL3_Config>
 80060a8:	4603      	mov	r3, r0
 80060aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80060ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80060be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c6:	2100      	movs	r1, #0
 80060c8:	6039      	str	r1, [r7, #0]
 80060ca:	f003 0320 	and.w	r3, r3, #32
 80060ce:	607b      	str	r3, [r7, #4]
 80060d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80060d4:	460b      	mov	r3, r1
 80060d6:	4313      	orrs	r3, r2
 80060d8:	d011      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060de:	3328      	adds	r3, #40	@ 0x28
 80060e0:	2102      	movs	r1, #2
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 fb8a 	bl	80067fc <RCCEx_PLL3_Config>
 80060e8:	4603      	mov	r3, r0
 80060ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80060ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80060fe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	e000      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
}
 800610c:	4618      	mov	r0, r3
 800610e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006112:	46bd      	mov	sp, r7
 8006114:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006118:	58024400 	.word	0x58024400

0800611c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006120:	f7fe fd96 	bl	8004c50 <HAL_RCC_GetHCLKFreq>
 8006124:	4602      	mov	r2, r0
 8006126:	4b06      	ldr	r3, [pc, #24]	@ (8006140 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	091b      	lsrs	r3, r3, #4
 800612c:	f003 0307 	and.w	r3, r3, #7
 8006130:	4904      	ldr	r1, [pc, #16]	@ (8006144 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006132:	5ccb      	ldrb	r3, [r1, r3]
 8006134:	f003 031f 	and.w	r3, r3, #31
 8006138:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800613c:	4618      	mov	r0, r3
 800613e:	bd80      	pop	{r7, pc}
 8006140:	58024400 	.word	0x58024400
 8006144:	08009790 	.word	0x08009790

08006148 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006148:	b480      	push	{r7}
 800614a:	b089      	sub	sp, #36	@ 0x24
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006150:	4ba1      	ldr	r3, [pc, #644]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006154:	f003 0303 	and.w	r3, r3, #3
 8006158:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800615a:	4b9f      	ldr	r3, [pc, #636]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800615c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800615e:	0b1b      	lsrs	r3, r3, #12
 8006160:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006164:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006166:	4b9c      	ldr	r3, [pc, #624]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616a:	091b      	lsrs	r3, r3, #4
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006172:	4b99      	ldr	r3, [pc, #612]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006176:	08db      	lsrs	r3, r3, #3
 8006178:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	fb02 f303 	mul.w	r3, r2, r3
 8006182:	ee07 3a90 	vmov	s15, r3
 8006186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800618a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 8111 	beq.w	80063b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	2b02      	cmp	r3, #2
 800619a:	f000 8083 	beq.w	80062a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	f200 80a1 	bhi.w	80062e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d056      	beq.n	8006260 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80061b2:	e099      	b.n	80062e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061b4:	4b88      	ldr	r3, [pc, #544]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0320 	and.w	r3, r3, #32
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d02d      	beq.n	800621c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061c0:	4b85      	ldr	r3, [pc, #532]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	08db      	lsrs	r3, r3, #3
 80061c6:	f003 0303 	and.w	r3, r3, #3
 80061ca:	4a84      	ldr	r2, [pc, #528]	@ (80063dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80061cc:	fa22 f303 	lsr.w	r3, r2, r3
 80061d0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	ee07 3a90 	vmov	s15, r3
 80061d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	ee07 3a90 	vmov	s15, r3
 80061e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ea:	4b7b      	ldr	r3, [pc, #492]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061f2:	ee07 3a90 	vmov	s15, r3
 80061f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80061fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80063e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800620a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800620e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006216:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800621a:	e087      	b.n	800632c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	ee07 3a90 	vmov	s15, r3
 8006222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006226:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80063e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800622a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800622e:	4b6a      	ldr	r3, [pc, #424]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006236:	ee07 3a90 	vmov	s15, r3
 800623a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800623e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006242:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80063e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800624a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800624e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800625a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800625e:	e065      	b.n	800632c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	ee07 3a90 	vmov	s15, r3
 8006266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800626a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80063e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800626e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006272:	4b59      	ldr	r3, [pc, #356]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800627a:	ee07 3a90 	vmov	s15, r3
 800627e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006282:	ed97 6a03 	vldr	s12, [r7, #12]
 8006286:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80063e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800628a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800628e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006292:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800629a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800629e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062a2:	e043      	b.n	800632c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	ee07 3a90 	vmov	s15, r3
 80062aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80063ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80062b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062b6:	4b48      	ldr	r3, [pc, #288]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062be:	ee07 3a90 	vmov	s15, r3
 80062c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80062ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80063e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062e6:	e021      	b.n	800632c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	ee07 3a90 	vmov	s15, r3
 80062ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80063e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80062f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062fa:	4b37      	ldr	r3, [pc, #220]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006302:	ee07 3a90 	vmov	s15, r3
 8006306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800630a:	ed97 6a03 	vldr	s12, [r7, #12]
 800630e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80063e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800631a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800631e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006326:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800632a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800632c:	4b2a      	ldr	r3, [pc, #168]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800632e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006330:	0a5b      	lsrs	r3, r3, #9
 8006332:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006336:	ee07 3a90 	vmov	s15, r3
 800633a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800633e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006342:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006346:	edd7 6a07 	vldr	s13, [r7, #28]
 800634a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800634e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006352:	ee17 2a90 	vmov	r2, s15
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800635a:	4b1f      	ldr	r3, [pc, #124]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800635c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800635e:	0c1b      	lsrs	r3, r3, #16
 8006360:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006364:	ee07 3a90 	vmov	s15, r3
 8006368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800636c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006370:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006374:	edd7 6a07 	vldr	s13, [r7, #28]
 8006378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800637c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006380:	ee17 2a90 	vmov	r2, s15
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006388:	4b13      	ldr	r3, [pc, #76]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800638a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800638c:	0e1b      	lsrs	r3, r3, #24
 800638e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006392:	ee07 3a90 	vmov	s15, r3
 8006396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800639a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800639e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80063a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063ae:	ee17 2a90 	vmov	r2, s15
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80063b6:	e008      	b.n	80063ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	609a      	str	r2, [r3, #8]
}
 80063ca:	bf00      	nop
 80063cc:	3724      	adds	r7, #36	@ 0x24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	58024400 	.word	0x58024400
 80063dc:	03d09000 	.word	0x03d09000
 80063e0:	46000000 	.word	0x46000000
 80063e4:	4c742400 	.word	0x4c742400
 80063e8:	4a742400 	.word	0x4a742400
 80063ec:	4bbebc20 	.word	0x4bbebc20

080063f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b089      	sub	sp, #36	@ 0x24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063f8:	4ba1      	ldr	r3, [pc, #644]	@ (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063fc:	f003 0303 	and.w	r3, r3, #3
 8006400:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006402:	4b9f      	ldr	r3, [pc, #636]	@ (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006406:	0d1b      	lsrs	r3, r3, #20
 8006408:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800640c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800640e:	4b9c      	ldr	r3, [pc, #624]	@ (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006412:	0a1b      	lsrs	r3, r3, #8
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800641a:	4b99      	ldr	r3, [pc, #612]	@ (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800641c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800641e:	08db      	lsrs	r3, r3, #3
 8006420:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	fb02 f303 	mul.w	r3, r2, r3
 800642a:	ee07 3a90 	vmov	s15, r3
 800642e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006432:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 8111 	beq.w	8006660 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	2b02      	cmp	r3, #2
 8006442:	f000 8083 	beq.w	800654c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	2b02      	cmp	r3, #2
 800644a:	f200 80a1 	bhi.w	8006590 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d056      	beq.n	8006508 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800645a:	e099      	b.n	8006590 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800645c:	4b88      	ldr	r3, [pc, #544]	@ (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0320 	and.w	r3, r3, #32
 8006464:	2b00      	cmp	r3, #0
 8006466:	d02d      	beq.n	80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006468:	4b85      	ldr	r3, [pc, #532]	@ (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	08db      	lsrs	r3, r3, #3
 800646e:	f003 0303 	and.w	r3, r3, #3
 8006472:	4a84      	ldr	r2, [pc, #528]	@ (8006684 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006474:	fa22 f303 	lsr.w	r3, r2, r3
 8006478:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	ee07 3a90 	vmov	s15, r3
 8006480:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	ee07 3a90 	vmov	s15, r3
 800648a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800648e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006492:	4b7b      	ldr	r3, [pc, #492]	@ (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800649a:	ee07 3a90 	vmov	s15, r3
 800649e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80064a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006688 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80064c2:	e087      	b.n	80065d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	ee07 3a90 	vmov	s15, r3
 80064ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800668c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80064d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064d6:	4b6a      	ldr	r3, [pc, #424]	@ (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064de:	ee07 3a90 	vmov	s15, r3
 80064e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80064ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006688 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006502:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006506:	e065      	b.n	80065d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	ee07 3a90 	vmov	s15, r3
 800650e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006512:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800651a:	4b59      	ldr	r3, [pc, #356]	@ (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800651c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800651e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006522:	ee07 3a90 	vmov	s15, r3
 8006526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800652a:	ed97 6a03 	vldr	s12, [r7, #12]
 800652e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006688 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800653a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800653e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006546:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800654a:	e043      	b.n	80065d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	ee07 3a90 	vmov	s15, r3
 8006552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006556:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006694 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800655a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800655e:	4b48      	ldr	r3, [pc, #288]	@ (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006566:	ee07 3a90 	vmov	s15, r3
 800656a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800656e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006572:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006688 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800657a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800657e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800658a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800658e:	e021      	b.n	80065d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	ee07 3a90 	vmov	s15, r3
 8006596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800659a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800659e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065a2:	4b37      	ldr	r3, [pc, #220]	@ (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065aa:	ee07 3a90 	vmov	s15, r3
 80065ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80065b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006688 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80065d4:	4b2a      	ldr	r3, [pc, #168]	@ (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d8:	0a5b      	lsrs	r3, r3, #9
 80065da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065de:	ee07 3a90 	vmov	s15, r3
 80065e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80065f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065fa:	ee17 2a90 	vmov	r2, s15
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006602:	4b1f      	ldr	r3, [pc, #124]	@ (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006606:	0c1b      	lsrs	r3, r3, #16
 8006608:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800660c:	ee07 3a90 	vmov	s15, r3
 8006610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006614:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006618:	ee37 7a87 	vadd.f32	s14, s15, s14
 800661c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006620:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006624:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006628:	ee17 2a90 	vmov	r2, s15
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006630:	4b13      	ldr	r3, [pc, #76]	@ (8006680 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006634:	0e1b      	lsrs	r3, r3, #24
 8006636:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800663a:	ee07 3a90 	vmov	s15, r3
 800663e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006642:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006646:	ee37 7a87 	vadd.f32	s14, s15, s14
 800664a:	edd7 6a07 	vldr	s13, [r7, #28]
 800664e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006656:	ee17 2a90 	vmov	r2, s15
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800665e:	e008      	b.n	8006672 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	609a      	str	r2, [r3, #8]
}
 8006672:	bf00      	nop
 8006674:	3724      	adds	r7, #36	@ 0x24
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	58024400 	.word	0x58024400
 8006684:	03d09000 	.word	0x03d09000
 8006688:	46000000 	.word	0x46000000
 800668c:	4c742400 	.word	0x4c742400
 8006690:	4a742400 	.word	0x4a742400
 8006694:	4bbebc20 	.word	0x4bbebc20

08006698 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80066a6:	4b53      	ldr	r3, [pc, #332]	@ (80067f4 <RCCEx_PLL2_Config+0x15c>)
 80066a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066aa:	f003 0303 	and.w	r3, r3, #3
 80066ae:	2b03      	cmp	r3, #3
 80066b0:	d101      	bne.n	80066b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e099      	b.n	80067ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80066b6:	4b4f      	ldr	r3, [pc, #316]	@ (80067f4 <RCCEx_PLL2_Config+0x15c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a4e      	ldr	r2, [pc, #312]	@ (80067f4 <RCCEx_PLL2_Config+0x15c>)
 80066bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80066c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066c2:	f7fa fd57 	bl	8001174 <HAL_GetTick>
 80066c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80066c8:	e008      	b.n	80066dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80066ca:	f7fa fd53 	bl	8001174 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d901      	bls.n	80066dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e086      	b.n	80067ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80066dc:	4b45      	ldr	r3, [pc, #276]	@ (80067f4 <RCCEx_PLL2_Config+0x15c>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1f0      	bne.n	80066ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80066e8:	4b42      	ldr	r3, [pc, #264]	@ (80067f4 <RCCEx_PLL2_Config+0x15c>)
 80066ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	031b      	lsls	r3, r3, #12
 80066f6:	493f      	ldr	r1, [pc, #252]	@ (80067f4 <RCCEx_PLL2_Config+0x15c>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	3b01      	subs	r3, #1
 8006702:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	3b01      	subs	r3, #1
 800670c:	025b      	lsls	r3, r3, #9
 800670e:	b29b      	uxth	r3, r3
 8006710:	431a      	orrs	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	3b01      	subs	r3, #1
 8006718:	041b      	lsls	r3, r3, #16
 800671a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800671e:	431a      	orrs	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	3b01      	subs	r3, #1
 8006726:	061b      	lsls	r3, r3, #24
 8006728:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800672c:	4931      	ldr	r1, [pc, #196]	@ (80067f4 <RCCEx_PLL2_Config+0x15c>)
 800672e:	4313      	orrs	r3, r2
 8006730:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006732:	4b30      	ldr	r3, [pc, #192]	@ (80067f4 <RCCEx_PLL2_Config+0x15c>)
 8006734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006736:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	492d      	ldr	r1, [pc, #180]	@ (80067f4 <RCCEx_PLL2_Config+0x15c>)
 8006740:	4313      	orrs	r3, r2
 8006742:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006744:	4b2b      	ldr	r3, [pc, #172]	@ (80067f4 <RCCEx_PLL2_Config+0x15c>)
 8006746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006748:	f023 0220 	bic.w	r2, r3, #32
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	4928      	ldr	r1, [pc, #160]	@ (80067f4 <RCCEx_PLL2_Config+0x15c>)
 8006752:	4313      	orrs	r3, r2
 8006754:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006756:	4b27      	ldr	r3, [pc, #156]	@ (80067f4 <RCCEx_PLL2_Config+0x15c>)
 8006758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800675a:	4a26      	ldr	r2, [pc, #152]	@ (80067f4 <RCCEx_PLL2_Config+0x15c>)
 800675c:	f023 0310 	bic.w	r3, r3, #16
 8006760:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006762:	4b24      	ldr	r3, [pc, #144]	@ (80067f4 <RCCEx_PLL2_Config+0x15c>)
 8006764:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006766:	4b24      	ldr	r3, [pc, #144]	@ (80067f8 <RCCEx_PLL2_Config+0x160>)
 8006768:	4013      	ands	r3, r2
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	69d2      	ldr	r2, [r2, #28]
 800676e:	00d2      	lsls	r2, r2, #3
 8006770:	4920      	ldr	r1, [pc, #128]	@ (80067f4 <RCCEx_PLL2_Config+0x15c>)
 8006772:	4313      	orrs	r3, r2
 8006774:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006776:	4b1f      	ldr	r3, [pc, #124]	@ (80067f4 <RCCEx_PLL2_Config+0x15c>)
 8006778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800677a:	4a1e      	ldr	r2, [pc, #120]	@ (80067f4 <RCCEx_PLL2_Config+0x15c>)
 800677c:	f043 0310 	orr.w	r3, r3, #16
 8006780:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d106      	bne.n	8006796 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006788:	4b1a      	ldr	r3, [pc, #104]	@ (80067f4 <RCCEx_PLL2_Config+0x15c>)
 800678a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800678c:	4a19      	ldr	r2, [pc, #100]	@ (80067f4 <RCCEx_PLL2_Config+0x15c>)
 800678e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006792:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006794:	e00f      	b.n	80067b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d106      	bne.n	80067aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800679c:	4b15      	ldr	r3, [pc, #84]	@ (80067f4 <RCCEx_PLL2_Config+0x15c>)
 800679e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a0:	4a14      	ldr	r2, [pc, #80]	@ (80067f4 <RCCEx_PLL2_Config+0x15c>)
 80067a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80067a8:	e005      	b.n	80067b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80067aa:	4b12      	ldr	r3, [pc, #72]	@ (80067f4 <RCCEx_PLL2_Config+0x15c>)
 80067ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ae:	4a11      	ldr	r2, [pc, #68]	@ (80067f4 <RCCEx_PLL2_Config+0x15c>)
 80067b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80067b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80067b6:	4b0f      	ldr	r3, [pc, #60]	@ (80067f4 <RCCEx_PLL2_Config+0x15c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a0e      	ldr	r2, [pc, #56]	@ (80067f4 <RCCEx_PLL2_Config+0x15c>)
 80067bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80067c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067c2:	f7fa fcd7 	bl	8001174 <HAL_GetTick>
 80067c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80067c8:	e008      	b.n	80067dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80067ca:	f7fa fcd3 	bl	8001174 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d901      	bls.n	80067dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e006      	b.n	80067ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80067dc:	4b05      	ldr	r3, [pc, #20]	@ (80067f4 <RCCEx_PLL2_Config+0x15c>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d0f0      	beq.n	80067ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	58024400 	.word	0x58024400
 80067f8:	ffff0007 	.word	0xffff0007

080067fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800680a:	4b53      	ldr	r3, [pc, #332]	@ (8006958 <RCCEx_PLL3_Config+0x15c>)
 800680c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	2b03      	cmp	r3, #3
 8006814:	d101      	bne.n	800681a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e099      	b.n	800694e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800681a:	4b4f      	ldr	r3, [pc, #316]	@ (8006958 <RCCEx_PLL3_Config+0x15c>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a4e      	ldr	r2, [pc, #312]	@ (8006958 <RCCEx_PLL3_Config+0x15c>)
 8006820:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006824:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006826:	f7fa fca5 	bl	8001174 <HAL_GetTick>
 800682a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800682c:	e008      	b.n	8006840 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800682e:	f7fa fca1 	bl	8001174 <HAL_GetTick>
 8006832:	4602      	mov	r2, r0
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	2b02      	cmp	r3, #2
 800683a:	d901      	bls.n	8006840 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e086      	b.n	800694e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006840:	4b45      	ldr	r3, [pc, #276]	@ (8006958 <RCCEx_PLL3_Config+0x15c>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1f0      	bne.n	800682e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800684c:	4b42      	ldr	r3, [pc, #264]	@ (8006958 <RCCEx_PLL3_Config+0x15c>)
 800684e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006850:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	051b      	lsls	r3, r3, #20
 800685a:	493f      	ldr	r1, [pc, #252]	@ (8006958 <RCCEx_PLL3_Config+0x15c>)
 800685c:	4313      	orrs	r3, r2
 800685e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	3b01      	subs	r3, #1
 8006866:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	3b01      	subs	r3, #1
 8006870:	025b      	lsls	r3, r3, #9
 8006872:	b29b      	uxth	r3, r3
 8006874:	431a      	orrs	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	3b01      	subs	r3, #1
 800687c:	041b      	lsls	r3, r3, #16
 800687e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006882:	431a      	orrs	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	3b01      	subs	r3, #1
 800688a:	061b      	lsls	r3, r3, #24
 800688c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006890:	4931      	ldr	r1, [pc, #196]	@ (8006958 <RCCEx_PLL3_Config+0x15c>)
 8006892:	4313      	orrs	r3, r2
 8006894:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006896:	4b30      	ldr	r3, [pc, #192]	@ (8006958 <RCCEx_PLL3_Config+0x15c>)
 8006898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800689a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	492d      	ldr	r1, [pc, #180]	@ (8006958 <RCCEx_PLL3_Config+0x15c>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80068a8:	4b2b      	ldr	r3, [pc, #172]	@ (8006958 <RCCEx_PLL3_Config+0x15c>)
 80068aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	4928      	ldr	r1, [pc, #160]	@ (8006958 <RCCEx_PLL3_Config+0x15c>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80068ba:	4b27      	ldr	r3, [pc, #156]	@ (8006958 <RCCEx_PLL3_Config+0x15c>)
 80068bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068be:	4a26      	ldr	r2, [pc, #152]	@ (8006958 <RCCEx_PLL3_Config+0x15c>)
 80068c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80068c6:	4b24      	ldr	r3, [pc, #144]	@ (8006958 <RCCEx_PLL3_Config+0x15c>)
 80068c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068ca:	4b24      	ldr	r3, [pc, #144]	@ (800695c <RCCEx_PLL3_Config+0x160>)
 80068cc:	4013      	ands	r3, r2
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	69d2      	ldr	r2, [r2, #28]
 80068d2:	00d2      	lsls	r2, r2, #3
 80068d4:	4920      	ldr	r1, [pc, #128]	@ (8006958 <RCCEx_PLL3_Config+0x15c>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80068da:	4b1f      	ldr	r3, [pc, #124]	@ (8006958 <RCCEx_PLL3_Config+0x15c>)
 80068dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068de:	4a1e      	ldr	r2, [pc, #120]	@ (8006958 <RCCEx_PLL3_Config+0x15c>)
 80068e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d106      	bne.n	80068fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80068ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006958 <RCCEx_PLL3_Config+0x15c>)
 80068ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f0:	4a19      	ldr	r2, [pc, #100]	@ (8006958 <RCCEx_PLL3_Config+0x15c>)
 80068f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80068f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80068f8:	e00f      	b.n	800691a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d106      	bne.n	800690e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006900:	4b15      	ldr	r3, [pc, #84]	@ (8006958 <RCCEx_PLL3_Config+0x15c>)
 8006902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006904:	4a14      	ldr	r2, [pc, #80]	@ (8006958 <RCCEx_PLL3_Config+0x15c>)
 8006906:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800690a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800690c:	e005      	b.n	800691a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800690e:	4b12      	ldr	r3, [pc, #72]	@ (8006958 <RCCEx_PLL3_Config+0x15c>)
 8006910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006912:	4a11      	ldr	r2, [pc, #68]	@ (8006958 <RCCEx_PLL3_Config+0x15c>)
 8006914:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006918:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800691a:	4b0f      	ldr	r3, [pc, #60]	@ (8006958 <RCCEx_PLL3_Config+0x15c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a0e      	ldr	r2, [pc, #56]	@ (8006958 <RCCEx_PLL3_Config+0x15c>)
 8006920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006924:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006926:	f7fa fc25 	bl	8001174 <HAL_GetTick>
 800692a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800692c:	e008      	b.n	8006940 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800692e:	f7fa fc21 	bl	8001174 <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	2b02      	cmp	r3, #2
 800693a:	d901      	bls.n	8006940 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e006      	b.n	800694e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006940:	4b05      	ldr	r3, [pc, #20]	@ (8006958 <RCCEx_PLL3_Config+0x15c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d0f0      	beq.n	800692e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800694c:	7bfb      	ldrb	r3, [r7, #15]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	58024400 	.word	0x58024400
 800695c:	ffff0007 	.word	0xffff0007

08006960 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e042      	b.n	80069f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006978:	2b00      	cmp	r3, #0
 800697a:	d106      	bne.n	800698a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7fa fa57 	bl	8000e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2224      	movs	r2, #36	@ 0x24
 800698e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f022 0201 	bic.w	r2, r2, #1
 80069a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d002      	beq.n	80069b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f001 fadc 	bl	8007f68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fd71 	bl	8007498 <UART_SetConfig>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d101      	bne.n	80069c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e01b      	b.n	80069f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80069ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689a      	ldr	r2, [r3, #8]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80069de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f042 0201 	orr.w	r2, r2, #1
 80069ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 fb5b 	bl	80080ac <UART_CheckIdleState>
 80069f6:	4603      	mov	r3, r0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b08a      	sub	sp, #40	@ 0x28
 8006a04:	af02      	add	r7, sp, #8
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	603b      	str	r3, [r7, #0]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a16:	2b20      	cmp	r3, #32
 8006a18:	d17b      	bne.n	8006b12 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d002      	beq.n	8006a26 <HAL_UART_Transmit+0x26>
 8006a20:	88fb      	ldrh	r3, [r7, #6]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e074      	b.n	8006b14 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2221      	movs	r2, #33	@ 0x21
 8006a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a3a:	f7fa fb9b 	bl	8001174 <HAL_GetTick>
 8006a3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	88fa      	ldrh	r2, [r7, #6]
 8006a44:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	88fa      	ldrh	r2, [r7, #6]
 8006a4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a58:	d108      	bne.n	8006a6c <HAL_UART_Transmit+0x6c>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d104      	bne.n	8006a6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006a62:	2300      	movs	r3, #0
 8006a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	61bb      	str	r3, [r7, #24]
 8006a6a:	e003      	b.n	8006a74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a70:	2300      	movs	r3, #0
 8006a72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a74:	e030      	b.n	8006ad8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	2180      	movs	r1, #128	@ 0x80
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f001 fbbd 	bl	8008200 <UART_WaitOnFlagUntilTimeout>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d005      	beq.n	8006a98 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e03d      	b.n	8006b14 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10b      	bne.n	8006ab6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006aac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	3302      	adds	r3, #2
 8006ab2:	61bb      	str	r3, [r7, #24]
 8006ab4:	e007      	b.n	8006ac6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	781a      	ldrb	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1c8      	bne.n	8006a76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	2200      	movs	r2, #0
 8006aec:	2140      	movs	r1, #64	@ 0x40
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f001 fb86 	bl	8008200 <UART_WaitOnFlagUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d005      	beq.n	8006b06 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2220      	movs	r2, #32
 8006afe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e006      	b.n	8006b14 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2220      	movs	r2, #32
 8006b0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e000      	b.n	8006b14 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006b12:	2302      	movs	r3, #2
  }
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3720      	adds	r7, #32
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08a      	sub	sp, #40	@ 0x28
 8006b20:	af02      	add	r7, sp, #8
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	603b      	str	r3, [r7, #0]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b32:	2b20      	cmp	r3, #32
 8006b34:	f040 80b5 	bne.w	8006ca2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d002      	beq.n	8006b44 <HAL_UART_Receive+0x28>
 8006b3e:	88fb      	ldrh	r3, [r7, #6]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e0ad      	b.n	8006ca4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2222      	movs	r2, #34	@ 0x22
 8006b54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b5e:	f7fa fb09 	bl	8001174 <HAL_GetTick>
 8006b62:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	88fa      	ldrh	r2, [r7, #6]
 8006b68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	88fa      	ldrh	r2, [r7, #6]
 8006b70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b7c:	d10e      	bne.n	8006b9c <HAL_UART_Receive+0x80>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d105      	bne.n	8006b92 <HAL_UART_Receive+0x76>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006b8c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006b90:	e02d      	b.n	8006bee <HAL_UART_Receive+0xd2>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	22ff      	movs	r2, #255	@ 0xff
 8006b96:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006b9a:	e028      	b.n	8006bee <HAL_UART_Receive+0xd2>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10d      	bne.n	8006bc0 <HAL_UART_Receive+0xa4>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d104      	bne.n	8006bb6 <HAL_UART_Receive+0x9a>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	22ff      	movs	r2, #255	@ 0xff
 8006bb0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006bb4:	e01b      	b.n	8006bee <HAL_UART_Receive+0xd2>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	227f      	movs	r2, #127	@ 0x7f
 8006bba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006bbe:	e016      	b.n	8006bee <HAL_UART_Receive+0xd2>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bc8:	d10d      	bne.n	8006be6 <HAL_UART_Receive+0xca>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d104      	bne.n	8006bdc <HAL_UART_Receive+0xc0>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	227f      	movs	r2, #127	@ 0x7f
 8006bd6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006bda:	e008      	b.n	8006bee <HAL_UART_Receive+0xd2>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	223f      	movs	r2, #63	@ 0x3f
 8006be0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006be4:	e003      	b.n	8006bee <HAL_UART_Receive+0xd2>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006bf4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bfe:	d108      	bne.n	8006c12 <HAL_UART_Receive+0xf6>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d104      	bne.n	8006c12 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	61bb      	str	r3, [r7, #24]
 8006c10:	e003      	b.n	8006c1a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c16:	2300      	movs	r3, #0
 8006c18:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006c1a:	e036      	b.n	8006c8a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	2200      	movs	r2, #0
 8006c24:	2120      	movs	r1, #32
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f001 faea 	bl	8008200 <UART_WaitOnFlagUntilTimeout>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d005      	beq.n	8006c3e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2220      	movs	r2, #32
 8006c36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e032      	b.n	8006ca4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10c      	bne.n	8006c5e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	8a7b      	ldrh	r3, [r7, #18]
 8006c4e:	4013      	ands	r3, r2
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	3302      	adds	r3, #2
 8006c5a:	61bb      	str	r3, [r7, #24]
 8006c5c:	e00c      	b.n	8006c78 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c64:	b2da      	uxtb	r2, r3
 8006c66:	8a7b      	ldrh	r3, [r7, #18]
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	3301      	adds	r3, #1
 8006c76:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	3b01      	subs	r3, #1
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1c2      	bne.n	8006c1c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2220      	movs	r2, #32
 8006c9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	e000      	b.n	8006ca4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8006ca2:	2302      	movs	r3, #2
  }
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3720      	adds	r7, #32
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b0ba      	sub	sp, #232	@ 0xe8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006cd2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006cd6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006cda:	4013      	ands	r3, r2
 8006cdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006ce0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d11b      	bne.n	8006d20 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cec:	f003 0320 	and.w	r3, r3, #32
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d015      	beq.n	8006d20 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cf8:	f003 0320 	and.w	r3, r3, #32
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d105      	bne.n	8006d0c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d009      	beq.n	8006d20 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 8393 	beq.w	800743c <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	4798      	blx	r3
      }
      return;
 8006d1e:	e38d      	b.n	800743c <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006d20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 8123 	beq.w	8006f70 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006d2a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006d2e:	4b8d      	ldr	r3, [pc, #564]	@ (8006f64 <HAL_UART_IRQHandler+0x2b8>)
 8006d30:	4013      	ands	r3, r2
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d106      	bne.n	8006d44 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006d36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006d3a:	4b8b      	ldr	r3, [pc, #556]	@ (8006f68 <HAL_UART_IRQHandler+0x2bc>)
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f000 8116 	beq.w	8006f70 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d48:	f003 0301 	and.w	r3, r3, #1
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d011      	beq.n	8006d74 <HAL_UART_IRQHandler+0xc8>
 8006d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00b      	beq.n	8006d74 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2201      	movs	r2, #1
 8006d62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d6a:	f043 0201 	orr.w	r2, r3, #1
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d011      	beq.n	8006da4 <HAL_UART_IRQHandler+0xf8>
 8006d80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00b      	beq.n	8006da4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2202      	movs	r2, #2
 8006d92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d9a:	f043 0204 	orr.w	r2, r3, #4
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d011      	beq.n	8006dd4 <HAL_UART_IRQHandler+0x128>
 8006db0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00b      	beq.n	8006dd4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2204      	movs	r2, #4
 8006dc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dca:	f043 0202 	orr.w	r2, r3, #2
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dd8:	f003 0308 	and.w	r3, r3, #8
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d017      	beq.n	8006e10 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006de4:	f003 0320 	and.w	r3, r3, #32
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d105      	bne.n	8006df8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006dec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006df0:	4b5c      	ldr	r3, [pc, #368]	@ (8006f64 <HAL_UART_IRQHandler+0x2b8>)
 8006df2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00b      	beq.n	8006e10 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2208      	movs	r2, #8
 8006dfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e06:	f043 0208 	orr.w	r2, r3, #8
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d012      	beq.n	8006e42 <HAL_UART_IRQHandler+0x196>
 8006e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00c      	beq.n	8006e42 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e38:	f043 0220 	orr.w	r2, r3, #32
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 82f9 	beq.w	8007440 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e52:	f003 0320 	and.w	r3, r3, #32
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d013      	beq.n	8006e82 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e5e:	f003 0320 	and.w	r3, r3, #32
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d105      	bne.n	8006e72 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d007      	beq.n	8006e82 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e96:	2b40      	cmp	r3, #64	@ 0x40
 8006e98:	d005      	beq.n	8006ea6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e9e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d054      	beq.n	8006f50 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f001 fa18 	bl	80082dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eb6:	2b40      	cmp	r3, #64	@ 0x40
 8006eb8:	d146      	bne.n	8006f48 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3308      	adds	r3, #8
 8006ec0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ec8:	e853 3f00 	ldrex	r3, [r3]
 8006ecc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006ed0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ed4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006ee6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006eea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006ef2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006efe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1d9      	bne.n	8006eba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d017      	beq.n	8006f40 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f16:	4a15      	ldr	r2, [pc, #84]	@ (8006f6c <HAL_UART_IRQHandler+0x2c0>)
 8006f18:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7fb f941 	bl	80021a8 <HAL_DMA_Abort_IT>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d019      	beq.n	8006f60 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006f3a:	4610      	mov	r0, r2
 8006f3c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f3e:	e00f      	b.n	8006f60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fa93 	bl	800746c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f46:	e00b      	b.n	8006f60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fa8f 	bl	800746c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f4e:	e007      	b.n	8006f60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fa8b 	bl	800746c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006f5e:	e26f      	b.n	8007440 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f60:	bf00      	nop
    return;
 8006f62:	e26d      	b.n	8007440 <HAL_UART_IRQHandler+0x794>
 8006f64:	10000001 	.word	0x10000001
 8006f68:	04000120 	.word	0x04000120
 8006f6c:	080083a9 	.word	0x080083a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	f040 8203 	bne.w	8007380 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f7e:	f003 0310 	and.w	r3, r3, #16
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 81fc 	beq.w	8007380 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f8c:	f003 0310 	and.w	r3, r3, #16
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f000 81f5 	beq.w	8007380 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2210      	movs	r2, #16
 8006f9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fa8:	2b40      	cmp	r3, #64	@ 0x40
 8006faa:	f040 816d 	bne.w	8007288 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4aa4      	ldr	r2, [pc, #656]	@ (8007248 <HAL_UART_IRQHandler+0x59c>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d068      	beq.n	800708e <HAL_UART_IRQHandler+0x3e2>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4aa1      	ldr	r2, [pc, #644]	@ (800724c <HAL_UART_IRQHandler+0x5a0>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d061      	beq.n	800708e <HAL_UART_IRQHandler+0x3e2>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a9f      	ldr	r2, [pc, #636]	@ (8007250 <HAL_UART_IRQHandler+0x5a4>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d05a      	beq.n	800708e <HAL_UART_IRQHandler+0x3e2>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a9c      	ldr	r2, [pc, #624]	@ (8007254 <HAL_UART_IRQHandler+0x5a8>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d053      	beq.n	800708e <HAL_UART_IRQHandler+0x3e2>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a9a      	ldr	r2, [pc, #616]	@ (8007258 <HAL_UART_IRQHandler+0x5ac>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d04c      	beq.n	800708e <HAL_UART_IRQHandler+0x3e2>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a97      	ldr	r2, [pc, #604]	@ (800725c <HAL_UART_IRQHandler+0x5b0>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d045      	beq.n	800708e <HAL_UART_IRQHandler+0x3e2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a95      	ldr	r2, [pc, #596]	@ (8007260 <HAL_UART_IRQHandler+0x5b4>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d03e      	beq.n	800708e <HAL_UART_IRQHandler+0x3e2>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a92      	ldr	r2, [pc, #584]	@ (8007264 <HAL_UART_IRQHandler+0x5b8>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d037      	beq.n	800708e <HAL_UART_IRQHandler+0x3e2>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a90      	ldr	r2, [pc, #576]	@ (8007268 <HAL_UART_IRQHandler+0x5bc>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d030      	beq.n	800708e <HAL_UART_IRQHandler+0x3e2>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a8d      	ldr	r2, [pc, #564]	@ (800726c <HAL_UART_IRQHandler+0x5c0>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d029      	beq.n	800708e <HAL_UART_IRQHandler+0x3e2>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a8b      	ldr	r2, [pc, #556]	@ (8007270 <HAL_UART_IRQHandler+0x5c4>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d022      	beq.n	800708e <HAL_UART_IRQHandler+0x3e2>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a88      	ldr	r2, [pc, #544]	@ (8007274 <HAL_UART_IRQHandler+0x5c8>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d01b      	beq.n	800708e <HAL_UART_IRQHandler+0x3e2>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a86      	ldr	r2, [pc, #536]	@ (8007278 <HAL_UART_IRQHandler+0x5cc>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d014      	beq.n	800708e <HAL_UART_IRQHandler+0x3e2>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a83      	ldr	r2, [pc, #524]	@ (800727c <HAL_UART_IRQHandler+0x5d0>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d00d      	beq.n	800708e <HAL_UART_IRQHandler+0x3e2>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a81      	ldr	r2, [pc, #516]	@ (8007280 <HAL_UART_IRQHandler+0x5d4>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d006      	beq.n	800708e <HAL_UART_IRQHandler+0x3e2>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a7e      	ldr	r2, [pc, #504]	@ (8007284 <HAL_UART_IRQHandler+0x5d8>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d106      	bne.n	800709c <HAL_UART_IRQHandler+0x3f0>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	b29b      	uxth	r3, r3
 800709a:	e005      	b.n	80070a8 <HAL_UART_IRQHandler+0x3fc>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 80ad 	beq.w	8007210 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80070bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070c0:	429a      	cmp	r2, r3
 80070c2:	f080 80a5 	bcs.w	8007210 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070dc:	f000 8087 	beq.w	80071ee <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80070ec:	e853 3f00 	ldrex	r3, [r3]
 80070f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80070f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	461a      	mov	r2, r3
 8007106:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800710a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800710e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007112:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007116:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800711a:	e841 2300 	strex	r3, r2, [r1]
 800711e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007122:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1da      	bne.n	80070e0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	3308      	adds	r3, #8
 8007130:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007132:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007134:	e853 3f00 	ldrex	r3, [r3]
 8007138:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800713a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800713c:	f023 0301 	bic.w	r3, r3, #1
 8007140:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	3308      	adds	r3, #8
 800714a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800714e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007152:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007154:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007156:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800715a:	e841 2300 	strex	r3, r2, [r1]
 800715e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007160:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1e1      	bne.n	800712a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3308      	adds	r3, #8
 800716c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007170:	e853 3f00 	ldrex	r3, [r3]
 8007174:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007176:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007178:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800717c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3308      	adds	r3, #8
 8007186:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800718a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800718c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007190:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007192:	e841 2300 	strex	r3, r2, [r1]
 8007196:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007198:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1e3      	bne.n	8007166 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2220      	movs	r2, #32
 80071a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071b4:	e853 3f00 	ldrex	r3, [r3]
 80071b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80071ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071bc:	f023 0310 	bic.w	r3, r3, #16
 80071c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	461a      	mov	r2, r3
 80071ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071d6:	e841 2300 	strex	r3, r2, [r1]
 80071da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80071dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1e4      	bne.n	80071ac <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7fa fcbf 	bl	8001b6c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2202      	movs	r2, #2
 80071f2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007200:	b29b      	uxth	r3, r3
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	b29b      	uxth	r3, r3
 8007206:	4619      	mov	r1, r3
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 f939 	bl	8007480 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800720e:	e119      	b.n	8007444 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007216:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800721a:	429a      	cmp	r2, r3
 800721c:	f040 8112 	bne.w	8007444 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800722c:	f040 810a 	bne.w	8007444 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800723c:	4619      	mov	r1, r3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f91e 	bl	8007480 <HAL_UARTEx_RxEventCallback>
      return;
 8007244:	e0fe      	b.n	8007444 <HAL_UART_IRQHandler+0x798>
 8007246:	bf00      	nop
 8007248:	40020010 	.word	0x40020010
 800724c:	40020028 	.word	0x40020028
 8007250:	40020040 	.word	0x40020040
 8007254:	40020058 	.word	0x40020058
 8007258:	40020070 	.word	0x40020070
 800725c:	40020088 	.word	0x40020088
 8007260:	400200a0 	.word	0x400200a0
 8007264:	400200b8 	.word	0x400200b8
 8007268:	40020410 	.word	0x40020410
 800726c:	40020428 	.word	0x40020428
 8007270:	40020440 	.word	0x40020440
 8007274:	40020458 	.word	0x40020458
 8007278:	40020470 	.word	0x40020470
 800727c:	40020488 	.word	0x40020488
 8007280:	400204a0 	.word	0x400204a0
 8007284:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007294:	b29b      	uxth	r3, r3
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 80cf 	beq.w	8007448 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80072aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f000 80ca 	beq.w	8007448 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072bc:	e853 3f00 	ldrex	r3, [r3]
 80072c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	461a      	mov	r2, r3
 80072d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80072d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80072d8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072de:	e841 2300 	strex	r3, r2, [r1]
 80072e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1e4      	bne.n	80072b4 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	3308      	adds	r3, #8
 80072f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f4:	e853 3f00 	ldrex	r3, [r3]
 80072f8:	623b      	str	r3, [r7, #32]
   return(result);
 80072fa:	6a3a      	ldr	r2, [r7, #32]
 80072fc:	4b55      	ldr	r3, [pc, #340]	@ (8007454 <HAL_UART_IRQHandler+0x7a8>)
 80072fe:	4013      	ands	r3, r2
 8007300:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	3308      	adds	r3, #8
 800730a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800730e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007310:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007312:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007314:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007316:	e841 2300 	strex	r3, r2, [r1]
 800731a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800731c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1e3      	bne.n	80072ea <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2220      	movs	r2, #32
 8007326:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	e853 3f00 	ldrex	r3, [r3]
 8007342:	60fb      	str	r3, [r7, #12]
   return(result);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f023 0310 	bic.w	r3, r3, #16
 800734a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007358:	61fb      	str	r3, [r7, #28]
 800735a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735c:	69b9      	ldr	r1, [r7, #24]
 800735e:	69fa      	ldr	r2, [r7, #28]
 8007360:	e841 2300 	strex	r3, r2, [r1]
 8007364:	617b      	str	r3, [r7, #20]
   return(result);
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1e4      	bne.n	8007336 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2202      	movs	r2, #2
 8007370:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007372:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007376:	4619      	mov	r1, r3
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f881 	bl	8007480 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800737e:	e063      	b.n	8007448 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007384:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00e      	beq.n	80073aa <HAL_UART_IRQHandler+0x6fe>
 800738c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007390:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d008      	beq.n	80073aa <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80073a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f001 f83d 	bl	8008422 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80073a8:	e051      	b.n	800744e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80073aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d014      	beq.n	80073e0 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80073b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d105      	bne.n	80073ce <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80073c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d008      	beq.n	80073e0 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d03a      	beq.n	800744c <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	4798      	blx	r3
    }
    return;
 80073de:	e035      	b.n	800744c <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80073e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d009      	beq.n	8007400 <HAL_UART_IRQHandler+0x754>
 80073ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d003      	beq.n	8007400 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 ffe7 	bl	80083cc <UART_EndTransmit_IT>
    return;
 80073fe:	e026      	b.n	800744e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007404:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d009      	beq.n	8007420 <HAL_UART_IRQHandler+0x774>
 800740c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007410:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d003      	beq.n	8007420 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f001 f816 	bl	800844a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800741e:	e016      	b.n	800744e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007424:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d010      	beq.n	800744e <HAL_UART_IRQHandler+0x7a2>
 800742c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007430:	2b00      	cmp	r3, #0
 8007432:	da0c      	bge.n	800744e <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fffe 	bl	8008436 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800743a:	e008      	b.n	800744e <HAL_UART_IRQHandler+0x7a2>
      return;
 800743c:	bf00      	nop
 800743e:	e006      	b.n	800744e <HAL_UART_IRQHandler+0x7a2>
    return;
 8007440:	bf00      	nop
 8007442:	e004      	b.n	800744e <HAL_UART_IRQHandler+0x7a2>
      return;
 8007444:	bf00      	nop
 8007446:	e002      	b.n	800744e <HAL_UART_IRQHandler+0x7a2>
      return;
 8007448:	bf00      	nop
 800744a:	e000      	b.n	800744e <HAL_UART_IRQHandler+0x7a2>
    return;
 800744c:	bf00      	nop
  }
}
 800744e:	37e8      	adds	r7, #232	@ 0xe8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	effffffe 	.word	0xeffffffe

08007458 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	460b      	mov	r3, r1
 800748a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800749c:	b092      	sub	sp, #72	@ 0x48
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	689a      	ldr	r2, [r3, #8]
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	431a      	orrs	r2, r3
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	431a      	orrs	r2, r3
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	69db      	ldr	r3, [r3, #28]
 80074bc:	4313      	orrs	r3, r2
 80074be:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	4bbe      	ldr	r3, [pc, #760]	@ (80077c0 <UART_SetConfig+0x328>)
 80074c8:	4013      	ands	r3, r2
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	6812      	ldr	r2, [r2, #0]
 80074ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80074d0:	430b      	orrs	r3, r1
 80074d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	68da      	ldr	r2, [r3, #12]
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	430a      	orrs	r2, r1
 80074e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4ab3      	ldr	r2, [pc, #716]	@ (80077c4 <UART_SetConfig+0x32c>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d004      	beq.n	8007504 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007500:	4313      	orrs	r3, r2
 8007502:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	689a      	ldr	r2, [r3, #8]
 800750a:	4baf      	ldr	r3, [pc, #700]	@ (80077c8 <UART_SetConfig+0x330>)
 800750c:	4013      	ands	r3, r2
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	6812      	ldr	r2, [r2, #0]
 8007512:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007514:	430b      	orrs	r3, r1
 8007516:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800751e:	f023 010f 	bic.w	r1, r3, #15
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	430a      	orrs	r2, r1
 800752c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4aa6      	ldr	r2, [pc, #664]	@ (80077cc <UART_SetConfig+0x334>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d177      	bne.n	8007628 <UART_SetConfig+0x190>
 8007538:	4ba5      	ldr	r3, [pc, #660]	@ (80077d0 <UART_SetConfig+0x338>)
 800753a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800753c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007540:	2b28      	cmp	r3, #40	@ 0x28
 8007542:	d86d      	bhi.n	8007620 <UART_SetConfig+0x188>
 8007544:	a201      	add	r2, pc, #4	@ (adr r2, 800754c <UART_SetConfig+0xb4>)
 8007546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754a:	bf00      	nop
 800754c:	080075f1 	.word	0x080075f1
 8007550:	08007621 	.word	0x08007621
 8007554:	08007621 	.word	0x08007621
 8007558:	08007621 	.word	0x08007621
 800755c:	08007621 	.word	0x08007621
 8007560:	08007621 	.word	0x08007621
 8007564:	08007621 	.word	0x08007621
 8007568:	08007621 	.word	0x08007621
 800756c:	080075f9 	.word	0x080075f9
 8007570:	08007621 	.word	0x08007621
 8007574:	08007621 	.word	0x08007621
 8007578:	08007621 	.word	0x08007621
 800757c:	08007621 	.word	0x08007621
 8007580:	08007621 	.word	0x08007621
 8007584:	08007621 	.word	0x08007621
 8007588:	08007621 	.word	0x08007621
 800758c:	08007601 	.word	0x08007601
 8007590:	08007621 	.word	0x08007621
 8007594:	08007621 	.word	0x08007621
 8007598:	08007621 	.word	0x08007621
 800759c:	08007621 	.word	0x08007621
 80075a0:	08007621 	.word	0x08007621
 80075a4:	08007621 	.word	0x08007621
 80075a8:	08007621 	.word	0x08007621
 80075ac:	08007609 	.word	0x08007609
 80075b0:	08007621 	.word	0x08007621
 80075b4:	08007621 	.word	0x08007621
 80075b8:	08007621 	.word	0x08007621
 80075bc:	08007621 	.word	0x08007621
 80075c0:	08007621 	.word	0x08007621
 80075c4:	08007621 	.word	0x08007621
 80075c8:	08007621 	.word	0x08007621
 80075cc:	08007611 	.word	0x08007611
 80075d0:	08007621 	.word	0x08007621
 80075d4:	08007621 	.word	0x08007621
 80075d8:	08007621 	.word	0x08007621
 80075dc:	08007621 	.word	0x08007621
 80075e0:	08007621 	.word	0x08007621
 80075e4:	08007621 	.word	0x08007621
 80075e8:	08007621 	.word	0x08007621
 80075ec:	08007619 	.word	0x08007619
 80075f0:	2301      	movs	r3, #1
 80075f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075f6:	e222      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80075f8:	2304      	movs	r3, #4
 80075fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075fe:	e21e      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007600:	2308      	movs	r3, #8
 8007602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007606:	e21a      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007608:	2310      	movs	r3, #16
 800760a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800760e:	e216      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007610:	2320      	movs	r3, #32
 8007612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007616:	e212      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007618:	2340      	movs	r3, #64	@ 0x40
 800761a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800761e:	e20e      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007620:	2380      	movs	r3, #128	@ 0x80
 8007622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007626:	e20a      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a69      	ldr	r2, [pc, #420]	@ (80077d4 <UART_SetConfig+0x33c>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d130      	bne.n	8007694 <UART_SetConfig+0x1fc>
 8007632:	4b67      	ldr	r3, [pc, #412]	@ (80077d0 <UART_SetConfig+0x338>)
 8007634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007636:	f003 0307 	and.w	r3, r3, #7
 800763a:	2b05      	cmp	r3, #5
 800763c:	d826      	bhi.n	800768c <UART_SetConfig+0x1f4>
 800763e:	a201      	add	r2, pc, #4	@ (adr r2, 8007644 <UART_SetConfig+0x1ac>)
 8007640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007644:	0800765d 	.word	0x0800765d
 8007648:	08007665 	.word	0x08007665
 800764c:	0800766d 	.word	0x0800766d
 8007650:	08007675 	.word	0x08007675
 8007654:	0800767d 	.word	0x0800767d
 8007658:	08007685 	.word	0x08007685
 800765c:	2300      	movs	r3, #0
 800765e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007662:	e1ec      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007664:	2304      	movs	r3, #4
 8007666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800766a:	e1e8      	b.n	8007a3e <UART_SetConfig+0x5a6>
 800766c:	2308      	movs	r3, #8
 800766e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007672:	e1e4      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007674:	2310      	movs	r3, #16
 8007676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800767a:	e1e0      	b.n	8007a3e <UART_SetConfig+0x5a6>
 800767c:	2320      	movs	r3, #32
 800767e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007682:	e1dc      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007684:	2340      	movs	r3, #64	@ 0x40
 8007686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800768a:	e1d8      	b.n	8007a3e <UART_SetConfig+0x5a6>
 800768c:	2380      	movs	r3, #128	@ 0x80
 800768e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007692:	e1d4      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a4f      	ldr	r2, [pc, #316]	@ (80077d8 <UART_SetConfig+0x340>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d130      	bne.n	8007700 <UART_SetConfig+0x268>
 800769e:	4b4c      	ldr	r3, [pc, #304]	@ (80077d0 <UART_SetConfig+0x338>)
 80076a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076a2:	f003 0307 	and.w	r3, r3, #7
 80076a6:	2b05      	cmp	r3, #5
 80076a8:	d826      	bhi.n	80076f8 <UART_SetConfig+0x260>
 80076aa:	a201      	add	r2, pc, #4	@ (adr r2, 80076b0 <UART_SetConfig+0x218>)
 80076ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b0:	080076c9 	.word	0x080076c9
 80076b4:	080076d1 	.word	0x080076d1
 80076b8:	080076d9 	.word	0x080076d9
 80076bc:	080076e1 	.word	0x080076e1
 80076c0:	080076e9 	.word	0x080076e9
 80076c4:	080076f1 	.word	0x080076f1
 80076c8:	2300      	movs	r3, #0
 80076ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ce:	e1b6      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80076d0:	2304      	movs	r3, #4
 80076d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076d6:	e1b2      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80076d8:	2308      	movs	r3, #8
 80076da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076de:	e1ae      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80076e0:	2310      	movs	r3, #16
 80076e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076e6:	e1aa      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80076e8:	2320      	movs	r3, #32
 80076ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ee:	e1a6      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80076f0:	2340      	movs	r3, #64	@ 0x40
 80076f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076f6:	e1a2      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80076f8:	2380      	movs	r3, #128	@ 0x80
 80076fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076fe:	e19e      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a35      	ldr	r2, [pc, #212]	@ (80077dc <UART_SetConfig+0x344>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d130      	bne.n	800776c <UART_SetConfig+0x2d4>
 800770a:	4b31      	ldr	r3, [pc, #196]	@ (80077d0 <UART_SetConfig+0x338>)
 800770c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800770e:	f003 0307 	and.w	r3, r3, #7
 8007712:	2b05      	cmp	r3, #5
 8007714:	d826      	bhi.n	8007764 <UART_SetConfig+0x2cc>
 8007716:	a201      	add	r2, pc, #4	@ (adr r2, 800771c <UART_SetConfig+0x284>)
 8007718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771c:	08007735 	.word	0x08007735
 8007720:	0800773d 	.word	0x0800773d
 8007724:	08007745 	.word	0x08007745
 8007728:	0800774d 	.word	0x0800774d
 800772c:	08007755 	.word	0x08007755
 8007730:	0800775d 	.word	0x0800775d
 8007734:	2300      	movs	r3, #0
 8007736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800773a:	e180      	b.n	8007a3e <UART_SetConfig+0x5a6>
 800773c:	2304      	movs	r3, #4
 800773e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007742:	e17c      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007744:	2308      	movs	r3, #8
 8007746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800774a:	e178      	b.n	8007a3e <UART_SetConfig+0x5a6>
 800774c:	2310      	movs	r3, #16
 800774e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007752:	e174      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007754:	2320      	movs	r3, #32
 8007756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800775a:	e170      	b.n	8007a3e <UART_SetConfig+0x5a6>
 800775c:	2340      	movs	r3, #64	@ 0x40
 800775e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007762:	e16c      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007764:	2380      	movs	r3, #128	@ 0x80
 8007766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800776a:	e168      	b.n	8007a3e <UART_SetConfig+0x5a6>
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a1b      	ldr	r2, [pc, #108]	@ (80077e0 <UART_SetConfig+0x348>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d142      	bne.n	80077fc <UART_SetConfig+0x364>
 8007776:	4b16      	ldr	r3, [pc, #88]	@ (80077d0 <UART_SetConfig+0x338>)
 8007778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800777a:	f003 0307 	and.w	r3, r3, #7
 800777e:	2b05      	cmp	r3, #5
 8007780:	d838      	bhi.n	80077f4 <UART_SetConfig+0x35c>
 8007782:	a201      	add	r2, pc, #4	@ (adr r2, 8007788 <UART_SetConfig+0x2f0>)
 8007784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007788:	080077a1 	.word	0x080077a1
 800778c:	080077a9 	.word	0x080077a9
 8007790:	080077b1 	.word	0x080077b1
 8007794:	080077b9 	.word	0x080077b9
 8007798:	080077e5 	.word	0x080077e5
 800779c:	080077ed 	.word	0x080077ed
 80077a0:	2300      	movs	r3, #0
 80077a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077a6:	e14a      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80077a8:	2304      	movs	r3, #4
 80077aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ae:	e146      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80077b0:	2308      	movs	r3, #8
 80077b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077b6:	e142      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80077b8:	2310      	movs	r3, #16
 80077ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077be:	e13e      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80077c0:	cfff69f3 	.word	0xcfff69f3
 80077c4:	58000c00 	.word	0x58000c00
 80077c8:	11fff4ff 	.word	0x11fff4ff
 80077cc:	40011000 	.word	0x40011000
 80077d0:	58024400 	.word	0x58024400
 80077d4:	40004400 	.word	0x40004400
 80077d8:	40004800 	.word	0x40004800
 80077dc:	40004c00 	.word	0x40004c00
 80077e0:	40005000 	.word	0x40005000
 80077e4:	2320      	movs	r3, #32
 80077e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ea:	e128      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80077ec:	2340      	movs	r3, #64	@ 0x40
 80077ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077f2:	e124      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80077f4:	2380      	movs	r3, #128	@ 0x80
 80077f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077fa:	e120      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4acb      	ldr	r2, [pc, #812]	@ (8007b30 <UART_SetConfig+0x698>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d176      	bne.n	80078f4 <UART_SetConfig+0x45c>
 8007806:	4bcb      	ldr	r3, [pc, #812]	@ (8007b34 <UART_SetConfig+0x69c>)
 8007808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800780a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800780e:	2b28      	cmp	r3, #40	@ 0x28
 8007810:	d86c      	bhi.n	80078ec <UART_SetConfig+0x454>
 8007812:	a201      	add	r2, pc, #4	@ (adr r2, 8007818 <UART_SetConfig+0x380>)
 8007814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007818:	080078bd 	.word	0x080078bd
 800781c:	080078ed 	.word	0x080078ed
 8007820:	080078ed 	.word	0x080078ed
 8007824:	080078ed 	.word	0x080078ed
 8007828:	080078ed 	.word	0x080078ed
 800782c:	080078ed 	.word	0x080078ed
 8007830:	080078ed 	.word	0x080078ed
 8007834:	080078ed 	.word	0x080078ed
 8007838:	080078c5 	.word	0x080078c5
 800783c:	080078ed 	.word	0x080078ed
 8007840:	080078ed 	.word	0x080078ed
 8007844:	080078ed 	.word	0x080078ed
 8007848:	080078ed 	.word	0x080078ed
 800784c:	080078ed 	.word	0x080078ed
 8007850:	080078ed 	.word	0x080078ed
 8007854:	080078ed 	.word	0x080078ed
 8007858:	080078cd 	.word	0x080078cd
 800785c:	080078ed 	.word	0x080078ed
 8007860:	080078ed 	.word	0x080078ed
 8007864:	080078ed 	.word	0x080078ed
 8007868:	080078ed 	.word	0x080078ed
 800786c:	080078ed 	.word	0x080078ed
 8007870:	080078ed 	.word	0x080078ed
 8007874:	080078ed 	.word	0x080078ed
 8007878:	080078d5 	.word	0x080078d5
 800787c:	080078ed 	.word	0x080078ed
 8007880:	080078ed 	.word	0x080078ed
 8007884:	080078ed 	.word	0x080078ed
 8007888:	080078ed 	.word	0x080078ed
 800788c:	080078ed 	.word	0x080078ed
 8007890:	080078ed 	.word	0x080078ed
 8007894:	080078ed 	.word	0x080078ed
 8007898:	080078dd 	.word	0x080078dd
 800789c:	080078ed 	.word	0x080078ed
 80078a0:	080078ed 	.word	0x080078ed
 80078a4:	080078ed 	.word	0x080078ed
 80078a8:	080078ed 	.word	0x080078ed
 80078ac:	080078ed 	.word	0x080078ed
 80078b0:	080078ed 	.word	0x080078ed
 80078b4:	080078ed 	.word	0x080078ed
 80078b8:	080078e5 	.word	0x080078e5
 80078bc:	2301      	movs	r3, #1
 80078be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078c2:	e0bc      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80078c4:	2304      	movs	r3, #4
 80078c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ca:	e0b8      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80078cc:	2308      	movs	r3, #8
 80078ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078d2:	e0b4      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80078d4:	2310      	movs	r3, #16
 80078d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078da:	e0b0      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80078dc:	2320      	movs	r3, #32
 80078de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078e2:	e0ac      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80078e4:	2340      	movs	r3, #64	@ 0x40
 80078e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ea:	e0a8      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80078ec:	2380      	movs	r3, #128	@ 0x80
 80078ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f2:	e0a4      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a8f      	ldr	r2, [pc, #572]	@ (8007b38 <UART_SetConfig+0x6a0>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d130      	bne.n	8007960 <UART_SetConfig+0x4c8>
 80078fe:	4b8d      	ldr	r3, [pc, #564]	@ (8007b34 <UART_SetConfig+0x69c>)
 8007900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007902:	f003 0307 	and.w	r3, r3, #7
 8007906:	2b05      	cmp	r3, #5
 8007908:	d826      	bhi.n	8007958 <UART_SetConfig+0x4c0>
 800790a:	a201      	add	r2, pc, #4	@ (adr r2, 8007910 <UART_SetConfig+0x478>)
 800790c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007910:	08007929 	.word	0x08007929
 8007914:	08007931 	.word	0x08007931
 8007918:	08007939 	.word	0x08007939
 800791c:	08007941 	.word	0x08007941
 8007920:	08007949 	.word	0x08007949
 8007924:	08007951 	.word	0x08007951
 8007928:	2300      	movs	r3, #0
 800792a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800792e:	e086      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007930:	2304      	movs	r3, #4
 8007932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007936:	e082      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007938:	2308      	movs	r3, #8
 800793a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800793e:	e07e      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007940:	2310      	movs	r3, #16
 8007942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007946:	e07a      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007948:	2320      	movs	r3, #32
 800794a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800794e:	e076      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007950:	2340      	movs	r3, #64	@ 0x40
 8007952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007956:	e072      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007958:	2380      	movs	r3, #128	@ 0x80
 800795a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795e:	e06e      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a75      	ldr	r2, [pc, #468]	@ (8007b3c <UART_SetConfig+0x6a4>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d130      	bne.n	80079cc <UART_SetConfig+0x534>
 800796a:	4b72      	ldr	r3, [pc, #456]	@ (8007b34 <UART_SetConfig+0x69c>)
 800796c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800796e:	f003 0307 	and.w	r3, r3, #7
 8007972:	2b05      	cmp	r3, #5
 8007974:	d826      	bhi.n	80079c4 <UART_SetConfig+0x52c>
 8007976:	a201      	add	r2, pc, #4	@ (adr r2, 800797c <UART_SetConfig+0x4e4>)
 8007978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797c:	08007995 	.word	0x08007995
 8007980:	0800799d 	.word	0x0800799d
 8007984:	080079a5 	.word	0x080079a5
 8007988:	080079ad 	.word	0x080079ad
 800798c:	080079b5 	.word	0x080079b5
 8007990:	080079bd 	.word	0x080079bd
 8007994:	2300      	movs	r3, #0
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800799a:	e050      	b.n	8007a3e <UART_SetConfig+0x5a6>
 800799c:	2304      	movs	r3, #4
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a2:	e04c      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80079a4:	2308      	movs	r3, #8
 80079a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079aa:	e048      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80079ac:	2310      	movs	r3, #16
 80079ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079b2:	e044      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80079b4:	2320      	movs	r3, #32
 80079b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ba:	e040      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80079bc:	2340      	movs	r3, #64	@ 0x40
 80079be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079c2:	e03c      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80079c4:	2380      	movs	r3, #128	@ 0x80
 80079c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ca:	e038      	b.n	8007a3e <UART_SetConfig+0x5a6>
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a5b      	ldr	r2, [pc, #364]	@ (8007b40 <UART_SetConfig+0x6a8>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d130      	bne.n	8007a38 <UART_SetConfig+0x5a0>
 80079d6:	4b57      	ldr	r3, [pc, #348]	@ (8007b34 <UART_SetConfig+0x69c>)
 80079d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079da:	f003 0307 	and.w	r3, r3, #7
 80079de:	2b05      	cmp	r3, #5
 80079e0:	d826      	bhi.n	8007a30 <UART_SetConfig+0x598>
 80079e2:	a201      	add	r2, pc, #4	@ (adr r2, 80079e8 <UART_SetConfig+0x550>)
 80079e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e8:	08007a01 	.word	0x08007a01
 80079ec:	08007a09 	.word	0x08007a09
 80079f0:	08007a11 	.word	0x08007a11
 80079f4:	08007a19 	.word	0x08007a19
 80079f8:	08007a21 	.word	0x08007a21
 80079fc:	08007a29 	.word	0x08007a29
 8007a00:	2302      	movs	r3, #2
 8007a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a06:	e01a      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007a08:	2304      	movs	r3, #4
 8007a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a0e:	e016      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007a10:	2308      	movs	r3, #8
 8007a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a16:	e012      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007a18:	2310      	movs	r3, #16
 8007a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a1e:	e00e      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007a20:	2320      	movs	r3, #32
 8007a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a26:	e00a      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007a28:	2340      	movs	r3, #64	@ 0x40
 8007a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a2e:	e006      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007a30:	2380      	movs	r3, #128	@ 0x80
 8007a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a36:	e002      	b.n	8007a3e <UART_SetConfig+0x5a6>
 8007a38:	2380      	movs	r3, #128	@ 0x80
 8007a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a3f      	ldr	r2, [pc, #252]	@ (8007b40 <UART_SetConfig+0x6a8>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	f040 80f8 	bne.w	8007c3a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a4a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007a4e:	2b20      	cmp	r3, #32
 8007a50:	dc46      	bgt.n	8007ae0 <UART_SetConfig+0x648>
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	f2c0 8082 	blt.w	8007b5c <UART_SetConfig+0x6c4>
 8007a58:	3b02      	subs	r3, #2
 8007a5a:	2b1e      	cmp	r3, #30
 8007a5c:	d87e      	bhi.n	8007b5c <UART_SetConfig+0x6c4>
 8007a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a64 <UART_SetConfig+0x5cc>)
 8007a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a64:	08007ae7 	.word	0x08007ae7
 8007a68:	08007b5d 	.word	0x08007b5d
 8007a6c:	08007aef 	.word	0x08007aef
 8007a70:	08007b5d 	.word	0x08007b5d
 8007a74:	08007b5d 	.word	0x08007b5d
 8007a78:	08007b5d 	.word	0x08007b5d
 8007a7c:	08007aff 	.word	0x08007aff
 8007a80:	08007b5d 	.word	0x08007b5d
 8007a84:	08007b5d 	.word	0x08007b5d
 8007a88:	08007b5d 	.word	0x08007b5d
 8007a8c:	08007b5d 	.word	0x08007b5d
 8007a90:	08007b5d 	.word	0x08007b5d
 8007a94:	08007b5d 	.word	0x08007b5d
 8007a98:	08007b5d 	.word	0x08007b5d
 8007a9c:	08007b0f 	.word	0x08007b0f
 8007aa0:	08007b5d 	.word	0x08007b5d
 8007aa4:	08007b5d 	.word	0x08007b5d
 8007aa8:	08007b5d 	.word	0x08007b5d
 8007aac:	08007b5d 	.word	0x08007b5d
 8007ab0:	08007b5d 	.word	0x08007b5d
 8007ab4:	08007b5d 	.word	0x08007b5d
 8007ab8:	08007b5d 	.word	0x08007b5d
 8007abc:	08007b5d 	.word	0x08007b5d
 8007ac0:	08007b5d 	.word	0x08007b5d
 8007ac4:	08007b5d 	.word	0x08007b5d
 8007ac8:	08007b5d 	.word	0x08007b5d
 8007acc:	08007b5d 	.word	0x08007b5d
 8007ad0:	08007b5d 	.word	0x08007b5d
 8007ad4:	08007b5d 	.word	0x08007b5d
 8007ad8:	08007b5d 	.word	0x08007b5d
 8007adc:	08007b4f 	.word	0x08007b4f
 8007ae0:	2b40      	cmp	r3, #64	@ 0x40
 8007ae2:	d037      	beq.n	8007b54 <UART_SetConfig+0x6bc>
 8007ae4:	e03a      	b.n	8007b5c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007ae6:	f7fe fb19 	bl	800611c <HAL_RCCEx_GetD3PCLK1Freq>
 8007aea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007aec:	e03c      	b.n	8007b68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fe fb28 	bl	8006148 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007afc:	e034      	b.n	8007b68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007afe:	f107 0318 	add.w	r3, r7, #24
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7fe fc74 	bl	80063f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b0c:	e02c      	b.n	8007b68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b0e:	4b09      	ldr	r3, [pc, #36]	@ (8007b34 <UART_SetConfig+0x69c>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 0320 	and.w	r3, r3, #32
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d016      	beq.n	8007b48 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b1a:	4b06      	ldr	r3, [pc, #24]	@ (8007b34 <UART_SetConfig+0x69c>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	08db      	lsrs	r3, r3, #3
 8007b20:	f003 0303 	and.w	r3, r3, #3
 8007b24:	4a07      	ldr	r2, [pc, #28]	@ (8007b44 <UART_SetConfig+0x6ac>)
 8007b26:	fa22 f303 	lsr.w	r3, r2, r3
 8007b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b2c:	e01c      	b.n	8007b68 <UART_SetConfig+0x6d0>
 8007b2e:	bf00      	nop
 8007b30:	40011400 	.word	0x40011400
 8007b34:	58024400 	.word	0x58024400
 8007b38:	40007800 	.word	0x40007800
 8007b3c:	40007c00 	.word	0x40007c00
 8007b40:	58000c00 	.word	0x58000c00
 8007b44:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007b48:	4b9d      	ldr	r3, [pc, #628]	@ (8007dc0 <UART_SetConfig+0x928>)
 8007b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b4c:	e00c      	b.n	8007b68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b4e:	4b9d      	ldr	r3, [pc, #628]	@ (8007dc4 <UART_SetConfig+0x92c>)
 8007b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b52:	e009      	b.n	8007b68 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b5a:	e005      	b.n	8007b68 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007b66:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f000 81de 	beq.w	8007f2c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b74:	4a94      	ldr	r2, [pc, #592]	@ (8007dc8 <UART_SetConfig+0x930>)
 8007b76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b82:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	005b      	lsls	r3, r3, #1
 8007b8c:	4413      	add	r3, r2
 8007b8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d305      	bcc.n	8007ba0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d903      	bls.n	8007ba8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007ba6:	e1c1      	b.n	8007f2c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007baa:	2200      	movs	r2, #0
 8007bac:	60bb      	str	r3, [r7, #8]
 8007bae:	60fa      	str	r2, [r7, #12]
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb4:	4a84      	ldr	r2, [pc, #528]	@ (8007dc8 <UART_SetConfig+0x930>)
 8007bb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	603b      	str	r3, [r7, #0]
 8007bc0:	607a      	str	r2, [r7, #4]
 8007bc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007bca:	f7f8 fbd9 	bl	8000380 <__aeabi_uldivmod>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	f04f 0200 	mov.w	r2, #0
 8007bda:	f04f 0300 	mov.w	r3, #0
 8007bde:	020b      	lsls	r3, r1, #8
 8007be0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007be4:	0202      	lsls	r2, r0, #8
 8007be6:	6979      	ldr	r1, [r7, #20]
 8007be8:	6849      	ldr	r1, [r1, #4]
 8007bea:	0849      	lsrs	r1, r1, #1
 8007bec:	2000      	movs	r0, #0
 8007bee:	460c      	mov	r4, r1
 8007bf0:	4605      	mov	r5, r0
 8007bf2:	eb12 0804 	adds.w	r8, r2, r4
 8007bf6:	eb43 0905 	adc.w	r9, r3, r5
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	469a      	mov	sl, r3
 8007c02:	4693      	mov	fp, r2
 8007c04:	4652      	mov	r2, sl
 8007c06:	465b      	mov	r3, fp
 8007c08:	4640      	mov	r0, r8
 8007c0a:	4649      	mov	r1, r9
 8007c0c:	f7f8 fbb8 	bl	8000380 <__aeabi_uldivmod>
 8007c10:	4602      	mov	r2, r0
 8007c12:	460b      	mov	r3, r1
 8007c14:	4613      	mov	r3, r2
 8007c16:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c1e:	d308      	bcc.n	8007c32 <UART_SetConfig+0x79a>
 8007c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c26:	d204      	bcs.n	8007c32 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c2e:	60da      	str	r2, [r3, #12]
 8007c30:	e17c      	b.n	8007f2c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007c38:	e178      	b.n	8007f2c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c42:	f040 80c5 	bne.w	8007dd0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007c46:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007c4a:	2b20      	cmp	r3, #32
 8007c4c:	dc48      	bgt.n	8007ce0 <UART_SetConfig+0x848>
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	db7b      	blt.n	8007d4a <UART_SetConfig+0x8b2>
 8007c52:	2b20      	cmp	r3, #32
 8007c54:	d879      	bhi.n	8007d4a <UART_SetConfig+0x8b2>
 8007c56:	a201      	add	r2, pc, #4	@ (adr r2, 8007c5c <UART_SetConfig+0x7c4>)
 8007c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5c:	08007ce7 	.word	0x08007ce7
 8007c60:	08007cef 	.word	0x08007cef
 8007c64:	08007d4b 	.word	0x08007d4b
 8007c68:	08007d4b 	.word	0x08007d4b
 8007c6c:	08007cf7 	.word	0x08007cf7
 8007c70:	08007d4b 	.word	0x08007d4b
 8007c74:	08007d4b 	.word	0x08007d4b
 8007c78:	08007d4b 	.word	0x08007d4b
 8007c7c:	08007d07 	.word	0x08007d07
 8007c80:	08007d4b 	.word	0x08007d4b
 8007c84:	08007d4b 	.word	0x08007d4b
 8007c88:	08007d4b 	.word	0x08007d4b
 8007c8c:	08007d4b 	.word	0x08007d4b
 8007c90:	08007d4b 	.word	0x08007d4b
 8007c94:	08007d4b 	.word	0x08007d4b
 8007c98:	08007d4b 	.word	0x08007d4b
 8007c9c:	08007d17 	.word	0x08007d17
 8007ca0:	08007d4b 	.word	0x08007d4b
 8007ca4:	08007d4b 	.word	0x08007d4b
 8007ca8:	08007d4b 	.word	0x08007d4b
 8007cac:	08007d4b 	.word	0x08007d4b
 8007cb0:	08007d4b 	.word	0x08007d4b
 8007cb4:	08007d4b 	.word	0x08007d4b
 8007cb8:	08007d4b 	.word	0x08007d4b
 8007cbc:	08007d4b 	.word	0x08007d4b
 8007cc0:	08007d4b 	.word	0x08007d4b
 8007cc4:	08007d4b 	.word	0x08007d4b
 8007cc8:	08007d4b 	.word	0x08007d4b
 8007ccc:	08007d4b 	.word	0x08007d4b
 8007cd0:	08007d4b 	.word	0x08007d4b
 8007cd4:	08007d4b 	.word	0x08007d4b
 8007cd8:	08007d4b 	.word	0x08007d4b
 8007cdc:	08007d3d 	.word	0x08007d3d
 8007ce0:	2b40      	cmp	r3, #64	@ 0x40
 8007ce2:	d02e      	beq.n	8007d42 <UART_SetConfig+0x8aa>
 8007ce4:	e031      	b.n	8007d4a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ce6:	f7fc ffe3 	bl	8004cb0 <HAL_RCC_GetPCLK1Freq>
 8007cea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007cec:	e033      	b.n	8007d56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cee:	f7fc fff5 	bl	8004cdc <HAL_RCC_GetPCLK2Freq>
 8007cf2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007cf4:	e02f      	b.n	8007d56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fe fa24 	bl	8006148 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d04:	e027      	b.n	8007d56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d06:	f107 0318 	add.w	r3, r7, #24
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fe fb70 	bl	80063f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d14:	e01f      	b.n	8007d56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d16:	4b2d      	ldr	r3, [pc, #180]	@ (8007dcc <UART_SetConfig+0x934>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 0320 	and.w	r3, r3, #32
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d009      	beq.n	8007d36 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d22:	4b2a      	ldr	r3, [pc, #168]	@ (8007dcc <UART_SetConfig+0x934>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	08db      	lsrs	r3, r3, #3
 8007d28:	f003 0303 	and.w	r3, r3, #3
 8007d2c:	4a24      	ldr	r2, [pc, #144]	@ (8007dc0 <UART_SetConfig+0x928>)
 8007d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d34:	e00f      	b.n	8007d56 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007d36:	4b22      	ldr	r3, [pc, #136]	@ (8007dc0 <UART_SetConfig+0x928>)
 8007d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d3a:	e00c      	b.n	8007d56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d3c:	4b21      	ldr	r3, [pc, #132]	@ (8007dc4 <UART_SetConfig+0x92c>)
 8007d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d40:	e009      	b.n	8007d56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d48:	e005      	b.n	8007d56 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007d54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	f000 80e7 	beq.w	8007f2c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d62:	4a19      	ldr	r2, [pc, #100]	@ (8007dc8 <UART_SetConfig+0x930>)
 8007d64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d68:	461a      	mov	r2, r3
 8007d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d70:	005a      	lsls	r2, r3, #1
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	085b      	lsrs	r3, r3, #1
 8007d78:	441a      	add	r2, r3
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d82:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d86:	2b0f      	cmp	r3, #15
 8007d88:	d916      	bls.n	8007db8 <UART_SetConfig+0x920>
 8007d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d90:	d212      	bcs.n	8007db8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	f023 030f 	bic.w	r3, r3, #15
 8007d9a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d9e:	085b      	lsrs	r3, r3, #1
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	f003 0307 	and.w	r3, r3, #7
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007daa:	4313      	orrs	r3, r2
 8007dac:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007db4:	60da      	str	r2, [r3, #12]
 8007db6:	e0b9      	b.n	8007f2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007dbe:	e0b5      	b.n	8007f2c <UART_SetConfig+0xa94>
 8007dc0:	03d09000 	.word	0x03d09000
 8007dc4:	003d0900 	.word	0x003d0900
 8007dc8:	080097a8 	.word	0x080097a8
 8007dcc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007dd0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007dd4:	2b20      	cmp	r3, #32
 8007dd6:	dc49      	bgt.n	8007e6c <UART_SetConfig+0x9d4>
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	db7c      	blt.n	8007ed6 <UART_SetConfig+0xa3e>
 8007ddc:	2b20      	cmp	r3, #32
 8007dde:	d87a      	bhi.n	8007ed6 <UART_SetConfig+0xa3e>
 8007de0:	a201      	add	r2, pc, #4	@ (adr r2, 8007de8 <UART_SetConfig+0x950>)
 8007de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de6:	bf00      	nop
 8007de8:	08007e73 	.word	0x08007e73
 8007dec:	08007e7b 	.word	0x08007e7b
 8007df0:	08007ed7 	.word	0x08007ed7
 8007df4:	08007ed7 	.word	0x08007ed7
 8007df8:	08007e83 	.word	0x08007e83
 8007dfc:	08007ed7 	.word	0x08007ed7
 8007e00:	08007ed7 	.word	0x08007ed7
 8007e04:	08007ed7 	.word	0x08007ed7
 8007e08:	08007e93 	.word	0x08007e93
 8007e0c:	08007ed7 	.word	0x08007ed7
 8007e10:	08007ed7 	.word	0x08007ed7
 8007e14:	08007ed7 	.word	0x08007ed7
 8007e18:	08007ed7 	.word	0x08007ed7
 8007e1c:	08007ed7 	.word	0x08007ed7
 8007e20:	08007ed7 	.word	0x08007ed7
 8007e24:	08007ed7 	.word	0x08007ed7
 8007e28:	08007ea3 	.word	0x08007ea3
 8007e2c:	08007ed7 	.word	0x08007ed7
 8007e30:	08007ed7 	.word	0x08007ed7
 8007e34:	08007ed7 	.word	0x08007ed7
 8007e38:	08007ed7 	.word	0x08007ed7
 8007e3c:	08007ed7 	.word	0x08007ed7
 8007e40:	08007ed7 	.word	0x08007ed7
 8007e44:	08007ed7 	.word	0x08007ed7
 8007e48:	08007ed7 	.word	0x08007ed7
 8007e4c:	08007ed7 	.word	0x08007ed7
 8007e50:	08007ed7 	.word	0x08007ed7
 8007e54:	08007ed7 	.word	0x08007ed7
 8007e58:	08007ed7 	.word	0x08007ed7
 8007e5c:	08007ed7 	.word	0x08007ed7
 8007e60:	08007ed7 	.word	0x08007ed7
 8007e64:	08007ed7 	.word	0x08007ed7
 8007e68:	08007ec9 	.word	0x08007ec9
 8007e6c:	2b40      	cmp	r3, #64	@ 0x40
 8007e6e:	d02e      	beq.n	8007ece <UART_SetConfig+0xa36>
 8007e70:	e031      	b.n	8007ed6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e72:	f7fc ff1d 	bl	8004cb0 <HAL_RCC_GetPCLK1Freq>
 8007e76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e78:	e033      	b.n	8007ee2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e7a:	f7fc ff2f 	bl	8004cdc <HAL_RCC_GetPCLK2Freq>
 8007e7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e80:	e02f      	b.n	8007ee2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fe f95e 	bl	8006148 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e90:	e027      	b.n	8007ee2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e92:	f107 0318 	add.w	r3, r7, #24
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fe faaa 	bl	80063f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ea0:	e01f      	b.n	8007ee2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ea2:	4b2d      	ldr	r3, [pc, #180]	@ (8007f58 <UART_SetConfig+0xac0>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0320 	and.w	r3, r3, #32
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d009      	beq.n	8007ec2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007eae:	4b2a      	ldr	r3, [pc, #168]	@ (8007f58 <UART_SetConfig+0xac0>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	08db      	lsrs	r3, r3, #3
 8007eb4:	f003 0303 	and.w	r3, r3, #3
 8007eb8:	4a28      	ldr	r2, [pc, #160]	@ (8007f5c <UART_SetConfig+0xac4>)
 8007eba:	fa22 f303 	lsr.w	r3, r2, r3
 8007ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ec0:	e00f      	b.n	8007ee2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007ec2:	4b26      	ldr	r3, [pc, #152]	@ (8007f5c <UART_SetConfig+0xac4>)
 8007ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ec6:	e00c      	b.n	8007ee2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ec8:	4b25      	ldr	r3, [pc, #148]	@ (8007f60 <UART_SetConfig+0xac8>)
 8007eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ecc:	e009      	b.n	8007ee2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ece:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ed4:	e005      	b.n	8007ee2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007ee0:	bf00      	nop
    }

    if (pclk != 0U)
 8007ee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d021      	beq.n	8007f2c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eec:	4a1d      	ldr	r2, [pc, #116]	@ (8007f64 <UART_SetConfig+0xacc>)
 8007eee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ef6:	fbb3 f2f2 	udiv	r2, r3, r2
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	085b      	lsrs	r3, r3, #1
 8007f00:	441a      	add	r2, r3
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f0e:	2b0f      	cmp	r3, #15
 8007f10:	d909      	bls.n	8007f26 <UART_SetConfig+0xa8e>
 8007f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f18:	d205      	bcs.n	8007f26 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	60da      	str	r2, [r3, #12]
 8007f24:	e002      	b.n	8007f2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	2200      	movs	r2, #0
 8007f46:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007f48:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3748      	adds	r7, #72	@ 0x48
 8007f50:	46bd      	mov	sp, r7
 8007f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f56:	bf00      	nop
 8007f58:	58024400 	.word	0x58024400
 8007f5c:	03d09000 	.word	0x03d09000
 8007f60:	003d0900 	.word	0x003d0900
 8007f64:	080097a8 	.word	0x080097a8

08007f68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f74:	f003 0308 	and.w	r3, r3, #8
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00a      	beq.n	8007f92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00a      	beq.n	8007fb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	430a      	orrs	r2, r1
 8007fb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fb8:	f003 0302 	and.w	r3, r3, #2
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00a      	beq.n	8007fd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fda:	f003 0304 	and.w	r3, r3, #4
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00a      	beq.n	8007ff8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	430a      	orrs	r2, r1
 8007ff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ffc:	f003 0310 	and.w	r3, r3, #16
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00a      	beq.n	800801a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	430a      	orrs	r2, r1
 8008018:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800801e:	f003 0320 	and.w	r3, r3, #32
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00a      	beq.n	800803c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	430a      	orrs	r2, r1
 800803a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008044:	2b00      	cmp	r3, #0
 8008046:	d01a      	beq.n	800807e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	430a      	orrs	r2, r1
 800805c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008062:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008066:	d10a      	bne.n	800807e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	430a      	orrs	r2, r1
 800807c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00a      	beq.n	80080a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	430a      	orrs	r2, r1
 800809e:	605a      	str	r2, [r3, #4]
  }
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b098      	sub	sp, #96	@ 0x60
 80080b0:	af02      	add	r7, sp, #8
 80080b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080bc:	f7f9 f85a 	bl	8001174 <HAL_GetTick>
 80080c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0308 	and.w	r3, r3, #8
 80080cc:	2b08      	cmp	r3, #8
 80080ce:	d12f      	bne.n	8008130 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080d8:	2200      	movs	r2, #0
 80080da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f88e 	bl	8008200 <UART_WaitOnFlagUntilTimeout>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d022      	beq.n	8008130 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f2:	e853 3f00 	ldrex	r3, [r3]
 80080f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	461a      	mov	r2, r3
 8008106:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008108:	647b      	str	r3, [r7, #68]	@ 0x44
 800810a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800810e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008110:	e841 2300 	strex	r3, r2, [r1]
 8008114:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1e6      	bne.n	80080ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2220      	movs	r2, #32
 8008120:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800812c:	2303      	movs	r3, #3
 800812e:	e063      	b.n	80081f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 0304 	and.w	r3, r3, #4
 800813a:	2b04      	cmp	r3, #4
 800813c:	d149      	bne.n	80081d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800813e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008146:	2200      	movs	r2, #0
 8008148:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f857 	bl	8008200 <UART_WaitOnFlagUntilTimeout>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d03c      	beq.n	80081d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008160:	e853 3f00 	ldrex	r3, [r3]
 8008164:	623b      	str	r3, [r7, #32]
   return(result);
 8008166:	6a3b      	ldr	r3, [r7, #32]
 8008168:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800816c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	461a      	mov	r2, r3
 8008174:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008176:	633b      	str	r3, [r7, #48]	@ 0x30
 8008178:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800817c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800817e:	e841 2300 	strex	r3, r2, [r1]
 8008182:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1e6      	bne.n	8008158 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	3308      	adds	r3, #8
 8008190:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	e853 3f00 	ldrex	r3, [r3]
 8008198:	60fb      	str	r3, [r7, #12]
   return(result);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f023 0301 	bic.w	r3, r3, #1
 80081a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	3308      	adds	r3, #8
 80081a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081aa:	61fa      	str	r2, [r7, #28]
 80081ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ae:	69b9      	ldr	r1, [r7, #24]
 80081b0:	69fa      	ldr	r2, [r7, #28]
 80081b2:	e841 2300 	strex	r3, r2, [r1]
 80081b6:	617b      	str	r3, [r7, #20]
   return(result);
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1e5      	bne.n	800818a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2220      	movs	r2, #32
 80081c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e012      	b.n	80081f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2220      	movs	r2, #32
 80081d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2220      	movs	r2, #32
 80081de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3758      	adds	r7, #88	@ 0x58
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	603b      	str	r3, [r7, #0]
 800820c:	4613      	mov	r3, r2
 800820e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008210:	e04f      	b.n	80082b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008218:	d04b      	beq.n	80082b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800821a:	f7f8 ffab 	bl	8001174 <HAL_GetTick>
 800821e:	4602      	mov	r2, r0
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	69ba      	ldr	r2, [r7, #24]
 8008226:	429a      	cmp	r2, r3
 8008228:	d302      	bcc.n	8008230 <UART_WaitOnFlagUntilTimeout+0x30>
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d101      	bne.n	8008234 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008230:	2303      	movs	r3, #3
 8008232:	e04e      	b.n	80082d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 0304 	and.w	r3, r3, #4
 800823e:	2b00      	cmp	r3, #0
 8008240:	d037      	beq.n	80082b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	2b80      	cmp	r3, #128	@ 0x80
 8008246:	d034      	beq.n	80082b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	2b40      	cmp	r3, #64	@ 0x40
 800824c:	d031      	beq.n	80082b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	f003 0308 	and.w	r3, r3, #8
 8008258:	2b08      	cmp	r3, #8
 800825a:	d110      	bne.n	800827e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2208      	movs	r2, #8
 8008262:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f000 f839 	bl	80082dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2208      	movs	r2, #8
 800826e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e029      	b.n	80082d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	69db      	ldr	r3, [r3, #28]
 8008284:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008288:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800828c:	d111      	bne.n	80082b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008296:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f000 f81f 	bl	80082dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2220      	movs	r2, #32
 80082a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80082ae:	2303      	movs	r3, #3
 80082b0:	e00f      	b.n	80082d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	69da      	ldr	r2, [r3, #28]
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	4013      	ands	r3, r2
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	429a      	cmp	r2, r3
 80082c0:	bf0c      	ite	eq
 80082c2:	2301      	moveq	r3, #1
 80082c4:	2300      	movne	r3, #0
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	461a      	mov	r2, r3
 80082ca:	79fb      	ldrb	r3, [r7, #7]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d0a0      	beq.n	8008212 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
	...

080082dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082dc:	b480      	push	{r7}
 80082de:	b095      	sub	sp, #84	@ 0x54
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ec:	e853 3f00 	ldrex	r3, [r3]
 80082f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80082f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	461a      	mov	r2, r3
 8008300:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008302:	643b      	str	r3, [r7, #64]	@ 0x40
 8008304:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008306:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008308:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800830a:	e841 2300 	strex	r3, r2, [r1]
 800830e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1e6      	bne.n	80082e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	3308      	adds	r3, #8
 800831c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831e:	6a3b      	ldr	r3, [r7, #32]
 8008320:	e853 3f00 	ldrex	r3, [r3]
 8008324:	61fb      	str	r3, [r7, #28]
   return(result);
 8008326:	69fa      	ldr	r2, [r7, #28]
 8008328:	4b1e      	ldr	r3, [pc, #120]	@ (80083a4 <UART_EndRxTransfer+0xc8>)
 800832a:	4013      	ands	r3, r2
 800832c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	3308      	adds	r3, #8
 8008334:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008336:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008338:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800833c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800833e:	e841 2300 	strex	r3, r2, [r1]
 8008342:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1e5      	bne.n	8008316 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800834e:	2b01      	cmp	r3, #1
 8008350:	d118      	bne.n	8008384 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	e853 3f00 	ldrex	r3, [r3]
 800835e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f023 0310 	bic.w	r3, r3, #16
 8008366:	647b      	str	r3, [r7, #68]	@ 0x44
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	461a      	mov	r2, r3
 800836e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008370:	61bb      	str	r3, [r7, #24]
 8008372:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008374:	6979      	ldr	r1, [r7, #20]
 8008376:	69ba      	ldr	r2, [r7, #24]
 8008378:	e841 2300 	strex	r3, r2, [r1]
 800837c:	613b      	str	r3, [r7, #16]
   return(result);
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1e6      	bne.n	8008352 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2220      	movs	r2, #32
 8008388:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008398:	bf00      	nop
 800839a:	3754      	adds	r7, #84	@ 0x54
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	effffffe 	.word	0xeffffffe

080083a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f7ff f854 	bl	800746c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083c4:	bf00      	nop
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b088      	sub	sp, #32
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	e853 3f00 	ldrex	r3, [r3]
 80083e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083e8:	61fb      	str	r3, [r7, #28]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	461a      	mov	r2, r3
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	61bb      	str	r3, [r7, #24]
 80083f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f6:	6979      	ldr	r1, [r7, #20]
 80083f8:	69ba      	ldr	r2, [r7, #24]
 80083fa:	e841 2300 	strex	r3, r2, [r1]
 80083fe:	613b      	str	r3, [r7, #16]
   return(result);
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1e6      	bne.n	80083d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2220      	movs	r2, #32
 800840a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f7ff f81f 	bl	8007458 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800841a:	bf00      	nop
 800841c:	3720      	adds	r7, #32
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008422:	b480      	push	{r7}
 8008424:	b083      	sub	sp, #12
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800842a:	bf00      	nop
 800842c:	370c      	adds	r7, #12
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr

08008436 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800843e:	bf00      	nop
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800844a:	b480      	push	{r7}
 800844c:	b083      	sub	sp, #12
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008452:	bf00      	nop
 8008454:	370c      	adds	r7, #12
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr

0800845e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800845e:	b480      	push	{r7}
 8008460:	b085      	sub	sp, #20
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800846c:	2b01      	cmp	r3, #1
 800846e:	d101      	bne.n	8008474 <HAL_UARTEx_DisableFifoMode+0x16>
 8008470:	2302      	movs	r3, #2
 8008472:	e027      	b.n	80084c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2224      	movs	r2, #36	@ 0x24
 8008480:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f022 0201 	bic.w	r2, r2, #1
 800849a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80084a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2220      	movs	r2, #32
 80084b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3714      	adds	r7, #20
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d101      	bne.n	80084e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80084e4:	2302      	movs	r3, #2
 80084e6:	e02d      	b.n	8008544 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2224      	movs	r2, #36	@ 0x24
 80084f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f022 0201 	bic.w	r2, r2, #1
 800850e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	430a      	orrs	r2, r1
 8008522:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f84f 	bl	80085c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2220      	movs	r2, #32
 8008536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800855c:	2b01      	cmp	r3, #1
 800855e:	d101      	bne.n	8008564 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008560:	2302      	movs	r3, #2
 8008562:	e02d      	b.n	80085c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2224      	movs	r2, #36	@ 0x24
 8008570:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f022 0201 	bic.w	r2, r2, #1
 800858a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	430a      	orrs	r2, r1
 800859e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f811 	bl	80085c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2220      	movs	r2, #32
 80085b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d108      	bne.n	80085ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80085e8:	e031      	b.n	800864e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80085ea:	2310      	movs	r3, #16
 80085ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80085ee:	2310      	movs	r3, #16
 80085f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	0e5b      	lsrs	r3, r3, #25
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	f003 0307 	and.w	r3, r3, #7
 8008600:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	0f5b      	lsrs	r3, r3, #29
 800860a:	b2db      	uxtb	r3, r3
 800860c:	f003 0307 	and.w	r3, r3, #7
 8008610:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008612:	7bbb      	ldrb	r3, [r7, #14]
 8008614:	7b3a      	ldrb	r2, [r7, #12]
 8008616:	4911      	ldr	r1, [pc, #68]	@ (800865c <UARTEx_SetNbDataToProcess+0x94>)
 8008618:	5c8a      	ldrb	r2, [r1, r2]
 800861a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800861e:	7b3a      	ldrb	r2, [r7, #12]
 8008620:	490f      	ldr	r1, [pc, #60]	@ (8008660 <UARTEx_SetNbDataToProcess+0x98>)
 8008622:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008624:	fb93 f3f2 	sdiv	r3, r3, r2
 8008628:	b29a      	uxth	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008630:	7bfb      	ldrb	r3, [r7, #15]
 8008632:	7b7a      	ldrb	r2, [r7, #13]
 8008634:	4909      	ldr	r1, [pc, #36]	@ (800865c <UARTEx_SetNbDataToProcess+0x94>)
 8008636:	5c8a      	ldrb	r2, [r1, r2]
 8008638:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800863c:	7b7a      	ldrb	r2, [r7, #13]
 800863e:	4908      	ldr	r1, [pc, #32]	@ (8008660 <UARTEx_SetNbDataToProcess+0x98>)
 8008640:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008642:	fb93 f3f2 	sdiv	r3, r3, r2
 8008646:	b29a      	uxth	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800864e:	bf00      	nop
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	080097c0 	.word	0x080097c0
 8008660:	080097c8 	.word	0x080097c8

08008664 <std>:
 8008664:	2300      	movs	r3, #0
 8008666:	b510      	push	{r4, lr}
 8008668:	4604      	mov	r4, r0
 800866a:	e9c0 3300 	strd	r3, r3, [r0]
 800866e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008672:	6083      	str	r3, [r0, #8]
 8008674:	8181      	strh	r1, [r0, #12]
 8008676:	6643      	str	r3, [r0, #100]	@ 0x64
 8008678:	81c2      	strh	r2, [r0, #14]
 800867a:	6183      	str	r3, [r0, #24]
 800867c:	4619      	mov	r1, r3
 800867e:	2208      	movs	r2, #8
 8008680:	305c      	adds	r0, #92	@ 0x5c
 8008682:	f000 f9f9 	bl	8008a78 <memset>
 8008686:	4b0d      	ldr	r3, [pc, #52]	@ (80086bc <std+0x58>)
 8008688:	6263      	str	r3, [r4, #36]	@ 0x24
 800868a:	4b0d      	ldr	r3, [pc, #52]	@ (80086c0 <std+0x5c>)
 800868c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800868e:	4b0d      	ldr	r3, [pc, #52]	@ (80086c4 <std+0x60>)
 8008690:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008692:	4b0d      	ldr	r3, [pc, #52]	@ (80086c8 <std+0x64>)
 8008694:	6323      	str	r3, [r4, #48]	@ 0x30
 8008696:	4b0d      	ldr	r3, [pc, #52]	@ (80086cc <std+0x68>)
 8008698:	6224      	str	r4, [r4, #32]
 800869a:	429c      	cmp	r4, r3
 800869c:	d006      	beq.n	80086ac <std+0x48>
 800869e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80086a2:	4294      	cmp	r4, r2
 80086a4:	d002      	beq.n	80086ac <std+0x48>
 80086a6:	33d0      	adds	r3, #208	@ 0xd0
 80086a8:	429c      	cmp	r4, r3
 80086aa:	d105      	bne.n	80086b8 <std+0x54>
 80086ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80086b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086b4:	f000 ba58 	b.w	8008b68 <__retarget_lock_init_recursive>
 80086b8:	bd10      	pop	{r4, pc}
 80086ba:	bf00      	nop
 80086bc:	080088c9 	.word	0x080088c9
 80086c0:	080088eb 	.word	0x080088eb
 80086c4:	08008923 	.word	0x08008923
 80086c8:	08008947 	.word	0x08008947
 80086cc:	2400021c 	.word	0x2400021c

080086d0 <stdio_exit_handler>:
 80086d0:	4a02      	ldr	r2, [pc, #8]	@ (80086dc <stdio_exit_handler+0xc>)
 80086d2:	4903      	ldr	r1, [pc, #12]	@ (80086e0 <stdio_exit_handler+0x10>)
 80086d4:	4803      	ldr	r0, [pc, #12]	@ (80086e4 <stdio_exit_handler+0x14>)
 80086d6:	f000 b869 	b.w	80087ac <_fwalk_sglue>
 80086da:	bf00      	nop
 80086dc:	24000010 	.word	0x24000010
 80086e0:	08009405 	.word	0x08009405
 80086e4:	24000020 	.word	0x24000020

080086e8 <cleanup_stdio>:
 80086e8:	6841      	ldr	r1, [r0, #4]
 80086ea:	4b0c      	ldr	r3, [pc, #48]	@ (800871c <cleanup_stdio+0x34>)
 80086ec:	4299      	cmp	r1, r3
 80086ee:	b510      	push	{r4, lr}
 80086f0:	4604      	mov	r4, r0
 80086f2:	d001      	beq.n	80086f8 <cleanup_stdio+0x10>
 80086f4:	f000 fe86 	bl	8009404 <_fflush_r>
 80086f8:	68a1      	ldr	r1, [r4, #8]
 80086fa:	4b09      	ldr	r3, [pc, #36]	@ (8008720 <cleanup_stdio+0x38>)
 80086fc:	4299      	cmp	r1, r3
 80086fe:	d002      	beq.n	8008706 <cleanup_stdio+0x1e>
 8008700:	4620      	mov	r0, r4
 8008702:	f000 fe7f 	bl	8009404 <_fflush_r>
 8008706:	68e1      	ldr	r1, [r4, #12]
 8008708:	4b06      	ldr	r3, [pc, #24]	@ (8008724 <cleanup_stdio+0x3c>)
 800870a:	4299      	cmp	r1, r3
 800870c:	d004      	beq.n	8008718 <cleanup_stdio+0x30>
 800870e:	4620      	mov	r0, r4
 8008710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008714:	f000 be76 	b.w	8009404 <_fflush_r>
 8008718:	bd10      	pop	{r4, pc}
 800871a:	bf00      	nop
 800871c:	2400021c 	.word	0x2400021c
 8008720:	24000284 	.word	0x24000284
 8008724:	240002ec 	.word	0x240002ec

08008728 <global_stdio_init.part.0>:
 8008728:	b510      	push	{r4, lr}
 800872a:	4b0b      	ldr	r3, [pc, #44]	@ (8008758 <global_stdio_init.part.0+0x30>)
 800872c:	4c0b      	ldr	r4, [pc, #44]	@ (800875c <global_stdio_init.part.0+0x34>)
 800872e:	4a0c      	ldr	r2, [pc, #48]	@ (8008760 <global_stdio_init.part.0+0x38>)
 8008730:	601a      	str	r2, [r3, #0]
 8008732:	4620      	mov	r0, r4
 8008734:	2200      	movs	r2, #0
 8008736:	2104      	movs	r1, #4
 8008738:	f7ff ff94 	bl	8008664 <std>
 800873c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008740:	2201      	movs	r2, #1
 8008742:	2109      	movs	r1, #9
 8008744:	f7ff ff8e 	bl	8008664 <std>
 8008748:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800874c:	2202      	movs	r2, #2
 800874e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008752:	2112      	movs	r1, #18
 8008754:	f7ff bf86 	b.w	8008664 <std>
 8008758:	24000354 	.word	0x24000354
 800875c:	2400021c 	.word	0x2400021c
 8008760:	080086d1 	.word	0x080086d1

08008764 <__sfp_lock_acquire>:
 8008764:	4801      	ldr	r0, [pc, #4]	@ (800876c <__sfp_lock_acquire+0x8>)
 8008766:	f000 ba00 	b.w	8008b6a <__retarget_lock_acquire_recursive>
 800876a:	bf00      	nop
 800876c:	2400035d 	.word	0x2400035d

08008770 <__sfp_lock_release>:
 8008770:	4801      	ldr	r0, [pc, #4]	@ (8008778 <__sfp_lock_release+0x8>)
 8008772:	f000 b9fb 	b.w	8008b6c <__retarget_lock_release_recursive>
 8008776:	bf00      	nop
 8008778:	2400035d 	.word	0x2400035d

0800877c <__sinit>:
 800877c:	b510      	push	{r4, lr}
 800877e:	4604      	mov	r4, r0
 8008780:	f7ff fff0 	bl	8008764 <__sfp_lock_acquire>
 8008784:	6a23      	ldr	r3, [r4, #32]
 8008786:	b11b      	cbz	r3, 8008790 <__sinit+0x14>
 8008788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800878c:	f7ff bff0 	b.w	8008770 <__sfp_lock_release>
 8008790:	4b04      	ldr	r3, [pc, #16]	@ (80087a4 <__sinit+0x28>)
 8008792:	6223      	str	r3, [r4, #32]
 8008794:	4b04      	ldr	r3, [pc, #16]	@ (80087a8 <__sinit+0x2c>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1f5      	bne.n	8008788 <__sinit+0xc>
 800879c:	f7ff ffc4 	bl	8008728 <global_stdio_init.part.0>
 80087a0:	e7f2      	b.n	8008788 <__sinit+0xc>
 80087a2:	bf00      	nop
 80087a4:	080086e9 	.word	0x080086e9
 80087a8:	24000354 	.word	0x24000354

080087ac <_fwalk_sglue>:
 80087ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087b0:	4607      	mov	r7, r0
 80087b2:	4688      	mov	r8, r1
 80087b4:	4614      	mov	r4, r2
 80087b6:	2600      	movs	r6, #0
 80087b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087bc:	f1b9 0901 	subs.w	r9, r9, #1
 80087c0:	d505      	bpl.n	80087ce <_fwalk_sglue+0x22>
 80087c2:	6824      	ldr	r4, [r4, #0]
 80087c4:	2c00      	cmp	r4, #0
 80087c6:	d1f7      	bne.n	80087b8 <_fwalk_sglue+0xc>
 80087c8:	4630      	mov	r0, r6
 80087ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ce:	89ab      	ldrh	r3, [r5, #12]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d907      	bls.n	80087e4 <_fwalk_sglue+0x38>
 80087d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087d8:	3301      	adds	r3, #1
 80087da:	d003      	beq.n	80087e4 <_fwalk_sglue+0x38>
 80087dc:	4629      	mov	r1, r5
 80087de:	4638      	mov	r0, r7
 80087e0:	47c0      	blx	r8
 80087e2:	4306      	orrs	r6, r0
 80087e4:	3568      	adds	r5, #104	@ 0x68
 80087e6:	e7e9      	b.n	80087bc <_fwalk_sglue+0x10>

080087e8 <iprintf>:
 80087e8:	b40f      	push	{r0, r1, r2, r3}
 80087ea:	b507      	push	{r0, r1, r2, lr}
 80087ec:	4906      	ldr	r1, [pc, #24]	@ (8008808 <iprintf+0x20>)
 80087ee:	ab04      	add	r3, sp, #16
 80087f0:	6808      	ldr	r0, [r1, #0]
 80087f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80087f6:	6881      	ldr	r1, [r0, #8]
 80087f8:	9301      	str	r3, [sp, #4]
 80087fa:	f000 fadb 	bl	8008db4 <_vfiprintf_r>
 80087fe:	b003      	add	sp, #12
 8008800:	f85d eb04 	ldr.w	lr, [sp], #4
 8008804:	b004      	add	sp, #16
 8008806:	4770      	bx	lr
 8008808:	2400001c 	.word	0x2400001c

0800880c <_puts_r>:
 800880c:	6a03      	ldr	r3, [r0, #32]
 800880e:	b570      	push	{r4, r5, r6, lr}
 8008810:	6884      	ldr	r4, [r0, #8]
 8008812:	4605      	mov	r5, r0
 8008814:	460e      	mov	r6, r1
 8008816:	b90b      	cbnz	r3, 800881c <_puts_r+0x10>
 8008818:	f7ff ffb0 	bl	800877c <__sinit>
 800881c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800881e:	07db      	lsls	r3, r3, #31
 8008820:	d405      	bmi.n	800882e <_puts_r+0x22>
 8008822:	89a3      	ldrh	r3, [r4, #12]
 8008824:	0598      	lsls	r0, r3, #22
 8008826:	d402      	bmi.n	800882e <_puts_r+0x22>
 8008828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800882a:	f000 f99e 	bl	8008b6a <__retarget_lock_acquire_recursive>
 800882e:	89a3      	ldrh	r3, [r4, #12]
 8008830:	0719      	lsls	r1, r3, #28
 8008832:	d502      	bpl.n	800883a <_puts_r+0x2e>
 8008834:	6923      	ldr	r3, [r4, #16]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d135      	bne.n	80088a6 <_puts_r+0x9a>
 800883a:	4621      	mov	r1, r4
 800883c:	4628      	mov	r0, r5
 800883e:	f000 f8c5 	bl	80089cc <__swsetup_r>
 8008842:	b380      	cbz	r0, 80088a6 <_puts_r+0x9a>
 8008844:	f04f 35ff 	mov.w	r5, #4294967295
 8008848:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800884a:	07da      	lsls	r2, r3, #31
 800884c:	d405      	bmi.n	800885a <_puts_r+0x4e>
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	059b      	lsls	r3, r3, #22
 8008852:	d402      	bmi.n	800885a <_puts_r+0x4e>
 8008854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008856:	f000 f989 	bl	8008b6c <__retarget_lock_release_recursive>
 800885a:	4628      	mov	r0, r5
 800885c:	bd70      	pop	{r4, r5, r6, pc}
 800885e:	2b00      	cmp	r3, #0
 8008860:	da04      	bge.n	800886c <_puts_r+0x60>
 8008862:	69a2      	ldr	r2, [r4, #24]
 8008864:	429a      	cmp	r2, r3
 8008866:	dc17      	bgt.n	8008898 <_puts_r+0x8c>
 8008868:	290a      	cmp	r1, #10
 800886a:	d015      	beq.n	8008898 <_puts_r+0x8c>
 800886c:	6823      	ldr	r3, [r4, #0]
 800886e:	1c5a      	adds	r2, r3, #1
 8008870:	6022      	str	r2, [r4, #0]
 8008872:	7019      	strb	r1, [r3, #0]
 8008874:	68a3      	ldr	r3, [r4, #8]
 8008876:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800887a:	3b01      	subs	r3, #1
 800887c:	60a3      	str	r3, [r4, #8]
 800887e:	2900      	cmp	r1, #0
 8008880:	d1ed      	bne.n	800885e <_puts_r+0x52>
 8008882:	2b00      	cmp	r3, #0
 8008884:	da11      	bge.n	80088aa <_puts_r+0x9e>
 8008886:	4622      	mov	r2, r4
 8008888:	210a      	movs	r1, #10
 800888a:	4628      	mov	r0, r5
 800888c:	f000 f85f 	bl	800894e <__swbuf_r>
 8008890:	3001      	adds	r0, #1
 8008892:	d0d7      	beq.n	8008844 <_puts_r+0x38>
 8008894:	250a      	movs	r5, #10
 8008896:	e7d7      	b.n	8008848 <_puts_r+0x3c>
 8008898:	4622      	mov	r2, r4
 800889a:	4628      	mov	r0, r5
 800889c:	f000 f857 	bl	800894e <__swbuf_r>
 80088a0:	3001      	adds	r0, #1
 80088a2:	d1e7      	bne.n	8008874 <_puts_r+0x68>
 80088a4:	e7ce      	b.n	8008844 <_puts_r+0x38>
 80088a6:	3e01      	subs	r6, #1
 80088a8:	e7e4      	b.n	8008874 <_puts_r+0x68>
 80088aa:	6823      	ldr	r3, [r4, #0]
 80088ac:	1c5a      	adds	r2, r3, #1
 80088ae:	6022      	str	r2, [r4, #0]
 80088b0:	220a      	movs	r2, #10
 80088b2:	701a      	strb	r2, [r3, #0]
 80088b4:	e7ee      	b.n	8008894 <_puts_r+0x88>
	...

080088b8 <puts>:
 80088b8:	4b02      	ldr	r3, [pc, #8]	@ (80088c4 <puts+0xc>)
 80088ba:	4601      	mov	r1, r0
 80088bc:	6818      	ldr	r0, [r3, #0]
 80088be:	f7ff bfa5 	b.w	800880c <_puts_r>
 80088c2:	bf00      	nop
 80088c4:	2400001c 	.word	0x2400001c

080088c8 <__sread>:
 80088c8:	b510      	push	{r4, lr}
 80088ca:	460c      	mov	r4, r1
 80088cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d0:	f000 f8fc 	bl	8008acc <_read_r>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	bfab      	itete	ge
 80088d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80088da:	89a3      	ldrhlt	r3, [r4, #12]
 80088dc:	181b      	addge	r3, r3, r0
 80088de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80088e2:	bfac      	ite	ge
 80088e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80088e6:	81a3      	strhlt	r3, [r4, #12]
 80088e8:	bd10      	pop	{r4, pc}

080088ea <__swrite>:
 80088ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ee:	461f      	mov	r7, r3
 80088f0:	898b      	ldrh	r3, [r1, #12]
 80088f2:	05db      	lsls	r3, r3, #23
 80088f4:	4605      	mov	r5, r0
 80088f6:	460c      	mov	r4, r1
 80088f8:	4616      	mov	r6, r2
 80088fa:	d505      	bpl.n	8008908 <__swrite+0x1e>
 80088fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008900:	2302      	movs	r3, #2
 8008902:	2200      	movs	r2, #0
 8008904:	f000 f8d0 	bl	8008aa8 <_lseek_r>
 8008908:	89a3      	ldrh	r3, [r4, #12]
 800890a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800890e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008912:	81a3      	strh	r3, [r4, #12]
 8008914:	4632      	mov	r2, r6
 8008916:	463b      	mov	r3, r7
 8008918:	4628      	mov	r0, r5
 800891a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800891e:	f000 b8e7 	b.w	8008af0 <_write_r>

08008922 <__sseek>:
 8008922:	b510      	push	{r4, lr}
 8008924:	460c      	mov	r4, r1
 8008926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800892a:	f000 f8bd 	bl	8008aa8 <_lseek_r>
 800892e:	1c43      	adds	r3, r0, #1
 8008930:	89a3      	ldrh	r3, [r4, #12]
 8008932:	bf15      	itete	ne
 8008934:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008936:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800893a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800893e:	81a3      	strheq	r3, [r4, #12]
 8008940:	bf18      	it	ne
 8008942:	81a3      	strhne	r3, [r4, #12]
 8008944:	bd10      	pop	{r4, pc}

08008946 <__sclose>:
 8008946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800894a:	f000 b89d 	b.w	8008a88 <_close_r>

0800894e <__swbuf_r>:
 800894e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008950:	460e      	mov	r6, r1
 8008952:	4614      	mov	r4, r2
 8008954:	4605      	mov	r5, r0
 8008956:	b118      	cbz	r0, 8008960 <__swbuf_r+0x12>
 8008958:	6a03      	ldr	r3, [r0, #32]
 800895a:	b90b      	cbnz	r3, 8008960 <__swbuf_r+0x12>
 800895c:	f7ff ff0e 	bl	800877c <__sinit>
 8008960:	69a3      	ldr	r3, [r4, #24]
 8008962:	60a3      	str	r3, [r4, #8]
 8008964:	89a3      	ldrh	r3, [r4, #12]
 8008966:	071a      	lsls	r2, r3, #28
 8008968:	d501      	bpl.n	800896e <__swbuf_r+0x20>
 800896a:	6923      	ldr	r3, [r4, #16]
 800896c:	b943      	cbnz	r3, 8008980 <__swbuf_r+0x32>
 800896e:	4621      	mov	r1, r4
 8008970:	4628      	mov	r0, r5
 8008972:	f000 f82b 	bl	80089cc <__swsetup_r>
 8008976:	b118      	cbz	r0, 8008980 <__swbuf_r+0x32>
 8008978:	f04f 37ff 	mov.w	r7, #4294967295
 800897c:	4638      	mov	r0, r7
 800897e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	6922      	ldr	r2, [r4, #16]
 8008984:	1a98      	subs	r0, r3, r2
 8008986:	6963      	ldr	r3, [r4, #20]
 8008988:	b2f6      	uxtb	r6, r6
 800898a:	4283      	cmp	r3, r0
 800898c:	4637      	mov	r7, r6
 800898e:	dc05      	bgt.n	800899c <__swbuf_r+0x4e>
 8008990:	4621      	mov	r1, r4
 8008992:	4628      	mov	r0, r5
 8008994:	f000 fd36 	bl	8009404 <_fflush_r>
 8008998:	2800      	cmp	r0, #0
 800899a:	d1ed      	bne.n	8008978 <__swbuf_r+0x2a>
 800899c:	68a3      	ldr	r3, [r4, #8]
 800899e:	3b01      	subs	r3, #1
 80089a0:	60a3      	str	r3, [r4, #8]
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	1c5a      	adds	r2, r3, #1
 80089a6:	6022      	str	r2, [r4, #0]
 80089a8:	701e      	strb	r6, [r3, #0]
 80089aa:	6962      	ldr	r2, [r4, #20]
 80089ac:	1c43      	adds	r3, r0, #1
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d004      	beq.n	80089bc <__swbuf_r+0x6e>
 80089b2:	89a3      	ldrh	r3, [r4, #12]
 80089b4:	07db      	lsls	r3, r3, #31
 80089b6:	d5e1      	bpl.n	800897c <__swbuf_r+0x2e>
 80089b8:	2e0a      	cmp	r6, #10
 80089ba:	d1df      	bne.n	800897c <__swbuf_r+0x2e>
 80089bc:	4621      	mov	r1, r4
 80089be:	4628      	mov	r0, r5
 80089c0:	f000 fd20 	bl	8009404 <_fflush_r>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	d0d9      	beq.n	800897c <__swbuf_r+0x2e>
 80089c8:	e7d6      	b.n	8008978 <__swbuf_r+0x2a>
	...

080089cc <__swsetup_r>:
 80089cc:	b538      	push	{r3, r4, r5, lr}
 80089ce:	4b29      	ldr	r3, [pc, #164]	@ (8008a74 <__swsetup_r+0xa8>)
 80089d0:	4605      	mov	r5, r0
 80089d2:	6818      	ldr	r0, [r3, #0]
 80089d4:	460c      	mov	r4, r1
 80089d6:	b118      	cbz	r0, 80089e0 <__swsetup_r+0x14>
 80089d8:	6a03      	ldr	r3, [r0, #32]
 80089da:	b90b      	cbnz	r3, 80089e0 <__swsetup_r+0x14>
 80089dc:	f7ff fece 	bl	800877c <__sinit>
 80089e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089e4:	0719      	lsls	r1, r3, #28
 80089e6:	d422      	bmi.n	8008a2e <__swsetup_r+0x62>
 80089e8:	06da      	lsls	r2, r3, #27
 80089ea:	d407      	bmi.n	80089fc <__swsetup_r+0x30>
 80089ec:	2209      	movs	r2, #9
 80089ee:	602a      	str	r2, [r5, #0]
 80089f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089f4:	81a3      	strh	r3, [r4, #12]
 80089f6:	f04f 30ff 	mov.w	r0, #4294967295
 80089fa:	e033      	b.n	8008a64 <__swsetup_r+0x98>
 80089fc:	0758      	lsls	r0, r3, #29
 80089fe:	d512      	bpl.n	8008a26 <__swsetup_r+0x5a>
 8008a00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a02:	b141      	cbz	r1, 8008a16 <__swsetup_r+0x4a>
 8008a04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a08:	4299      	cmp	r1, r3
 8008a0a:	d002      	beq.n	8008a12 <__swsetup_r+0x46>
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	f000 f8af 	bl	8008b70 <_free_r>
 8008a12:	2300      	movs	r3, #0
 8008a14:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a16:	89a3      	ldrh	r3, [r4, #12]
 8008a18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a1c:	81a3      	strh	r3, [r4, #12]
 8008a1e:	2300      	movs	r3, #0
 8008a20:	6063      	str	r3, [r4, #4]
 8008a22:	6923      	ldr	r3, [r4, #16]
 8008a24:	6023      	str	r3, [r4, #0]
 8008a26:	89a3      	ldrh	r3, [r4, #12]
 8008a28:	f043 0308 	orr.w	r3, r3, #8
 8008a2c:	81a3      	strh	r3, [r4, #12]
 8008a2e:	6923      	ldr	r3, [r4, #16]
 8008a30:	b94b      	cbnz	r3, 8008a46 <__swsetup_r+0x7a>
 8008a32:	89a3      	ldrh	r3, [r4, #12]
 8008a34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a3c:	d003      	beq.n	8008a46 <__swsetup_r+0x7a>
 8008a3e:	4621      	mov	r1, r4
 8008a40:	4628      	mov	r0, r5
 8008a42:	f000 fd2d 	bl	80094a0 <__smakebuf_r>
 8008a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a4a:	f013 0201 	ands.w	r2, r3, #1
 8008a4e:	d00a      	beq.n	8008a66 <__swsetup_r+0x9a>
 8008a50:	2200      	movs	r2, #0
 8008a52:	60a2      	str	r2, [r4, #8]
 8008a54:	6962      	ldr	r2, [r4, #20]
 8008a56:	4252      	negs	r2, r2
 8008a58:	61a2      	str	r2, [r4, #24]
 8008a5a:	6922      	ldr	r2, [r4, #16]
 8008a5c:	b942      	cbnz	r2, 8008a70 <__swsetup_r+0xa4>
 8008a5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a62:	d1c5      	bne.n	80089f0 <__swsetup_r+0x24>
 8008a64:	bd38      	pop	{r3, r4, r5, pc}
 8008a66:	0799      	lsls	r1, r3, #30
 8008a68:	bf58      	it	pl
 8008a6a:	6962      	ldrpl	r2, [r4, #20]
 8008a6c:	60a2      	str	r2, [r4, #8]
 8008a6e:	e7f4      	b.n	8008a5a <__swsetup_r+0x8e>
 8008a70:	2000      	movs	r0, #0
 8008a72:	e7f7      	b.n	8008a64 <__swsetup_r+0x98>
 8008a74:	2400001c 	.word	0x2400001c

08008a78 <memset>:
 8008a78:	4402      	add	r2, r0
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d100      	bne.n	8008a82 <memset+0xa>
 8008a80:	4770      	bx	lr
 8008a82:	f803 1b01 	strb.w	r1, [r3], #1
 8008a86:	e7f9      	b.n	8008a7c <memset+0x4>

08008a88 <_close_r>:
 8008a88:	b538      	push	{r3, r4, r5, lr}
 8008a8a:	4d06      	ldr	r5, [pc, #24]	@ (8008aa4 <_close_r+0x1c>)
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	4604      	mov	r4, r0
 8008a90:	4608      	mov	r0, r1
 8008a92:	602b      	str	r3, [r5, #0]
 8008a94:	f7f8 f861 	bl	8000b5a <_close>
 8008a98:	1c43      	adds	r3, r0, #1
 8008a9a:	d102      	bne.n	8008aa2 <_close_r+0x1a>
 8008a9c:	682b      	ldr	r3, [r5, #0]
 8008a9e:	b103      	cbz	r3, 8008aa2 <_close_r+0x1a>
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	bd38      	pop	{r3, r4, r5, pc}
 8008aa4:	24000358 	.word	0x24000358

08008aa8 <_lseek_r>:
 8008aa8:	b538      	push	{r3, r4, r5, lr}
 8008aaa:	4d07      	ldr	r5, [pc, #28]	@ (8008ac8 <_lseek_r+0x20>)
 8008aac:	4604      	mov	r4, r0
 8008aae:	4608      	mov	r0, r1
 8008ab0:	4611      	mov	r1, r2
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	602a      	str	r2, [r5, #0]
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	f7f8 f876 	bl	8000ba8 <_lseek>
 8008abc:	1c43      	adds	r3, r0, #1
 8008abe:	d102      	bne.n	8008ac6 <_lseek_r+0x1e>
 8008ac0:	682b      	ldr	r3, [r5, #0]
 8008ac2:	b103      	cbz	r3, 8008ac6 <_lseek_r+0x1e>
 8008ac4:	6023      	str	r3, [r4, #0]
 8008ac6:	bd38      	pop	{r3, r4, r5, pc}
 8008ac8:	24000358 	.word	0x24000358

08008acc <_read_r>:
 8008acc:	b538      	push	{r3, r4, r5, lr}
 8008ace:	4d07      	ldr	r5, [pc, #28]	@ (8008aec <_read_r+0x20>)
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	4608      	mov	r0, r1
 8008ad4:	4611      	mov	r1, r2
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	602a      	str	r2, [r5, #0]
 8008ada:	461a      	mov	r2, r3
 8008adc:	f7f8 f820 	bl	8000b20 <_read>
 8008ae0:	1c43      	adds	r3, r0, #1
 8008ae2:	d102      	bne.n	8008aea <_read_r+0x1e>
 8008ae4:	682b      	ldr	r3, [r5, #0]
 8008ae6:	b103      	cbz	r3, 8008aea <_read_r+0x1e>
 8008ae8:	6023      	str	r3, [r4, #0]
 8008aea:	bd38      	pop	{r3, r4, r5, pc}
 8008aec:	24000358 	.word	0x24000358

08008af0 <_write_r>:
 8008af0:	b538      	push	{r3, r4, r5, lr}
 8008af2:	4d07      	ldr	r5, [pc, #28]	@ (8008b10 <_write_r+0x20>)
 8008af4:	4604      	mov	r4, r0
 8008af6:	4608      	mov	r0, r1
 8008af8:	4611      	mov	r1, r2
 8008afa:	2200      	movs	r2, #0
 8008afc:	602a      	str	r2, [r5, #0]
 8008afe:	461a      	mov	r2, r3
 8008b00:	f7f8 fa70 	bl	8000fe4 <_write>
 8008b04:	1c43      	adds	r3, r0, #1
 8008b06:	d102      	bne.n	8008b0e <_write_r+0x1e>
 8008b08:	682b      	ldr	r3, [r5, #0]
 8008b0a:	b103      	cbz	r3, 8008b0e <_write_r+0x1e>
 8008b0c:	6023      	str	r3, [r4, #0]
 8008b0e:	bd38      	pop	{r3, r4, r5, pc}
 8008b10:	24000358 	.word	0x24000358

08008b14 <__errno>:
 8008b14:	4b01      	ldr	r3, [pc, #4]	@ (8008b1c <__errno+0x8>)
 8008b16:	6818      	ldr	r0, [r3, #0]
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	2400001c 	.word	0x2400001c

08008b20 <__libc_init_array>:
 8008b20:	b570      	push	{r4, r5, r6, lr}
 8008b22:	4d0d      	ldr	r5, [pc, #52]	@ (8008b58 <__libc_init_array+0x38>)
 8008b24:	4c0d      	ldr	r4, [pc, #52]	@ (8008b5c <__libc_init_array+0x3c>)
 8008b26:	1b64      	subs	r4, r4, r5
 8008b28:	10a4      	asrs	r4, r4, #2
 8008b2a:	2600      	movs	r6, #0
 8008b2c:	42a6      	cmp	r6, r4
 8008b2e:	d109      	bne.n	8008b44 <__libc_init_array+0x24>
 8008b30:	4d0b      	ldr	r5, [pc, #44]	@ (8008b60 <__libc_init_array+0x40>)
 8008b32:	4c0c      	ldr	r4, [pc, #48]	@ (8008b64 <__libc_init_array+0x44>)
 8008b34:	f000 fd22 	bl	800957c <_init>
 8008b38:	1b64      	subs	r4, r4, r5
 8008b3a:	10a4      	asrs	r4, r4, #2
 8008b3c:	2600      	movs	r6, #0
 8008b3e:	42a6      	cmp	r6, r4
 8008b40:	d105      	bne.n	8008b4e <__libc_init_array+0x2e>
 8008b42:	bd70      	pop	{r4, r5, r6, pc}
 8008b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b48:	4798      	blx	r3
 8008b4a:	3601      	adds	r6, #1
 8008b4c:	e7ee      	b.n	8008b2c <__libc_init_array+0xc>
 8008b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b52:	4798      	blx	r3
 8008b54:	3601      	adds	r6, #1
 8008b56:	e7f2      	b.n	8008b3e <__libc_init_array+0x1e>
 8008b58:	0800980c 	.word	0x0800980c
 8008b5c:	0800980c 	.word	0x0800980c
 8008b60:	0800980c 	.word	0x0800980c
 8008b64:	08009810 	.word	0x08009810

08008b68 <__retarget_lock_init_recursive>:
 8008b68:	4770      	bx	lr

08008b6a <__retarget_lock_acquire_recursive>:
 8008b6a:	4770      	bx	lr

08008b6c <__retarget_lock_release_recursive>:
 8008b6c:	4770      	bx	lr
	...

08008b70 <_free_r>:
 8008b70:	b538      	push	{r3, r4, r5, lr}
 8008b72:	4605      	mov	r5, r0
 8008b74:	2900      	cmp	r1, #0
 8008b76:	d041      	beq.n	8008bfc <_free_r+0x8c>
 8008b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b7c:	1f0c      	subs	r4, r1, #4
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	bfb8      	it	lt
 8008b82:	18e4      	addlt	r4, r4, r3
 8008b84:	f000 f8e0 	bl	8008d48 <__malloc_lock>
 8008b88:	4a1d      	ldr	r2, [pc, #116]	@ (8008c00 <_free_r+0x90>)
 8008b8a:	6813      	ldr	r3, [r2, #0]
 8008b8c:	b933      	cbnz	r3, 8008b9c <_free_r+0x2c>
 8008b8e:	6063      	str	r3, [r4, #4]
 8008b90:	6014      	str	r4, [r2, #0]
 8008b92:	4628      	mov	r0, r5
 8008b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b98:	f000 b8dc 	b.w	8008d54 <__malloc_unlock>
 8008b9c:	42a3      	cmp	r3, r4
 8008b9e:	d908      	bls.n	8008bb2 <_free_r+0x42>
 8008ba0:	6820      	ldr	r0, [r4, #0]
 8008ba2:	1821      	adds	r1, r4, r0
 8008ba4:	428b      	cmp	r3, r1
 8008ba6:	bf01      	itttt	eq
 8008ba8:	6819      	ldreq	r1, [r3, #0]
 8008baa:	685b      	ldreq	r3, [r3, #4]
 8008bac:	1809      	addeq	r1, r1, r0
 8008bae:	6021      	streq	r1, [r4, #0]
 8008bb0:	e7ed      	b.n	8008b8e <_free_r+0x1e>
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	b10b      	cbz	r3, 8008bbc <_free_r+0x4c>
 8008bb8:	42a3      	cmp	r3, r4
 8008bba:	d9fa      	bls.n	8008bb2 <_free_r+0x42>
 8008bbc:	6811      	ldr	r1, [r2, #0]
 8008bbe:	1850      	adds	r0, r2, r1
 8008bc0:	42a0      	cmp	r0, r4
 8008bc2:	d10b      	bne.n	8008bdc <_free_r+0x6c>
 8008bc4:	6820      	ldr	r0, [r4, #0]
 8008bc6:	4401      	add	r1, r0
 8008bc8:	1850      	adds	r0, r2, r1
 8008bca:	4283      	cmp	r3, r0
 8008bcc:	6011      	str	r1, [r2, #0]
 8008bce:	d1e0      	bne.n	8008b92 <_free_r+0x22>
 8008bd0:	6818      	ldr	r0, [r3, #0]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	6053      	str	r3, [r2, #4]
 8008bd6:	4408      	add	r0, r1
 8008bd8:	6010      	str	r0, [r2, #0]
 8008bda:	e7da      	b.n	8008b92 <_free_r+0x22>
 8008bdc:	d902      	bls.n	8008be4 <_free_r+0x74>
 8008bde:	230c      	movs	r3, #12
 8008be0:	602b      	str	r3, [r5, #0]
 8008be2:	e7d6      	b.n	8008b92 <_free_r+0x22>
 8008be4:	6820      	ldr	r0, [r4, #0]
 8008be6:	1821      	adds	r1, r4, r0
 8008be8:	428b      	cmp	r3, r1
 8008bea:	bf04      	itt	eq
 8008bec:	6819      	ldreq	r1, [r3, #0]
 8008bee:	685b      	ldreq	r3, [r3, #4]
 8008bf0:	6063      	str	r3, [r4, #4]
 8008bf2:	bf04      	itt	eq
 8008bf4:	1809      	addeq	r1, r1, r0
 8008bf6:	6021      	streq	r1, [r4, #0]
 8008bf8:	6054      	str	r4, [r2, #4]
 8008bfa:	e7ca      	b.n	8008b92 <_free_r+0x22>
 8008bfc:	bd38      	pop	{r3, r4, r5, pc}
 8008bfe:	bf00      	nop
 8008c00:	24000364 	.word	0x24000364

08008c04 <sbrk_aligned>:
 8008c04:	b570      	push	{r4, r5, r6, lr}
 8008c06:	4e0f      	ldr	r6, [pc, #60]	@ (8008c44 <sbrk_aligned+0x40>)
 8008c08:	460c      	mov	r4, r1
 8008c0a:	6831      	ldr	r1, [r6, #0]
 8008c0c:	4605      	mov	r5, r0
 8008c0e:	b911      	cbnz	r1, 8008c16 <sbrk_aligned+0x12>
 8008c10:	f000 fca4 	bl	800955c <_sbrk_r>
 8008c14:	6030      	str	r0, [r6, #0]
 8008c16:	4621      	mov	r1, r4
 8008c18:	4628      	mov	r0, r5
 8008c1a:	f000 fc9f 	bl	800955c <_sbrk_r>
 8008c1e:	1c43      	adds	r3, r0, #1
 8008c20:	d103      	bne.n	8008c2a <sbrk_aligned+0x26>
 8008c22:	f04f 34ff 	mov.w	r4, #4294967295
 8008c26:	4620      	mov	r0, r4
 8008c28:	bd70      	pop	{r4, r5, r6, pc}
 8008c2a:	1cc4      	adds	r4, r0, #3
 8008c2c:	f024 0403 	bic.w	r4, r4, #3
 8008c30:	42a0      	cmp	r0, r4
 8008c32:	d0f8      	beq.n	8008c26 <sbrk_aligned+0x22>
 8008c34:	1a21      	subs	r1, r4, r0
 8008c36:	4628      	mov	r0, r5
 8008c38:	f000 fc90 	bl	800955c <_sbrk_r>
 8008c3c:	3001      	adds	r0, #1
 8008c3e:	d1f2      	bne.n	8008c26 <sbrk_aligned+0x22>
 8008c40:	e7ef      	b.n	8008c22 <sbrk_aligned+0x1e>
 8008c42:	bf00      	nop
 8008c44:	24000360 	.word	0x24000360

08008c48 <_malloc_r>:
 8008c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c4c:	1ccd      	adds	r5, r1, #3
 8008c4e:	f025 0503 	bic.w	r5, r5, #3
 8008c52:	3508      	adds	r5, #8
 8008c54:	2d0c      	cmp	r5, #12
 8008c56:	bf38      	it	cc
 8008c58:	250c      	movcc	r5, #12
 8008c5a:	2d00      	cmp	r5, #0
 8008c5c:	4606      	mov	r6, r0
 8008c5e:	db01      	blt.n	8008c64 <_malloc_r+0x1c>
 8008c60:	42a9      	cmp	r1, r5
 8008c62:	d904      	bls.n	8008c6e <_malloc_r+0x26>
 8008c64:	230c      	movs	r3, #12
 8008c66:	6033      	str	r3, [r6, #0]
 8008c68:	2000      	movs	r0, #0
 8008c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d44 <_malloc_r+0xfc>
 8008c72:	f000 f869 	bl	8008d48 <__malloc_lock>
 8008c76:	f8d8 3000 	ldr.w	r3, [r8]
 8008c7a:	461c      	mov	r4, r3
 8008c7c:	bb44      	cbnz	r4, 8008cd0 <_malloc_r+0x88>
 8008c7e:	4629      	mov	r1, r5
 8008c80:	4630      	mov	r0, r6
 8008c82:	f7ff ffbf 	bl	8008c04 <sbrk_aligned>
 8008c86:	1c43      	adds	r3, r0, #1
 8008c88:	4604      	mov	r4, r0
 8008c8a:	d158      	bne.n	8008d3e <_malloc_r+0xf6>
 8008c8c:	f8d8 4000 	ldr.w	r4, [r8]
 8008c90:	4627      	mov	r7, r4
 8008c92:	2f00      	cmp	r7, #0
 8008c94:	d143      	bne.n	8008d1e <_malloc_r+0xd6>
 8008c96:	2c00      	cmp	r4, #0
 8008c98:	d04b      	beq.n	8008d32 <_malloc_r+0xea>
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	4639      	mov	r1, r7
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	eb04 0903 	add.w	r9, r4, r3
 8008ca4:	f000 fc5a 	bl	800955c <_sbrk_r>
 8008ca8:	4581      	cmp	r9, r0
 8008caa:	d142      	bne.n	8008d32 <_malloc_r+0xea>
 8008cac:	6821      	ldr	r1, [r4, #0]
 8008cae:	1a6d      	subs	r5, r5, r1
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	f7ff ffa6 	bl	8008c04 <sbrk_aligned>
 8008cb8:	3001      	adds	r0, #1
 8008cba:	d03a      	beq.n	8008d32 <_malloc_r+0xea>
 8008cbc:	6823      	ldr	r3, [r4, #0]
 8008cbe:	442b      	add	r3, r5
 8008cc0:	6023      	str	r3, [r4, #0]
 8008cc2:	f8d8 3000 	ldr.w	r3, [r8]
 8008cc6:	685a      	ldr	r2, [r3, #4]
 8008cc8:	bb62      	cbnz	r2, 8008d24 <_malloc_r+0xdc>
 8008cca:	f8c8 7000 	str.w	r7, [r8]
 8008cce:	e00f      	b.n	8008cf0 <_malloc_r+0xa8>
 8008cd0:	6822      	ldr	r2, [r4, #0]
 8008cd2:	1b52      	subs	r2, r2, r5
 8008cd4:	d420      	bmi.n	8008d18 <_malloc_r+0xd0>
 8008cd6:	2a0b      	cmp	r2, #11
 8008cd8:	d917      	bls.n	8008d0a <_malloc_r+0xc2>
 8008cda:	1961      	adds	r1, r4, r5
 8008cdc:	42a3      	cmp	r3, r4
 8008cde:	6025      	str	r5, [r4, #0]
 8008ce0:	bf18      	it	ne
 8008ce2:	6059      	strne	r1, [r3, #4]
 8008ce4:	6863      	ldr	r3, [r4, #4]
 8008ce6:	bf08      	it	eq
 8008ce8:	f8c8 1000 	streq.w	r1, [r8]
 8008cec:	5162      	str	r2, [r4, r5]
 8008cee:	604b      	str	r3, [r1, #4]
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	f000 f82f 	bl	8008d54 <__malloc_unlock>
 8008cf6:	f104 000b 	add.w	r0, r4, #11
 8008cfa:	1d23      	adds	r3, r4, #4
 8008cfc:	f020 0007 	bic.w	r0, r0, #7
 8008d00:	1ac2      	subs	r2, r0, r3
 8008d02:	bf1c      	itt	ne
 8008d04:	1a1b      	subne	r3, r3, r0
 8008d06:	50a3      	strne	r3, [r4, r2]
 8008d08:	e7af      	b.n	8008c6a <_malloc_r+0x22>
 8008d0a:	6862      	ldr	r2, [r4, #4]
 8008d0c:	42a3      	cmp	r3, r4
 8008d0e:	bf0c      	ite	eq
 8008d10:	f8c8 2000 	streq.w	r2, [r8]
 8008d14:	605a      	strne	r2, [r3, #4]
 8008d16:	e7eb      	b.n	8008cf0 <_malloc_r+0xa8>
 8008d18:	4623      	mov	r3, r4
 8008d1a:	6864      	ldr	r4, [r4, #4]
 8008d1c:	e7ae      	b.n	8008c7c <_malloc_r+0x34>
 8008d1e:	463c      	mov	r4, r7
 8008d20:	687f      	ldr	r7, [r7, #4]
 8008d22:	e7b6      	b.n	8008c92 <_malloc_r+0x4a>
 8008d24:	461a      	mov	r2, r3
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	42a3      	cmp	r3, r4
 8008d2a:	d1fb      	bne.n	8008d24 <_malloc_r+0xdc>
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	6053      	str	r3, [r2, #4]
 8008d30:	e7de      	b.n	8008cf0 <_malloc_r+0xa8>
 8008d32:	230c      	movs	r3, #12
 8008d34:	6033      	str	r3, [r6, #0]
 8008d36:	4630      	mov	r0, r6
 8008d38:	f000 f80c 	bl	8008d54 <__malloc_unlock>
 8008d3c:	e794      	b.n	8008c68 <_malloc_r+0x20>
 8008d3e:	6005      	str	r5, [r0, #0]
 8008d40:	e7d6      	b.n	8008cf0 <_malloc_r+0xa8>
 8008d42:	bf00      	nop
 8008d44:	24000364 	.word	0x24000364

08008d48 <__malloc_lock>:
 8008d48:	4801      	ldr	r0, [pc, #4]	@ (8008d50 <__malloc_lock+0x8>)
 8008d4a:	f7ff bf0e 	b.w	8008b6a <__retarget_lock_acquire_recursive>
 8008d4e:	bf00      	nop
 8008d50:	2400035c 	.word	0x2400035c

08008d54 <__malloc_unlock>:
 8008d54:	4801      	ldr	r0, [pc, #4]	@ (8008d5c <__malloc_unlock+0x8>)
 8008d56:	f7ff bf09 	b.w	8008b6c <__retarget_lock_release_recursive>
 8008d5a:	bf00      	nop
 8008d5c:	2400035c 	.word	0x2400035c

08008d60 <__sfputc_r>:
 8008d60:	6893      	ldr	r3, [r2, #8]
 8008d62:	3b01      	subs	r3, #1
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	b410      	push	{r4}
 8008d68:	6093      	str	r3, [r2, #8]
 8008d6a:	da08      	bge.n	8008d7e <__sfputc_r+0x1e>
 8008d6c:	6994      	ldr	r4, [r2, #24]
 8008d6e:	42a3      	cmp	r3, r4
 8008d70:	db01      	blt.n	8008d76 <__sfputc_r+0x16>
 8008d72:	290a      	cmp	r1, #10
 8008d74:	d103      	bne.n	8008d7e <__sfputc_r+0x1e>
 8008d76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d7a:	f7ff bde8 	b.w	800894e <__swbuf_r>
 8008d7e:	6813      	ldr	r3, [r2, #0]
 8008d80:	1c58      	adds	r0, r3, #1
 8008d82:	6010      	str	r0, [r2, #0]
 8008d84:	7019      	strb	r1, [r3, #0]
 8008d86:	4608      	mov	r0, r1
 8008d88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d8c:	4770      	bx	lr

08008d8e <__sfputs_r>:
 8008d8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d90:	4606      	mov	r6, r0
 8008d92:	460f      	mov	r7, r1
 8008d94:	4614      	mov	r4, r2
 8008d96:	18d5      	adds	r5, r2, r3
 8008d98:	42ac      	cmp	r4, r5
 8008d9a:	d101      	bne.n	8008da0 <__sfputs_r+0x12>
 8008d9c:	2000      	movs	r0, #0
 8008d9e:	e007      	b.n	8008db0 <__sfputs_r+0x22>
 8008da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008da4:	463a      	mov	r2, r7
 8008da6:	4630      	mov	r0, r6
 8008da8:	f7ff ffda 	bl	8008d60 <__sfputc_r>
 8008dac:	1c43      	adds	r3, r0, #1
 8008dae:	d1f3      	bne.n	8008d98 <__sfputs_r+0xa>
 8008db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008db4 <_vfiprintf_r>:
 8008db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db8:	460d      	mov	r5, r1
 8008dba:	b09d      	sub	sp, #116	@ 0x74
 8008dbc:	4614      	mov	r4, r2
 8008dbe:	4698      	mov	r8, r3
 8008dc0:	4606      	mov	r6, r0
 8008dc2:	b118      	cbz	r0, 8008dcc <_vfiprintf_r+0x18>
 8008dc4:	6a03      	ldr	r3, [r0, #32]
 8008dc6:	b90b      	cbnz	r3, 8008dcc <_vfiprintf_r+0x18>
 8008dc8:	f7ff fcd8 	bl	800877c <__sinit>
 8008dcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dce:	07d9      	lsls	r1, r3, #31
 8008dd0:	d405      	bmi.n	8008dde <_vfiprintf_r+0x2a>
 8008dd2:	89ab      	ldrh	r3, [r5, #12]
 8008dd4:	059a      	lsls	r2, r3, #22
 8008dd6:	d402      	bmi.n	8008dde <_vfiprintf_r+0x2a>
 8008dd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dda:	f7ff fec6 	bl	8008b6a <__retarget_lock_acquire_recursive>
 8008dde:	89ab      	ldrh	r3, [r5, #12]
 8008de0:	071b      	lsls	r3, r3, #28
 8008de2:	d501      	bpl.n	8008de8 <_vfiprintf_r+0x34>
 8008de4:	692b      	ldr	r3, [r5, #16]
 8008de6:	b99b      	cbnz	r3, 8008e10 <_vfiprintf_r+0x5c>
 8008de8:	4629      	mov	r1, r5
 8008dea:	4630      	mov	r0, r6
 8008dec:	f7ff fdee 	bl	80089cc <__swsetup_r>
 8008df0:	b170      	cbz	r0, 8008e10 <_vfiprintf_r+0x5c>
 8008df2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008df4:	07dc      	lsls	r4, r3, #31
 8008df6:	d504      	bpl.n	8008e02 <_vfiprintf_r+0x4e>
 8008df8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dfc:	b01d      	add	sp, #116	@ 0x74
 8008dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e02:	89ab      	ldrh	r3, [r5, #12]
 8008e04:	0598      	lsls	r0, r3, #22
 8008e06:	d4f7      	bmi.n	8008df8 <_vfiprintf_r+0x44>
 8008e08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e0a:	f7ff feaf 	bl	8008b6c <__retarget_lock_release_recursive>
 8008e0e:	e7f3      	b.n	8008df8 <_vfiprintf_r+0x44>
 8008e10:	2300      	movs	r3, #0
 8008e12:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e14:	2320      	movs	r3, #32
 8008e16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e1e:	2330      	movs	r3, #48	@ 0x30
 8008e20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008fd0 <_vfiprintf_r+0x21c>
 8008e24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e28:	f04f 0901 	mov.w	r9, #1
 8008e2c:	4623      	mov	r3, r4
 8008e2e:	469a      	mov	sl, r3
 8008e30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e34:	b10a      	cbz	r2, 8008e3a <_vfiprintf_r+0x86>
 8008e36:	2a25      	cmp	r2, #37	@ 0x25
 8008e38:	d1f9      	bne.n	8008e2e <_vfiprintf_r+0x7a>
 8008e3a:	ebba 0b04 	subs.w	fp, sl, r4
 8008e3e:	d00b      	beq.n	8008e58 <_vfiprintf_r+0xa4>
 8008e40:	465b      	mov	r3, fp
 8008e42:	4622      	mov	r2, r4
 8008e44:	4629      	mov	r1, r5
 8008e46:	4630      	mov	r0, r6
 8008e48:	f7ff ffa1 	bl	8008d8e <__sfputs_r>
 8008e4c:	3001      	adds	r0, #1
 8008e4e:	f000 80a7 	beq.w	8008fa0 <_vfiprintf_r+0x1ec>
 8008e52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e54:	445a      	add	r2, fp
 8008e56:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e58:	f89a 3000 	ldrb.w	r3, [sl]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f000 809f 	beq.w	8008fa0 <_vfiprintf_r+0x1ec>
 8008e62:	2300      	movs	r3, #0
 8008e64:	f04f 32ff 	mov.w	r2, #4294967295
 8008e68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e6c:	f10a 0a01 	add.w	sl, sl, #1
 8008e70:	9304      	str	r3, [sp, #16]
 8008e72:	9307      	str	r3, [sp, #28]
 8008e74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e78:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e7a:	4654      	mov	r4, sl
 8008e7c:	2205      	movs	r2, #5
 8008e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e82:	4853      	ldr	r0, [pc, #332]	@ (8008fd0 <_vfiprintf_r+0x21c>)
 8008e84:	f7f7 fa2c 	bl	80002e0 <memchr>
 8008e88:	9a04      	ldr	r2, [sp, #16]
 8008e8a:	b9d8      	cbnz	r0, 8008ec4 <_vfiprintf_r+0x110>
 8008e8c:	06d1      	lsls	r1, r2, #27
 8008e8e:	bf44      	itt	mi
 8008e90:	2320      	movmi	r3, #32
 8008e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e96:	0713      	lsls	r3, r2, #28
 8008e98:	bf44      	itt	mi
 8008e9a:	232b      	movmi	r3, #43	@ 0x2b
 8008e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ea4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ea6:	d015      	beq.n	8008ed4 <_vfiprintf_r+0x120>
 8008ea8:	9a07      	ldr	r2, [sp, #28]
 8008eaa:	4654      	mov	r4, sl
 8008eac:	2000      	movs	r0, #0
 8008eae:	f04f 0c0a 	mov.w	ip, #10
 8008eb2:	4621      	mov	r1, r4
 8008eb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008eb8:	3b30      	subs	r3, #48	@ 0x30
 8008eba:	2b09      	cmp	r3, #9
 8008ebc:	d94b      	bls.n	8008f56 <_vfiprintf_r+0x1a2>
 8008ebe:	b1b0      	cbz	r0, 8008eee <_vfiprintf_r+0x13a>
 8008ec0:	9207      	str	r2, [sp, #28]
 8008ec2:	e014      	b.n	8008eee <_vfiprintf_r+0x13a>
 8008ec4:	eba0 0308 	sub.w	r3, r0, r8
 8008ec8:	fa09 f303 	lsl.w	r3, r9, r3
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	9304      	str	r3, [sp, #16]
 8008ed0:	46a2      	mov	sl, r4
 8008ed2:	e7d2      	b.n	8008e7a <_vfiprintf_r+0xc6>
 8008ed4:	9b03      	ldr	r3, [sp, #12]
 8008ed6:	1d19      	adds	r1, r3, #4
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	9103      	str	r1, [sp, #12]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	bfbb      	ittet	lt
 8008ee0:	425b      	neglt	r3, r3
 8008ee2:	f042 0202 	orrlt.w	r2, r2, #2
 8008ee6:	9307      	strge	r3, [sp, #28]
 8008ee8:	9307      	strlt	r3, [sp, #28]
 8008eea:	bfb8      	it	lt
 8008eec:	9204      	strlt	r2, [sp, #16]
 8008eee:	7823      	ldrb	r3, [r4, #0]
 8008ef0:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ef2:	d10a      	bne.n	8008f0a <_vfiprintf_r+0x156>
 8008ef4:	7863      	ldrb	r3, [r4, #1]
 8008ef6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ef8:	d132      	bne.n	8008f60 <_vfiprintf_r+0x1ac>
 8008efa:	9b03      	ldr	r3, [sp, #12]
 8008efc:	1d1a      	adds	r2, r3, #4
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	9203      	str	r2, [sp, #12]
 8008f02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f06:	3402      	adds	r4, #2
 8008f08:	9305      	str	r3, [sp, #20]
 8008f0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008fe0 <_vfiprintf_r+0x22c>
 8008f0e:	7821      	ldrb	r1, [r4, #0]
 8008f10:	2203      	movs	r2, #3
 8008f12:	4650      	mov	r0, sl
 8008f14:	f7f7 f9e4 	bl	80002e0 <memchr>
 8008f18:	b138      	cbz	r0, 8008f2a <_vfiprintf_r+0x176>
 8008f1a:	9b04      	ldr	r3, [sp, #16]
 8008f1c:	eba0 000a 	sub.w	r0, r0, sl
 8008f20:	2240      	movs	r2, #64	@ 0x40
 8008f22:	4082      	lsls	r2, r0
 8008f24:	4313      	orrs	r3, r2
 8008f26:	3401      	adds	r4, #1
 8008f28:	9304      	str	r3, [sp, #16]
 8008f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f2e:	4829      	ldr	r0, [pc, #164]	@ (8008fd4 <_vfiprintf_r+0x220>)
 8008f30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f34:	2206      	movs	r2, #6
 8008f36:	f7f7 f9d3 	bl	80002e0 <memchr>
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	d03f      	beq.n	8008fbe <_vfiprintf_r+0x20a>
 8008f3e:	4b26      	ldr	r3, [pc, #152]	@ (8008fd8 <_vfiprintf_r+0x224>)
 8008f40:	bb1b      	cbnz	r3, 8008f8a <_vfiprintf_r+0x1d6>
 8008f42:	9b03      	ldr	r3, [sp, #12]
 8008f44:	3307      	adds	r3, #7
 8008f46:	f023 0307 	bic.w	r3, r3, #7
 8008f4a:	3308      	adds	r3, #8
 8008f4c:	9303      	str	r3, [sp, #12]
 8008f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f50:	443b      	add	r3, r7
 8008f52:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f54:	e76a      	b.n	8008e2c <_vfiprintf_r+0x78>
 8008f56:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	2001      	movs	r0, #1
 8008f5e:	e7a8      	b.n	8008eb2 <_vfiprintf_r+0xfe>
 8008f60:	2300      	movs	r3, #0
 8008f62:	3401      	adds	r4, #1
 8008f64:	9305      	str	r3, [sp, #20]
 8008f66:	4619      	mov	r1, r3
 8008f68:	f04f 0c0a 	mov.w	ip, #10
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f72:	3a30      	subs	r2, #48	@ 0x30
 8008f74:	2a09      	cmp	r2, #9
 8008f76:	d903      	bls.n	8008f80 <_vfiprintf_r+0x1cc>
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d0c6      	beq.n	8008f0a <_vfiprintf_r+0x156>
 8008f7c:	9105      	str	r1, [sp, #20]
 8008f7e:	e7c4      	b.n	8008f0a <_vfiprintf_r+0x156>
 8008f80:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f84:	4604      	mov	r4, r0
 8008f86:	2301      	movs	r3, #1
 8008f88:	e7f0      	b.n	8008f6c <_vfiprintf_r+0x1b8>
 8008f8a:	ab03      	add	r3, sp, #12
 8008f8c:	9300      	str	r3, [sp, #0]
 8008f8e:	462a      	mov	r2, r5
 8008f90:	4b12      	ldr	r3, [pc, #72]	@ (8008fdc <_vfiprintf_r+0x228>)
 8008f92:	a904      	add	r1, sp, #16
 8008f94:	4630      	mov	r0, r6
 8008f96:	f3af 8000 	nop.w
 8008f9a:	4607      	mov	r7, r0
 8008f9c:	1c78      	adds	r0, r7, #1
 8008f9e:	d1d6      	bne.n	8008f4e <_vfiprintf_r+0x19a>
 8008fa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fa2:	07d9      	lsls	r1, r3, #31
 8008fa4:	d405      	bmi.n	8008fb2 <_vfiprintf_r+0x1fe>
 8008fa6:	89ab      	ldrh	r3, [r5, #12]
 8008fa8:	059a      	lsls	r2, r3, #22
 8008faa:	d402      	bmi.n	8008fb2 <_vfiprintf_r+0x1fe>
 8008fac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fae:	f7ff fddd 	bl	8008b6c <__retarget_lock_release_recursive>
 8008fb2:	89ab      	ldrh	r3, [r5, #12]
 8008fb4:	065b      	lsls	r3, r3, #25
 8008fb6:	f53f af1f 	bmi.w	8008df8 <_vfiprintf_r+0x44>
 8008fba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fbc:	e71e      	b.n	8008dfc <_vfiprintf_r+0x48>
 8008fbe:	ab03      	add	r3, sp, #12
 8008fc0:	9300      	str	r3, [sp, #0]
 8008fc2:	462a      	mov	r2, r5
 8008fc4:	4b05      	ldr	r3, [pc, #20]	@ (8008fdc <_vfiprintf_r+0x228>)
 8008fc6:	a904      	add	r1, sp, #16
 8008fc8:	4630      	mov	r0, r6
 8008fca:	f000 f879 	bl	80090c0 <_printf_i>
 8008fce:	e7e4      	b.n	8008f9a <_vfiprintf_r+0x1e6>
 8008fd0:	080097d0 	.word	0x080097d0
 8008fd4:	080097da 	.word	0x080097da
 8008fd8:	00000000 	.word	0x00000000
 8008fdc:	08008d8f 	.word	0x08008d8f
 8008fe0:	080097d6 	.word	0x080097d6

08008fe4 <_printf_common>:
 8008fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fe8:	4616      	mov	r6, r2
 8008fea:	4698      	mov	r8, r3
 8008fec:	688a      	ldr	r2, [r1, #8]
 8008fee:	690b      	ldr	r3, [r1, #16]
 8008ff0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	bfb8      	it	lt
 8008ff8:	4613      	movlt	r3, r2
 8008ffa:	6033      	str	r3, [r6, #0]
 8008ffc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009000:	4607      	mov	r7, r0
 8009002:	460c      	mov	r4, r1
 8009004:	b10a      	cbz	r2, 800900a <_printf_common+0x26>
 8009006:	3301      	adds	r3, #1
 8009008:	6033      	str	r3, [r6, #0]
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	0699      	lsls	r1, r3, #26
 800900e:	bf42      	ittt	mi
 8009010:	6833      	ldrmi	r3, [r6, #0]
 8009012:	3302      	addmi	r3, #2
 8009014:	6033      	strmi	r3, [r6, #0]
 8009016:	6825      	ldr	r5, [r4, #0]
 8009018:	f015 0506 	ands.w	r5, r5, #6
 800901c:	d106      	bne.n	800902c <_printf_common+0x48>
 800901e:	f104 0a19 	add.w	sl, r4, #25
 8009022:	68e3      	ldr	r3, [r4, #12]
 8009024:	6832      	ldr	r2, [r6, #0]
 8009026:	1a9b      	subs	r3, r3, r2
 8009028:	42ab      	cmp	r3, r5
 800902a:	dc26      	bgt.n	800907a <_printf_common+0x96>
 800902c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009030:	6822      	ldr	r2, [r4, #0]
 8009032:	3b00      	subs	r3, #0
 8009034:	bf18      	it	ne
 8009036:	2301      	movne	r3, #1
 8009038:	0692      	lsls	r2, r2, #26
 800903a:	d42b      	bmi.n	8009094 <_printf_common+0xb0>
 800903c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009040:	4641      	mov	r1, r8
 8009042:	4638      	mov	r0, r7
 8009044:	47c8      	blx	r9
 8009046:	3001      	adds	r0, #1
 8009048:	d01e      	beq.n	8009088 <_printf_common+0xa4>
 800904a:	6823      	ldr	r3, [r4, #0]
 800904c:	6922      	ldr	r2, [r4, #16]
 800904e:	f003 0306 	and.w	r3, r3, #6
 8009052:	2b04      	cmp	r3, #4
 8009054:	bf02      	ittt	eq
 8009056:	68e5      	ldreq	r5, [r4, #12]
 8009058:	6833      	ldreq	r3, [r6, #0]
 800905a:	1aed      	subeq	r5, r5, r3
 800905c:	68a3      	ldr	r3, [r4, #8]
 800905e:	bf0c      	ite	eq
 8009060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009064:	2500      	movne	r5, #0
 8009066:	4293      	cmp	r3, r2
 8009068:	bfc4      	itt	gt
 800906a:	1a9b      	subgt	r3, r3, r2
 800906c:	18ed      	addgt	r5, r5, r3
 800906e:	2600      	movs	r6, #0
 8009070:	341a      	adds	r4, #26
 8009072:	42b5      	cmp	r5, r6
 8009074:	d11a      	bne.n	80090ac <_printf_common+0xc8>
 8009076:	2000      	movs	r0, #0
 8009078:	e008      	b.n	800908c <_printf_common+0xa8>
 800907a:	2301      	movs	r3, #1
 800907c:	4652      	mov	r2, sl
 800907e:	4641      	mov	r1, r8
 8009080:	4638      	mov	r0, r7
 8009082:	47c8      	blx	r9
 8009084:	3001      	adds	r0, #1
 8009086:	d103      	bne.n	8009090 <_printf_common+0xac>
 8009088:	f04f 30ff 	mov.w	r0, #4294967295
 800908c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009090:	3501      	adds	r5, #1
 8009092:	e7c6      	b.n	8009022 <_printf_common+0x3e>
 8009094:	18e1      	adds	r1, r4, r3
 8009096:	1c5a      	adds	r2, r3, #1
 8009098:	2030      	movs	r0, #48	@ 0x30
 800909a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800909e:	4422      	add	r2, r4
 80090a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80090a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80090a8:	3302      	adds	r3, #2
 80090aa:	e7c7      	b.n	800903c <_printf_common+0x58>
 80090ac:	2301      	movs	r3, #1
 80090ae:	4622      	mov	r2, r4
 80090b0:	4641      	mov	r1, r8
 80090b2:	4638      	mov	r0, r7
 80090b4:	47c8      	blx	r9
 80090b6:	3001      	adds	r0, #1
 80090b8:	d0e6      	beq.n	8009088 <_printf_common+0xa4>
 80090ba:	3601      	adds	r6, #1
 80090bc:	e7d9      	b.n	8009072 <_printf_common+0x8e>
	...

080090c0 <_printf_i>:
 80090c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090c4:	7e0f      	ldrb	r7, [r1, #24]
 80090c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80090c8:	2f78      	cmp	r7, #120	@ 0x78
 80090ca:	4691      	mov	r9, r2
 80090cc:	4680      	mov	r8, r0
 80090ce:	460c      	mov	r4, r1
 80090d0:	469a      	mov	sl, r3
 80090d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80090d6:	d807      	bhi.n	80090e8 <_printf_i+0x28>
 80090d8:	2f62      	cmp	r7, #98	@ 0x62
 80090da:	d80a      	bhi.n	80090f2 <_printf_i+0x32>
 80090dc:	2f00      	cmp	r7, #0
 80090de:	f000 80d1 	beq.w	8009284 <_printf_i+0x1c4>
 80090e2:	2f58      	cmp	r7, #88	@ 0x58
 80090e4:	f000 80b8 	beq.w	8009258 <_printf_i+0x198>
 80090e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80090f0:	e03a      	b.n	8009168 <_printf_i+0xa8>
 80090f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80090f6:	2b15      	cmp	r3, #21
 80090f8:	d8f6      	bhi.n	80090e8 <_printf_i+0x28>
 80090fa:	a101      	add	r1, pc, #4	@ (adr r1, 8009100 <_printf_i+0x40>)
 80090fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009100:	08009159 	.word	0x08009159
 8009104:	0800916d 	.word	0x0800916d
 8009108:	080090e9 	.word	0x080090e9
 800910c:	080090e9 	.word	0x080090e9
 8009110:	080090e9 	.word	0x080090e9
 8009114:	080090e9 	.word	0x080090e9
 8009118:	0800916d 	.word	0x0800916d
 800911c:	080090e9 	.word	0x080090e9
 8009120:	080090e9 	.word	0x080090e9
 8009124:	080090e9 	.word	0x080090e9
 8009128:	080090e9 	.word	0x080090e9
 800912c:	0800926b 	.word	0x0800926b
 8009130:	08009197 	.word	0x08009197
 8009134:	08009225 	.word	0x08009225
 8009138:	080090e9 	.word	0x080090e9
 800913c:	080090e9 	.word	0x080090e9
 8009140:	0800928d 	.word	0x0800928d
 8009144:	080090e9 	.word	0x080090e9
 8009148:	08009197 	.word	0x08009197
 800914c:	080090e9 	.word	0x080090e9
 8009150:	080090e9 	.word	0x080090e9
 8009154:	0800922d 	.word	0x0800922d
 8009158:	6833      	ldr	r3, [r6, #0]
 800915a:	1d1a      	adds	r2, r3, #4
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	6032      	str	r2, [r6, #0]
 8009160:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009164:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009168:	2301      	movs	r3, #1
 800916a:	e09c      	b.n	80092a6 <_printf_i+0x1e6>
 800916c:	6833      	ldr	r3, [r6, #0]
 800916e:	6820      	ldr	r0, [r4, #0]
 8009170:	1d19      	adds	r1, r3, #4
 8009172:	6031      	str	r1, [r6, #0]
 8009174:	0606      	lsls	r6, r0, #24
 8009176:	d501      	bpl.n	800917c <_printf_i+0xbc>
 8009178:	681d      	ldr	r5, [r3, #0]
 800917a:	e003      	b.n	8009184 <_printf_i+0xc4>
 800917c:	0645      	lsls	r5, r0, #25
 800917e:	d5fb      	bpl.n	8009178 <_printf_i+0xb8>
 8009180:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009184:	2d00      	cmp	r5, #0
 8009186:	da03      	bge.n	8009190 <_printf_i+0xd0>
 8009188:	232d      	movs	r3, #45	@ 0x2d
 800918a:	426d      	negs	r5, r5
 800918c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009190:	4858      	ldr	r0, [pc, #352]	@ (80092f4 <_printf_i+0x234>)
 8009192:	230a      	movs	r3, #10
 8009194:	e011      	b.n	80091ba <_printf_i+0xfa>
 8009196:	6821      	ldr	r1, [r4, #0]
 8009198:	6833      	ldr	r3, [r6, #0]
 800919a:	0608      	lsls	r0, r1, #24
 800919c:	f853 5b04 	ldr.w	r5, [r3], #4
 80091a0:	d402      	bmi.n	80091a8 <_printf_i+0xe8>
 80091a2:	0649      	lsls	r1, r1, #25
 80091a4:	bf48      	it	mi
 80091a6:	b2ad      	uxthmi	r5, r5
 80091a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80091aa:	4852      	ldr	r0, [pc, #328]	@ (80092f4 <_printf_i+0x234>)
 80091ac:	6033      	str	r3, [r6, #0]
 80091ae:	bf14      	ite	ne
 80091b0:	230a      	movne	r3, #10
 80091b2:	2308      	moveq	r3, #8
 80091b4:	2100      	movs	r1, #0
 80091b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80091ba:	6866      	ldr	r6, [r4, #4]
 80091bc:	60a6      	str	r6, [r4, #8]
 80091be:	2e00      	cmp	r6, #0
 80091c0:	db05      	blt.n	80091ce <_printf_i+0x10e>
 80091c2:	6821      	ldr	r1, [r4, #0]
 80091c4:	432e      	orrs	r6, r5
 80091c6:	f021 0104 	bic.w	r1, r1, #4
 80091ca:	6021      	str	r1, [r4, #0]
 80091cc:	d04b      	beq.n	8009266 <_printf_i+0x1a6>
 80091ce:	4616      	mov	r6, r2
 80091d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80091d4:	fb03 5711 	mls	r7, r3, r1, r5
 80091d8:	5dc7      	ldrb	r7, [r0, r7]
 80091da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80091de:	462f      	mov	r7, r5
 80091e0:	42bb      	cmp	r3, r7
 80091e2:	460d      	mov	r5, r1
 80091e4:	d9f4      	bls.n	80091d0 <_printf_i+0x110>
 80091e6:	2b08      	cmp	r3, #8
 80091e8:	d10b      	bne.n	8009202 <_printf_i+0x142>
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	07df      	lsls	r7, r3, #31
 80091ee:	d508      	bpl.n	8009202 <_printf_i+0x142>
 80091f0:	6923      	ldr	r3, [r4, #16]
 80091f2:	6861      	ldr	r1, [r4, #4]
 80091f4:	4299      	cmp	r1, r3
 80091f6:	bfde      	ittt	le
 80091f8:	2330      	movle	r3, #48	@ 0x30
 80091fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80091fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009202:	1b92      	subs	r2, r2, r6
 8009204:	6122      	str	r2, [r4, #16]
 8009206:	f8cd a000 	str.w	sl, [sp]
 800920a:	464b      	mov	r3, r9
 800920c:	aa03      	add	r2, sp, #12
 800920e:	4621      	mov	r1, r4
 8009210:	4640      	mov	r0, r8
 8009212:	f7ff fee7 	bl	8008fe4 <_printf_common>
 8009216:	3001      	adds	r0, #1
 8009218:	d14a      	bne.n	80092b0 <_printf_i+0x1f0>
 800921a:	f04f 30ff 	mov.w	r0, #4294967295
 800921e:	b004      	add	sp, #16
 8009220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009224:	6823      	ldr	r3, [r4, #0]
 8009226:	f043 0320 	orr.w	r3, r3, #32
 800922a:	6023      	str	r3, [r4, #0]
 800922c:	4832      	ldr	r0, [pc, #200]	@ (80092f8 <_printf_i+0x238>)
 800922e:	2778      	movs	r7, #120	@ 0x78
 8009230:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009234:	6823      	ldr	r3, [r4, #0]
 8009236:	6831      	ldr	r1, [r6, #0]
 8009238:	061f      	lsls	r7, r3, #24
 800923a:	f851 5b04 	ldr.w	r5, [r1], #4
 800923e:	d402      	bmi.n	8009246 <_printf_i+0x186>
 8009240:	065f      	lsls	r7, r3, #25
 8009242:	bf48      	it	mi
 8009244:	b2ad      	uxthmi	r5, r5
 8009246:	6031      	str	r1, [r6, #0]
 8009248:	07d9      	lsls	r1, r3, #31
 800924a:	bf44      	itt	mi
 800924c:	f043 0320 	orrmi.w	r3, r3, #32
 8009250:	6023      	strmi	r3, [r4, #0]
 8009252:	b11d      	cbz	r5, 800925c <_printf_i+0x19c>
 8009254:	2310      	movs	r3, #16
 8009256:	e7ad      	b.n	80091b4 <_printf_i+0xf4>
 8009258:	4826      	ldr	r0, [pc, #152]	@ (80092f4 <_printf_i+0x234>)
 800925a:	e7e9      	b.n	8009230 <_printf_i+0x170>
 800925c:	6823      	ldr	r3, [r4, #0]
 800925e:	f023 0320 	bic.w	r3, r3, #32
 8009262:	6023      	str	r3, [r4, #0]
 8009264:	e7f6      	b.n	8009254 <_printf_i+0x194>
 8009266:	4616      	mov	r6, r2
 8009268:	e7bd      	b.n	80091e6 <_printf_i+0x126>
 800926a:	6833      	ldr	r3, [r6, #0]
 800926c:	6825      	ldr	r5, [r4, #0]
 800926e:	6961      	ldr	r1, [r4, #20]
 8009270:	1d18      	adds	r0, r3, #4
 8009272:	6030      	str	r0, [r6, #0]
 8009274:	062e      	lsls	r6, r5, #24
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	d501      	bpl.n	800927e <_printf_i+0x1be>
 800927a:	6019      	str	r1, [r3, #0]
 800927c:	e002      	b.n	8009284 <_printf_i+0x1c4>
 800927e:	0668      	lsls	r0, r5, #25
 8009280:	d5fb      	bpl.n	800927a <_printf_i+0x1ba>
 8009282:	8019      	strh	r1, [r3, #0]
 8009284:	2300      	movs	r3, #0
 8009286:	6123      	str	r3, [r4, #16]
 8009288:	4616      	mov	r6, r2
 800928a:	e7bc      	b.n	8009206 <_printf_i+0x146>
 800928c:	6833      	ldr	r3, [r6, #0]
 800928e:	1d1a      	adds	r2, r3, #4
 8009290:	6032      	str	r2, [r6, #0]
 8009292:	681e      	ldr	r6, [r3, #0]
 8009294:	6862      	ldr	r2, [r4, #4]
 8009296:	2100      	movs	r1, #0
 8009298:	4630      	mov	r0, r6
 800929a:	f7f7 f821 	bl	80002e0 <memchr>
 800929e:	b108      	cbz	r0, 80092a4 <_printf_i+0x1e4>
 80092a0:	1b80      	subs	r0, r0, r6
 80092a2:	6060      	str	r0, [r4, #4]
 80092a4:	6863      	ldr	r3, [r4, #4]
 80092a6:	6123      	str	r3, [r4, #16]
 80092a8:	2300      	movs	r3, #0
 80092aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092ae:	e7aa      	b.n	8009206 <_printf_i+0x146>
 80092b0:	6923      	ldr	r3, [r4, #16]
 80092b2:	4632      	mov	r2, r6
 80092b4:	4649      	mov	r1, r9
 80092b6:	4640      	mov	r0, r8
 80092b8:	47d0      	blx	sl
 80092ba:	3001      	adds	r0, #1
 80092bc:	d0ad      	beq.n	800921a <_printf_i+0x15a>
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	079b      	lsls	r3, r3, #30
 80092c2:	d413      	bmi.n	80092ec <_printf_i+0x22c>
 80092c4:	68e0      	ldr	r0, [r4, #12]
 80092c6:	9b03      	ldr	r3, [sp, #12]
 80092c8:	4298      	cmp	r0, r3
 80092ca:	bfb8      	it	lt
 80092cc:	4618      	movlt	r0, r3
 80092ce:	e7a6      	b.n	800921e <_printf_i+0x15e>
 80092d0:	2301      	movs	r3, #1
 80092d2:	4632      	mov	r2, r6
 80092d4:	4649      	mov	r1, r9
 80092d6:	4640      	mov	r0, r8
 80092d8:	47d0      	blx	sl
 80092da:	3001      	adds	r0, #1
 80092dc:	d09d      	beq.n	800921a <_printf_i+0x15a>
 80092de:	3501      	adds	r5, #1
 80092e0:	68e3      	ldr	r3, [r4, #12]
 80092e2:	9903      	ldr	r1, [sp, #12]
 80092e4:	1a5b      	subs	r3, r3, r1
 80092e6:	42ab      	cmp	r3, r5
 80092e8:	dcf2      	bgt.n	80092d0 <_printf_i+0x210>
 80092ea:	e7eb      	b.n	80092c4 <_printf_i+0x204>
 80092ec:	2500      	movs	r5, #0
 80092ee:	f104 0619 	add.w	r6, r4, #25
 80092f2:	e7f5      	b.n	80092e0 <_printf_i+0x220>
 80092f4:	080097e1 	.word	0x080097e1
 80092f8:	080097f2 	.word	0x080097f2

080092fc <__sflush_r>:
 80092fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009304:	0716      	lsls	r6, r2, #28
 8009306:	4605      	mov	r5, r0
 8009308:	460c      	mov	r4, r1
 800930a:	d454      	bmi.n	80093b6 <__sflush_r+0xba>
 800930c:	684b      	ldr	r3, [r1, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	dc02      	bgt.n	8009318 <__sflush_r+0x1c>
 8009312:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009314:	2b00      	cmp	r3, #0
 8009316:	dd48      	ble.n	80093aa <__sflush_r+0xae>
 8009318:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800931a:	2e00      	cmp	r6, #0
 800931c:	d045      	beq.n	80093aa <__sflush_r+0xae>
 800931e:	2300      	movs	r3, #0
 8009320:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009324:	682f      	ldr	r7, [r5, #0]
 8009326:	6a21      	ldr	r1, [r4, #32]
 8009328:	602b      	str	r3, [r5, #0]
 800932a:	d030      	beq.n	800938e <__sflush_r+0x92>
 800932c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800932e:	89a3      	ldrh	r3, [r4, #12]
 8009330:	0759      	lsls	r1, r3, #29
 8009332:	d505      	bpl.n	8009340 <__sflush_r+0x44>
 8009334:	6863      	ldr	r3, [r4, #4]
 8009336:	1ad2      	subs	r2, r2, r3
 8009338:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800933a:	b10b      	cbz	r3, 8009340 <__sflush_r+0x44>
 800933c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800933e:	1ad2      	subs	r2, r2, r3
 8009340:	2300      	movs	r3, #0
 8009342:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009344:	6a21      	ldr	r1, [r4, #32]
 8009346:	4628      	mov	r0, r5
 8009348:	47b0      	blx	r6
 800934a:	1c43      	adds	r3, r0, #1
 800934c:	89a3      	ldrh	r3, [r4, #12]
 800934e:	d106      	bne.n	800935e <__sflush_r+0x62>
 8009350:	6829      	ldr	r1, [r5, #0]
 8009352:	291d      	cmp	r1, #29
 8009354:	d82b      	bhi.n	80093ae <__sflush_r+0xb2>
 8009356:	4a2a      	ldr	r2, [pc, #168]	@ (8009400 <__sflush_r+0x104>)
 8009358:	40ca      	lsrs	r2, r1
 800935a:	07d6      	lsls	r6, r2, #31
 800935c:	d527      	bpl.n	80093ae <__sflush_r+0xb2>
 800935e:	2200      	movs	r2, #0
 8009360:	6062      	str	r2, [r4, #4]
 8009362:	04d9      	lsls	r1, r3, #19
 8009364:	6922      	ldr	r2, [r4, #16]
 8009366:	6022      	str	r2, [r4, #0]
 8009368:	d504      	bpl.n	8009374 <__sflush_r+0x78>
 800936a:	1c42      	adds	r2, r0, #1
 800936c:	d101      	bne.n	8009372 <__sflush_r+0x76>
 800936e:	682b      	ldr	r3, [r5, #0]
 8009370:	b903      	cbnz	r3, 8009374 <__sflush_r+0x78>
 8009372:	6560      	str	r0, [r4, #84]	@ 0x54
 8009374:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009376:	602f      	str	r7, [r5, #0]
 8009378:	b1b9      	cbz	r1, 80093aa <__sflush_r+0xae>
 800937a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800937e:	4299      	cmp	r1, r3
 8009380:	d002      	beq.n	8009388 <__sflush_r+0x8c>
 8009382:	4628      	mov	r0, r5
 8009384:	f7ff fbf4 	bl	8008b70 <_free_r>
 8009388:	2300      	movs	r3, #0
 800938a:	6363      	str	r3, [r4, #52]	@ 0x34
 800938c:	e00d      	b.n	80093aa <__sflush_r+0xae>
 800938e:	2301      	movs	r3, #1
 8009390:	4628      	mov	r0, r5
 8009392:	47b0      	blx	r6
 8009394:	4602      	mov	r2, r0
 8009396:	1c50      	adds	r0, r2, #1
 8009398:	d1c9      	bne.n	800932e <__sflush_r+0x32>
 800939a:	682b      	ldr	r3, [r5, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d0c6      	beq.n	800932e <__sflush_r+0x32>
 80093a0:	2b1d      	cmp	r3, #29
 80093a2:	d001      	beq.n	80093a8 <__sflush_r+0xac>
 80093a4:	2b16      	cmp	r3, #22
 80093a6:	d11e      	bne.n	80093e6 <__sflush_r+0xea>
 80093a8:	602f      	str	r7, [r5, #0]
 80093aa:	2000      	movs	r0, #0
 80093ac:	e022      	b.n	80093f4 <__sflush_r+0xf8>
 80093ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093b2:	b21b      	sxth	r3, r3
 80093b4:	e01b      	b.n	80093ee <__sflush_r+0xf2>
 80093b6:	690f      	ldr	r7, [r1, #16]
 80093b8:	2f00      	cmp	r7, #0
 80093ba:	d0f6      	beq.n	80093aa <__sflush_r+0xae>
 80093bc:	0793      	lsls	r3, r2, #30
 80093be:	680e      	ldr	r6, [r1, #0]
 80093c0:	bf08      	it	eq
 80093c2:	694b      	ldreq	r3, [r1, #20]
 80093c4:	600f      	str	r7, [r1, #0]
 80093c6:	bf18      	it	ne
 80093c8:	2300      	movne	r3, #0
 80093ca:	eba6 0807 	sub.w	r8, r6, r7
 80093ce:	608b      	str	r3, [r1, #8]
 80093d0:	f1b8 0f00 	cmp.w	r8, #0
 80093d4:	dde9      	ble.n	80093aa <__sflush_r+0xae>
 80093d6:	6a21      	ldr	r1, [r4, #32]
 80093d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80093da:	4643      	mov	r3, r8
 80093dc:	463a      	mov	r2, r7
 80093de:	4628      	mov	r0, r5
 80093e0:	47b0      	blx	r6
 80093e2:	2800      	cmp	r0, #0
 80093e4:	dc08      	bgt.n	80093f8 <__sflush_r+0xfc>
 80093e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093ee:	81a3      	strh	r3, [r4, #12]
 80093f0:	f04f 30ff 	mov.w	r0, #4294967295
 80093f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093f8:	4407      	add	r7, r0
 80093fa:	eba8 0800 	sub.w	r8, r8, r0
 80093fe:	e7e7      	b.n	80093d0 <__sflush_r+0xd4>
 8009400:	20400001 	.word	0x20400001

08009404 <_fflush_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	690b      	ldr	r3, [r1, #16]
 8009408:	4605      	mov	r5, r0
 800940a:	460c      	mov	r4, r1
 800940c:	b913      	cbnz	r3, 8009414 <_fflush_r+0x10>
 800940e:	2500      	movs	r5, #0
 8009410:	4628      	mov	r0, r5
 8009412:	bd38      	pop	{r3, r4, r5, pc}
 8009414:	b118      	cbz	r0, 800941e <_fflush_r+0x1a>
 8009416:	6a03      	ldr	r3, [r0, #32]
 8009418:	b90b      	cbnz	r3, 800941e <_fflush_r+0x1a>
 800941a:	f7ff f9af 	bl	800877c <__sinit>
 800941e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d0f3      	beq.n	800940e <_fflush_r+0xa>
 8009426:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009428:	07d0      	lsls	r0, r2, #31
 800942a:	d404      	bmi.n	8009436 <_fflush_r+0x32>
 800942c:	0599      	lsls	r1, r3, #22
 800942e:	d402      	bmi.n	8009436 <_fflush_r+0x32>
 8009430:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009432:	f7ff fb9a 	bl	8008b6a <__retarget_lock_acquire_recursive>
 8009436:	4628      	mov	r0, r5
 8009438:	4621      	mov	r1, r4
 800943a:	f7ff ff5f 	bl	80092fc <__sflush_r>
 800943e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009440:	07da      	lsls	r2, r3, #31
 8009442:	4605      	mov	r5, r0
 8009444:	d4e4      	bmi.n	8009410 <_fflush_r+0xc>
 8009446:	89a3      	ldrh	r3, [r4, #12]
 8009448:	059b      	lsls	r3, r3, #22
 800944a:	d4e1      	bmi.n	8009410 <_fflush_r+0xc>
 800944c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800944e:	f7ff fb8d 	bl	8008b6c <__retarget_lock_release_recursive>
 8009452:	e7dd      	b.n	8009410 <_fflush_r+0xc>

08009454 <__swhatbuf_r>:
 8009454:	b570      	push	{r4, r5, r6, lr}
 8009456:	460c      	mov	r4, r1
 8009458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800945c:	2900      	cmp	r1, #0
 800945e:	b096      	sub	sp, #88	@ 0x58
 8009460:	4615      	mov	r5, r2
 8009462:	461e      	mov	r6, r3
 8009464:	da0d      	bge.n	8009482 <__swhatbuf_r+0x2e>
 8009466:	89a3      	ldrh	r3, [r4, #12]
 8009468:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800946c:	f04f 0100 	mov.w	r1, #0
 8009470:	bf14      	ite	ne
 8009472:	2340      	movne	r3, #64	@ 0x40
 8009474:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009478:	2000      	movs	r0, #0
 800947a:	6031      	str	r1, [r6, #0]
 800947c:	602b      	str	r3, [r5, #0]
 800947e:	b016      	add	sp, #88	@ 0x58
 8009480:	bd70      	pop	{r4, r5, r6, pc}
 8009482:	466a      	mov	r2, sp
 8009484:	f000 f848 	bl	8009518 <_fstat_r>
 8009488:	2800      	cmp	r0, #0
 800948a:	dbec      	blt.n	8009466 <__swhatbuf_r+0x12>
 800948c:	9901      	ldr	r1, [sp, #4]
 800948e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009492:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009496:	4259      	negs	r1, r3
 8009498:	4159      	adcs	r1, r3
 800949a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800949e:	e7eb      	b.n	8009478 <__swhatbuf_r+0x24>

080094a0 <__smakebuf_r>:
 80094a0:	898b      	ldrh	r3, [r1, #12]
 80094a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094a4:	079d      	lsls	r5, r3, #30
 80094a6:	4606      	mov	r6, r0
 80094a8:	460c      	mov	r4, r1
 80094aa:	d507      	bpl.n	80094bc <__smakebuf_r+0x1c>
 80094ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80094b0:	6023      	str	r3, [r4, #0]
 80094b2:	6123      	str	r3, [r4, #16]
 80094b4:	2301      	movs	r3, #1
 80094b6:	6163      	str	r3, [r4, #20]
 80094b8:	b003      	add	sp, #12
 80094ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094bc:	ab01      	add	r3, sp, #4
 80094be:	466a      	mov	r2, sp
 80094c0:	f7ff ffc8 	bl	8009454 <__swhatbuf_r>
 80094c4:	9f00      	ldr	r7, [sp, #0]
 80094c6:	4605      	mov	r5, r0
 80094c8:	4639      	mov	r1, r7
 80094ca:	4630      	mov	r0, r6
 80094cc:	f7ff fbbc 	bl	8008c48 <_malloc_r>
 80094d0:	b948      	cbnz	r0, 80094e6 <__smakebuf_r+0x46>
 80094d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094d6:	059a      	lsls	r2, r3, #22
 80094d8:	d4ee      	bmi.n	80094b8 <__smakebuf_r+0x18>
 80094da:	f023 0303 	bic.w	r3, r3, #3
 80094de:	f043 0302 	orr.w	r3, r3, #2
 80094e2:	81a3      	strh	r3, [r4, #12]
 80094e4:	e7e2      	b.n	80094ac <__smakebuf_r+0xc>
 80094e6:	89a3      	ldrh	r3, [r4, #12]
 80094e8:	6020      	str	r0, [r4, #0]
 80094ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094ee:	81a3      	strh	r3, [r4, #12]
 80094f0:	9b01      	ldr	r3, [sp, #4]
 80094f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80094f6:	b15b      	cbz	r3, 8009510 <__smakebuf_r+0x70>
 80094f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094fc:	4630      	mov	r0, r6
 80094fe:	f000 f81d 	bl	800953c <_isatty_r>
 8009502:	b128      	cbz	r0, 8009510 <__smakebuf_r+0x70>
 8009504:	89a3      	ldrh	r3, [r4, #12]
 8009506:	f023 0303 	bic.w	r3, r3, #3
 800950a:	f043 0301 	orr.w	r3, r3, #1
 800950e:	81a3      	strh	r3, [r4, #12]
 8009510:	89a3      	ldrh	r3, [r4, #12]
 8009512:	431d      	orrs	r5, r3
 8009514:	81a5      	strh	r5, [r4, #12]
 8009516:	e7cf      	b.n	80094b8 <__smakebuf_r+0x18>

08009518 <_fstat_r>:
 8009518:	b538      	push	{r3, r4, r5, lr}
 800951a:	4d07      	ldr	r5, [pc, #28]	@ (8009538 <_fstat_r+0x20>)
 800951c:	2300      	movs	r3, #0
 800951e:	4604      	mov	r4, r0
 8009520:	4608      	mov	r0, r1
 8009522:	4611      	mov	r1, r2
 8009524:	602b      	str	r3, [r5, #0]
 8009526:	f7f7 fb24 	bl	8000b72 <_fstat>
 800952a:	1c43      	adds	r3, r0, #1
 800952c:	d102      	bne.n	8009534 <_fstat_r+0x1c>
 800952e:	682b      	ldr	r3, [r5, #0]
 8009530:	b103      	cbz	r3, 8009534 <_fstat_r+0x1c>
 8009532:	6023      	str	r3, [r4, #0]
 8009534:	bd38      	pop	{r3, r4, r5, pc}
 8009536:	bf00      	nop
 8009538:	24000358 	.word	0x24000358

0800953c <_isatty_r>:
 800953c:	b538      	push	{r3, r4, r5, lr}
 800953e:	4d06      	ldr	r5, [pc, #24]	@ (8009558 <_isatty_r+0x1c>)
 8009540:	2300      	movs	r3, #0
 8009542:	4604      	mov	r4, r0
 8009544:	4608      	mov	r0, r1
 8009546:	602b      	str	r3, [r5, #0]
 8009548:	f7f7 fb23 	bl	8000b92 <_isatty>
 800954c:	1c43      	adds	r3, r0, #1
 800954e:	d102      	bne.n	8009556 <_isatty_r+0x1a>
 8009550:	682b      	ldr	r3, [r5, #0]
 8009552:	b103      	cbz	r3, 8009556 <_isatty_r+0x1a>
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	bd38      	pop	{r3, r4, r5, pc}
 8009558:	24000358 	.word	0x24000358

0800955c <_sbrk_r>:
 800955c:	b538      	push	{r3, r4, r5, lr}
 800955e:	4d06      	ldr	r5, [pc, #24]	@ (8009578 <_sbrk_r+0x1c>)
 8009560:	2300      	movs	r3, #0
 8009562:	4604      	mov	r4, r0
 8009564:	4608      	mov	r0, r1
 8009566:	602b      	str	r3, [r5, #0]
 8009568:	f7f7 fb2c 	bl	8000bc4 <_sbrk>
 800956c:	1c43      	adds	r3, r0, #1
 800956e:	d102      	bne.n	8009576 <_sbrk_r+0x1a>
 8009570:	682b      	ldr	r3, [r5, #0]
 8009572:	b103      	cbz	r3, 8009576 <_sbrk_r+0x1a>
 8009574:	6023      	str	r3, [r4, #0]
 8009576:	bd38      	pop	{r3, r4, r5, pc}
 8009578:	24000358 	.word	0x24000358

0800957c <_init>:
 800957c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957e:	bf00      	nop
 8009580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009582:	bc08      	pop	{r3}
 8009584:	469e      	mov	lr, r3
 8009586:	4770      	bx	lr

08009588 <_fini>:
 8009588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958a:	bf00      	nop
 800958c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800958e:	bc08      	pop	{r3}
 8009590:	469e      	mov	lr, r3
 8009592:	4770      	bx	lr
